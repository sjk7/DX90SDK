<samples>
  <sample>
    <name>Texture</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates placing video on a 3D surface.]]></description>
    <folder>Samples\C#\AudioVideo\Texture\</folder>
    <exefolder>Samples\C#\AudioVideo\bin\</exefolder>
    <exe>csVideoTexture.exe</exe>
    <screenshot>Texture.jpg</screenshot>
    <doc>readme.txt</doc>
    <language>C#</language>
    <complexity>156</complexity>
    <projectfile7>Texture.sln</projectfile7>
  </sample>
  <sample>
    <name>AudioScripts</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Audio Scripts sample demonstrates how an application and a DirectMusic script work together. The script reads and writes to variables in the application, and the application calls routines in the script that play segments. The sample also demonstrates how waveforms can be played as variations in a segment.]]></description>
    <folder>Samples\C++\DirectMusic\AudioScripts\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>AudioScripts.exe</exe>
    <screenshot>AudioScripts.gif</screenshot>
    <doc>::/directx/htm/AudioScriptssample.htm</doc>
    <projectfile6>AudioScripts.dsw</projectfile6>
    <projectfile7>AudioScripts.sln</projectfile7>
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>Animate Palette</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[AnimatePalette demonstrates DirectDraw palette animation when in full-screen on a palettized surface.]]></description>
    <folder>Samples\VB.Net\DirectDraw\AnimatePalette\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbAnimatePalette.exe</exe>
    <screenshot>AnimatePalette.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>AnimatePalette.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>animate</keyword>
      <keyword>palette</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureTex9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample combines features of the Texture3D9 and PlayCap samples to render live incoming video onto a waving flag.  CaptureTex9 will enumerate any existing video capture devices attached to the system and will load the first device found.  A DirectShow renderer object will be created to render the incoming video stream onto a Direct3D9 surface, taking advantage of new Direct3D9 features.]]></description>
    <folder>Samples\C++\DirectShow\Capture\CaptureTex9\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CaptureTex9.exe</exe>
    <screenshot>CaptureTex9.jpg</screenshot>
    <doc>::/directx/htm/capturetex9sample.htm</doc>
    <projectfile6>CaptureTex9.dsw</projectfile6>
    <projectfile7>CaptureTex9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>CaptureTex9</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMO Test</name>
    <dxarea>DirectShow</dxarea>
    <type>utility</type>
    <description><![CDATA[DMOTest is a test utility for DirectX Media Objects (DMOs). DMOTest helps you to verify that a DMO meets the DMO specification.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>dmotest.exe</exe>
    <screenshot>DMOTest.jpg</screenshot>
    <doc>ms-its:../../Utilities/dmotest.chm</doc>
    <language>
    </language>
    <keywords>
      <keyword>dmo</keyword>
      <keyword>media</keyword>
      <keyword>object</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AudioFX</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The AudioFX sample shows how to use DMOs on DirectMusic audiopaths to add effects to sounds, and how to set effect parameters.]]></description>
    <folder>Samples\C++\DirectMusic\AudioFX\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>AudioFX.exe</exe>
    <screenshot>AudioFX.gif</screenshot>
    <doc>::/directx/htm/AudioFXsample.htm</doc>
    <projectfile6>AudioFX.dsw</projectfile6>
    <projectfile7>AudioFX.sln</projectfile7>
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>Profile Enumerator</name>
    <dxarea>DirectShow</dxarea>
    <type>utility</type>
    <description><![CDATA[Profile Enumerator displays information about the Microsoft Windows Media system profiles installed on your machine.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>ProfileEnum.exe</exe>
    <screenshot>ProfileEnum.jpg</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>profiler</keyword>
      <keyword>enum</keyword>
      <keyword>enumerator</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Force Editor</name>
    <dxarea>DirectInput</dxarea>
    <type>utility</type>
    <description><![CDATA[Force Editor is a tool for designing and testing force feedback effects in DirectInput.  In order to use the application, you need to have at least one force-feedback device attached to the system. The program requires the Microsoft Foundation Classes 4.2 library.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>Fedit.exe</exe>
    <screenshot>ForceEditor.jpg</screenshot>
    <doc>ms-its:../../Utilities/fedit.chm</doc>
    <language>
    </language>
    <keywords>
      <keyword>force</keyword>
      <keyword>editor</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Error Lookup</name>
    <dxarea>Miscellaneous</dxarea>
    <type>utility</type>
    <description><![CDATA[The DirectX Error Lookup utility allows users to enter a numerical HRESULT and get back the string equivalent as well as its description.]]></description>
    <folder>Samples\C++\Misc\dxerr\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>dxerr.exe</exe>
    <screenshot>dxerr.jpg</screenshot>
    <projectfile6>dxerr.dsw</projectfile6>
    <projectfile7>dxerr.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>dxerr</keyword>
      <keyword>lookup</keyword>
      <keyword>error</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SphereMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The SphereMap sample demonstrates an enviroment-mapping technique called sphere-mapping.  Environment-mapping is a technique in which the environment surrounding a 3D object (such as the lights, etc.) are put into a texture map, so that the object can have complex lighting effects without expensive lighting calculations.  Note that not all cards support all features for all the various environment mapping techniques (such as cubemapping and projected textures).  For more information on environment mapping, cubemapping, and projected textures,  refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\EnvMapping\SphereMap\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbSphereMap.exe</exe>
    <screenshot>SphereMap.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SphereMap.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>150</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AudioPath</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Audio Path sample demonstrates how different sounds can be played on an audiopath, and how the parameters of all sounds are affected by changes made on the audiopath.]]></description>
    <folder>Samples\C++\DirectMusic\AudioPath\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>AudioPath.exe</exe>
    <screenshot>AudioPath.gif</screenshot>
    <doc>::/directx/htm/AudioPathsample.htm</doc>
    <projectfile6>AudioPath.dsw</projectfile6>
    <projectfile7>AudioPath.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>3DAudio</name>
    <dxarea>DirectMusic</dxarea>
    <type>sample</type>
    <description><![CDATA[The 3D Audio sample application shows how to create a 3-D audiopath in a DirectMusic performance, how to obtain an interface to a 3-D buffer and listener in that path, and how to modify the parameters of the buffer and listener.]]></description>
    <folder>Samples\C++\DirectMusic\3DAudio\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>3DAudio.exe</exe>
    <screenshot>3DAudio.gif</screenshot>
    <doc>::/directx/htm/3daudiosample.htm</doc>
    <projectfile6>3DAudio.dsw</projectfile6>
    <projectfile7>3DAudio.sln</projectfile7>
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DotProduct3</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DotProduct3 sample demonstrates an alternative approach to Direct3D bump mapping. This technique is named after the mathematical operation which combines a light vector with a surface normal. The normals for a surface are traditional (x,y,z) vectors stored in RGBA format in a texture map (called anormal map, for this technique).  Not all cards support DotProduct3 blending texture stages, but then not all cards support Direct3D bump mapping.  Refer to the DirectX SDK documentation for more information.]]></description>
    <folder>Samples\C#\Direct3D\BumpMapping\DotProduct3\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csDotProduct3.exe</exe>
    <screenshot>DotProduct3.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DotProduct3.sln</projectfile7>
    <language>C#</language>
    <complexity>1250</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ClipMirror</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The ClipMirror sample demonstrates the use of custom-defined clip planes.  A 3D scene is rendered normally, and then again in a 2nd pass as if reflected in a planar mirror.  Clip planes are used to clip the reflected scene to the edges of the mirror.]]></description>
    <folder>Samples\VB.Net\Direct3D\ClipMirror\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbClipMirror.exe</exe>
    <screenshot>ClipMirror.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>clipmirror.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpUnderWater</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpUnderwater sample demonstrates an underwater effect that can be achieved using bump mapping. Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\BumpMapping\BumpUnderWater\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csBumpUnderWater.exe</exe>
    <screenshot>BumpUnderWater.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpUnderWater.sln</projectfile7>
    <language>C#</language>
    <complexity>1230</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpLens</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpLens sample demonstrates a lens effect that can be achieved using bump mapping.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\BumpMapping\BumpLens\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csBumpLens.exe</exe>
    <screenshot>BumpLens.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpLens.sln</projectfile7>
    <language>C#</language>
    <complexity>1220</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>FishEye</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FishEye sample shows a fish eye lens effect that can be achieved using cubemaps.]]></description>
    <folder>Samples\C#\Direct3D\EnvMapping\FishEye\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csFishEye.exe</exe>
    <screenshot>FishEye.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>FishEye.sln</projectfile7>
    <language>C#</language>
    <complexity>1439</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ProgressiveMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ProgressiveMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  A progressive mesh is one in which the vertex information is stored internally in a special tree which can be accessed to render the mesh with any given number of vertices. This procedure is fast, so progressive meshes are ideal for level-of-detail scenarios, where objects in the distance are render with fewer polygons.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\Meshes\ProgressiveMesh\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csProgressiveMesh.exe</exe>
    <screenshot>ProgressiveMesh.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ProgressiveMesh.sln</projectfile7>
    <language>C#</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Billboard</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Billboard sample illustrates the billboarding technique.  Rather than rendering complex 3-D models, such as a high-polygon tree model, billboarding renders a 2-D image of the model and rotates it to always face the eyepoint. This technique is commonly used to render trees, clouds, smoke, explosions, and more.]]></description>
    <folder>Samples\C#\Direct3D\Billboard\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csBillboard.exe</exe>
    <screenshot>Billboard.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Billboard.sln</projectfile7>
    <language>C#</language>
    <complexity>123</complexity>
    <keywords>
      <keyword>billboard</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StencilMirror</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The StencilMirror sample uses stencil buffers to implement a mirror effect.  In the sample, a watery terrain scene is rendered with the water reflecting a helicopter that flies above.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..  Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\StencilBuffer\StencilMirror\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csStencilMirror.exe</exe>
    <screenshot>StencilMirror.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>StencilMirror.sln</projectfile7>
    <language>C#</language>
    <complexity>1290</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HDRLighting</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates some high dynamic range lighting effects using floating point textures. Integer texture formats have a limited range of discrete values, which results in lost color information under dynamic lighting conditions; conversely, floating point formats can store very small or very large color values, including values beyond the displayable 0.0 to 1.0 range. This flexibility allows for dynamic lighting effects, such as blue-shifting under low lighting and blooming under intense lighting. This sample also employs a simple light adaptation model, under which the camera is momentarily over-exposed or under-exposed to changing light conditions.]]></description>
    <folder>Samples\C++\Direct3D\HDRLighting\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HDRLighting.exe</exe>
    <screenshot>HDRLighting.jpg</screenshot>
    <readme>readme.htm</readme>
    <projectfile6>HDRLighting.dsw</projectfile6>
    <projectfile7>HDRLighting.sln</projectfile7>
    <language>C++</language>
    <complexity>2900</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>FishEye</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FishEye sample shows a fish eye lens effect that can be achieved using cubemaps.]]></description>
    <folder>Samples\VB.Net\Direct3D\EnvMapping\FishEye\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbFishEye.exe</exe>
    <screenshot>FishEye.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>FishEye.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1270</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 1: Create a Device</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to initialize Direct3D, render a scene, and eventually shut down.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial1\</folder>
    <screenshot>Tut01_CreateDevice.jpg</screenshot>
    <projectfile7>Tutorial1.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>5</complexity>
  </sample>
  <sample>
    <name>Tutorial 1: Create a Device</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to initialize Direct3D, render a scene, and eventually shut down.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial1\</folder>
    <screenshot>Tut01_CreateDevice.jpg</screenshot>
    <projectfile7>Tutorial1.sln</projectfile7>
    <language>C#</language>
    <complexity>5</complexity>
  </sample>
  <sample>
    <name>PlayDVD</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DVD</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayDVD is a simple windowed DVD player based on the PlayWnd sample.  It allows you to render a DVD volume, watch movies, determine whether closed captioning and subpicture streams are displayed, adjust the playback rate and window size, and navigate the DVD menus with the keyboard or the mouse.]]></description>
    <folder>Samples\C++\DirectShow\DVD\PlayDVD\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayDVD.exe</exe>
    <screenshot>PlayDVD.jpg</screenshot>
    <doc>::/directx/htm/PlayDVDsample.htm</doc>
    <projectfile6>PlayDVD.dsw</projectfile6>
    <projectfile7>PlayDVD.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>PlayDVD</keyword>
      <keyword>DVD</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The CaptureSound application shows how to capture waveforms to a file.]]></description>
    <folder>Samples\VB.Net\DirectSound\CaptureSound\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbCaptureSound.exe</exe>
    <screenshot>CaptureSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>CaptureSound.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Play3DSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Play 3D Sound sample shows how to create a 3-D sound buffer and manipulate its properties.  It is similar to the 3D Audio Sample but uses only the DirectSound API.]]></description>
    <folder>Samples\VB.Net\DirectSound\Play3DSound\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbPlay3DSound.exe</exe>
    <screenshot>Play3DSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Play3DSound.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>SHPRTVertex</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[Similar to the SHPRTPixel sample, this sample demonstrates how use D3DXSHPRTSimulation(), a vertex based precomputed radiance transfer (PRT) simulator that uses low-order spherical harmonics (SH) and records the results to a file. The sample then demonstrates how compress the results with clustered principal component analysis (CPCA) and view the compressed results with arbitrary lighting in real time with a vs_1_1 vertex shader.]]></description>
    <folder>Samples\C++\Direct3D\SHPRTVertex\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>SHPRTVertex.exe</exe>
    <screenshot>SHPRTVertex.jpg</screenshot>
    <readme>readme.htm</readme>
    <projectfile6>SHPRTVertex.dsw</projectfile6>
    <projectfile7>SHPRTVertex.sln</projectfile7>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Play3DSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Play 3D Sound sample shows how to create a 3-D sound buffer and manipulate its properties.  It is similar to the 3D Audio Sample but uses only the DirectSound API.]]></description>
    <folder>Samples\C#\DirectSound\Play3DSound\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csPlay3DSound.exe</exe>
    <screenshot>Play3DSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Play3DSound.sln</projectfile7>
    <language>C#</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The CaptureSound application shows how to capture waveforms to a file.]]></description>
    <folder>Samples\C#\DirectSound\CaptureSound\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csCaptureSound.exe</exe>
    <screenshot>CaptureSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>CaptureSound.sln</projectfile7>
    <language>C#</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BDA Sample</name>
    <dxarea>DirectShow</dxarea>
    <type>sample</type>
    <description><![CDATA[Demonstrates how to construct a filter graph in DirectX 9.0 based on digital TV tuner cards that support the new Microsoft Broadcast Driver Architecture (BDA). The sample also shows how to perform tuning based on the new Microsoft Tuning Model. This sample does not use the Video Control or other TV components available on Windows XP only.]]></description>
    <folder>Samples\C++\DirectShow\BDA\BDASample\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>bdasample.exe</exe>
    <screenshot>BDASample.jpg</screenshot>
    <doc>::/directx/htm/bdasampleapplication.htm</doc>
    <projectfile6>bdasampl.dsw</projectfile6>
    <projectfile7>bdasampl.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>BDA</keyword>
      <keyword>bda</keyword>
      <keyword>broadcast</keyword>
      <keyword>data</keyword>
      <keyword>architecture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Scrawl</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Scrawl application demonstrates use of the mouse in exclusive mode in a windowed application.]]></description>
    <folder>Samples\C++\DirectInput\Scrawl\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Scrawl.exe</exe>
    <screenshot>Scrawl.gif</screenshot>
    <doc>::/directx/input/samps/scrawlsample.htm</doc>
    <projectfile6>Scrawl.dsw</projectfile6>
    <projectfile7>Scrawl.sln</projectfile7>
    <language>C++</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>Scrawl</keyword>
      <keyword>mouse</keyword>
      <keyword>exclusive</keyword>
      <keyword>cooperative</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionBasic</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ActionBasic sample is intended to be an introduction to action mapping, and illustrates a step by step approach to creating an action mapped application.]]></description>
    <folder>Samples\C++\DirectInput\ActionBasic\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ActionBasic.exe</exe>
    <screenshot>ActionBasic.gif</screenshot>
    <doc>::/directx/input/samps/actionbasicsample.htm</doc>
    <projectfile6>ActionBasic.dsw</projectfile6>
    <projectfile7>ActionBasic.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>ActionBasic</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionMapper</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ActionMapper sample is built upon the action mapping framework provided with the SDK.  The program illustrates how this framework can simplify the bookkeepping required for an action mapped application.]]></description>
    <folder>Samples\C++\DirectInput\ActionMapper\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ActionMapper.exe</exe>
    <screenshot>ActionMapper.gif</screenshot>
    <doc>::/directx/input/samps/actionmappersample.htm</doc>
    <projectfile6>ActionMapper.dsw</projectfile6>
    <projectfile7>ActionMapper.sln</projectfile7>
    <language>C++</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>ActionMapper</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AddressOverride</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[AddressOverride shows how to programmatically tell DirectPlay the addressing in order to host or connect to another session on the network, instead of just letting DirectPlay popup a dialog box to ask the user the connection settings.  Most games will typically follow this method so they can customize the UI.]]></description>
    <folder>Samples\C++\DirectPlay\AddressOverride\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>AddressOverride.exe</exe>
    <screenshot>AddressOverride.gif</screenshot>
    <doc>::/directx/play/samps/addressoverride.htm</doc>
    <projectfile6>AddressOverride.dsw</projectfile6>
    <projectfile7>AddressOverride.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>AddressOverride</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AdjustSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The AdjustSound sample shows how to create a DirectSound secondary buffer to play a WAV file, and how to change the parameters of the buffer.]]></description>
    <folder>Samples\C++\DirectSound\AdjustSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>AdjustSound.exe</exe>
    <screenshot>AdjustSound.gif</screenshot>
    <doc>::/directx/htm/adjustsoundsample.htm</doc>
    <projectfile6>AdjustSound.dsw</projectfile6>
    <projectfile7>AdjustSound.sln</projectfile7>
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>AdjustSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The AdjustSound sample shows how to create a DirectSound secondary buffer to play a WAV file, and how to change the parameters of the buffer.]]></description>
    <folder>Samples\C#\DirectSound\AdjustSound\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csAdjustSound.exe</exe>
    <screenshot>AdjustSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>AdjustSound.sln</projectfile7>
    <language>C#</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AdjustSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The AdjustSound sample shows how to create a DirectSound secondary buffer to play a WAV file, and how to change the parameters of the buffer.]]></description>
    <folder>Samples\VB.Net\DirectSound\AdjustSound\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbAdjustSound.exe</exe>
    <screenshot>AdjustSound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>AdjustSound.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>TxtPlayer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a custom allocator-presenter to render alpha-blended text over a running video.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\TxtPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TxtPlayer.exe</exe>
    <screenshot>TxtPlayer.jpg</screenshot>
    <doc>::/directx/htm/TxtPlayersample.htm</doc>
    <projectfile6>TxtPlayer.dsw</projectfile6>
    <projectfile7>TxtPlayer.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>TxtPlayer</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Renderless</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a custom allocator-presenter to render video in a window.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Renderless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Renderless.exe</exe>
    <screenshot>Renderless.jpg</screenshot>
    <doc>::/directx/htm/Renderlesssample.htm</doc>
    <projectfile6>Renderless.dsw</projectfile6>
    <projectfile7>Renderless.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>Renderless</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRXcl</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application shows capabilities of the new video mixing renderer (VMR) that is the default video renderer in Windows XP.  In particular, it demonstrates how to use the VMR in exclusive DirectDraw mode and how to implement a user-provided (customized) Allocator-Presenter for the VMR.  Also, it contains useful utilities to manage bitmaps (as textures) and TrueType fonts for text over video.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRXcl\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRXcl.exe</exe>
    <screenshot>VMRXcl.jpg</screenshot>
    <doc>::/directx/htm/VMRXclsample.htm</doc>
    <projectfile6>VMRXcl.dsw</projectfile6>
    <projectfile7>VMRXcl.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>VMRXcl</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AMCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates the following tasks related to audio and video capture: Capture to a file, Live preview, Allocation of the capture file, Display of device property pages, Device enumeration, Stream control]]></description>
    <folder>Samples\C++\DirectShow\Capture\AMCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AMCap.exe</exe>
    <screenshot>AMCap.jpg</screenshot>
    <doc>::/directx/htm/amcapsample.htm</doc>
    <projectfile6>AMCap.dsw</projectfile6>
    <projectfile7>AMCap.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>AMCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AmplitudeModulation</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The AmplitudeModulation sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\C++\DirectSound\AmplitudeModulation\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>AmplitudeModulation.exe</exe>
    <screenshot>AmplitudeModulation.gif</screenshot>
    <doc>::/directx/htm/AmplitudeModulationsample.htm</doc>
    <projectfile6>AmplitudeModulation.dsw</projectfile6>
    <projectfile7>AmplitudeModulation.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>VMRMulti</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample plays multiple video files over a Direct3D background. The media files all use separate filter graphs and can be controlled individually.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRMulti\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRMulti.exe</exe>
    <screenshot>VMRMulti.jpg</screenshot>
    <doc>::/directx/htm/VMRMultisample.htm</doc>
    <projectfile6>VMRMulti.dsw</projectfile6>
    <projectfile7>VMRMulti.sln</projectfile7>
    <language>C++</language>
    <complexity>2400</complexity>
    <keywords>
      <keyword>VMRMulti</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Cube</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a plug-in compositor to render video on a spinning cube.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Cube\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Cube.exe</exe>
    <screenshot>Cube.jpg</screenshot>
    <doc>::/directx/htm/Cubesample.htm</doc>
    <projectfile6>Cube.dsw</projectfile6>
    <projectfile7>Cube.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>Cube</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRPlayer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer to blend one or two running videos and a static image.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRPlayer.exe</exe>
    <screenshot>VMRPlayer.jpg</screenshot>
    <doc>::/directx/htm/VMRPlayersample.htm</doc>
    <projectfile6>VMRPlayer.dsw</projectfile6>
    <projectfile7>VMRPlayer.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>VMRPlayer</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Moire</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>ScreenSavers</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Moire sample shows how to use the DXSDK screensaver framework to write a screensaver that uses Direct3D.  The screensaver framework is very similar to the sample application framework, using many methods and variables with the same names.  After writing a program with the screensaver framework, one ends up with a fully-functional Windows screensaver rather than a regular Windows application.   The Moire screensaver appears as a mesmerizing sequence of spinning lines and colors.  It uses texture transformation and alpha blending to create a highly animated scene, even though the polygons that make up the scene do not move at all.]]></description>
    <folder>Samples\C++\Direct3D\ScreenSavers\Moire\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Moire.scr</exe>
    <screenshot>Moire.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/Moire.htm</doc>
    <projectfile6>Moire.dsw</projectfile6>
    <projectfile7>Moire.sln</projectfile7>
    <language>C++</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMODemo</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates how to use Microsoft DirectX Media Objects (DMO).  It streams audio data from a WAV file through a DirectSound Audio Effect DMO to a DirectSound buffer.  For DMOs which are processing data with one input and one output, where the media types of the input and output are the same, and the processing can be done in place, the IMediaObjectInPlace interface can be used.  If a DMO supports this interface, DMODemo will call process() on this interface to process the data in place; otherwise, DMODemo will use methods of IMediaObject to process the data.]]></description>
    <folder>Samples\C++\DirectShow\DMO\DMODemo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DMODemo.exe</exe>
    <screenshot>DMODemo.jpg</screenshot>
    <doc>::/directx/htm/dmodemo.htm</doc>
    <projectfile6>DMODemo.dsw</projectfile6>
    <projectfile7>DMODemo.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DMODemo</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ASFCopy</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This command line application transcodes one or more files to an ASF file.]]></description>
    <folder>Samples\C++\DirectShow\Misc\ASFCopy\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>ASFCopy.jpg</screenshot>
    <doc>::/directx/htm/ASFCopysample.htm</doc>
    <projectfile6>ASFCopy.dsw</projectfile6>
    <projectfile7>ASFCopy.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>ASFCopy</keyword>
      <keyword>Misc</keyword>
      <keyword>ASF</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample>
    <name>EffectEdit</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[EffectEdit is a tool with which one can create and edit D3DX effect (*.fx) files and view the graphical result interactively.  Changes to the effect file are compiled automatically and any compilation errors are shown in the 'Effect compilation results' pane.  Note that not all .fx files are designed to work with EffectEdit, since they may require special vertex types or extra processing that is not done by the EffectEdit program.]]></description>
    <folder>Samples\C++\Direct3D\EffectEdit\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EffectEdit.exe</exe>
    <screenshot>EffectEdit.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/EffectEdit.htm</doc>
    <projectfile6>EffectEdit.dsw</projectfile6>
    <projectfile7>EffectEdit.sln</projectfile7>
    <language>C++</language>
    <complexity>250</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AudioBox</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This MFC application is an audio-only media player similar to Jukebox. You can select a media directory and play all audio media files, including Windows Media Files.  Options include seeking, muting audio, randomizing file selection, adjusting volume, and looping the current media file.]]></description>
    <folder>Samples\C++\DirectShow\Players\AudioBox\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AudioBox.exe</exe>
    <screenshot>AudioBox.jpg</screenshot>
    <doc>::/directx/htm/AudioBoxsample.htm</doc>
    <projectfile6>AudioBox.dsw</projectfile6>
    <projectfile7>AudioBox.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>AudioBox</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AudioCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates PCM audio capture using DirectShow and allows the user to audition the audio input while recording.  AudioCap enables the user to perform the following tasks: Capture audio to a file, Select the audio capture device and its corresponding input pin, View properties on the audio capture device, Select the sample rate and number of channels (stereo or mono)]]></description>
    <folder>Samples\C++\DirectShow\Capture\AudioCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AudioCap.exe</exe>
    <screenshot>AudioCap.jpg</screenshot>
    <doc>::/directx/htm/AudioCapsample.htm</doc>
    <projectfile6>AudioCap.dsw</projectfile6>
    <projectfile7>AudioCap.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>AudioCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DIConfig</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DIConfig code demonstrates the implementation of a configuration user interface based upon the DirectInput Mapper technology. This sample code is *very* complex, and is intended to be taken as a reference implementation more than a learning tool.]]></description>
    <folder>Samples\C++\DirectInput\DIConfig\</folder>
    <screenshot>DIConfig.gif</screenshot>
    <doc>::/directx/input/samps/diconfigsample.htm</doc>
    <projectfile6>DIConfig.dsw</projectfile6>
    <projectfile7>DIConfig.sln</projectfile7>
    <language>C++</language>
    <complexity>2900</complexity>
    <keywords>
      <keyword>DIConfig</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>ConfigureDevices</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 5: Using Texture Maps</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial covers how to load textures, set up vertices, and display objects with texture.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial5\</folder>
    <screenshot>Tut05_Textures.jpg</screenshot>
    <projectfile7>Tutorial5.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>25</complexity>
  </sample>
  <sample>
    <name>Tutorial 5:  Textures</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Textures tutorial shows how to use texture mapping in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut05_Textures\</folder>
    <screenshot>Tut05_Textures.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/5/tutorial5.htm</doc>
    <projectfile6>Textures.dsw</projectfile6>
    <projectfile7>Textures.sln</projectfile7>
    <language>C++</language>
    <complexity>15</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 5: Using Texture Maps</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial covers how to load textures, set up vertices, and display objects with texture.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial5\</folder>
    <projectfile7>Tutorial5.sln</projectfile7>
    <language>C#</language>
    <complexity>25</complexity>
    <screenshot>Tut05_Textures.jpg</screenshot>
  </sample>
  <sample>
    <name>BGMusic</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to swap source filters in a filter graph.  It will cycle through three MP3 files, displaying the name of each file as it is played. The MP3 files used by this sample are located in the Media directory of the DirectX SDK ( <sdk root>\samples\Media ).]]></description>
    <folder>Samples\C++\DirectShow\Players\BGMusic\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>BGMusic.exe</exe>
    <screenshot>BGMusic.jpg</screenshot>
    <doc>::/directx/htm/BGMusicsample.htm</doc>
    <projectfile6>BGMusic.dsw</projectfile6>
    <projectfile7>BGMusic.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>BGMusic</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Billboard</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Billboard sample illustrates the billboarding technique.  Rather than rendering complex 3-D models, such as a high-polygon tree model, billboarding renders a 2-D image of the model and rotates it to always face the eyepoint. This technique is commonly used to render trees, clouds, smoke, explosions, and more.]]></description>
    <folder>Samples\C++\Direct3D\Billboard\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Billboard.exe</exe>
    <screenshot>Billboard.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/billboard.htm</doc>
    <projectfile6>Billboard.dsw</projectfile6>
    <projectfile7>Billboard.sln</projectfile7>
    <language>C++</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Text</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend video and text.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Text\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Text.exe</exe>
    <screenshot>Text.jpg</screenshot>
    <doc>::/directx/htm/Textsample.htm</doc>
    <projectfile6>Text.dsw</projectfile6>
    <projectfile7>Text.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Text</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Ticker</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend video and text.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Ticker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Ticker.exe</exe>
    <screenshot>vmrTicker.jpg</screenshot>
    <doc>::/directx/htm/Tickersample.htm</doc>
    <projectfile6>Ticker.dsw</projectfile6>
    <projectfile7>Ticker.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Ticker</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Watermark</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Watermark demonstrates the VMR's ability to alpha blend a static image with the running video stream (or with multiple video streams).  In addition to displaying a watermark (logo) in the bottom right corner of the window, this sample also demonstrates how to flip, mirror, manipulate alpha, and move a bitmap around in the application's video window.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Watermark\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Watermark.exe</exe>
    <screenshot>Watermark.jpg</screenshot>
    <doc>::/directx/htm/Watermarksample.htm</doc>
    <projectfile6>Watermark.dsw</projectfile6>
    <projectfile7>Watermark.sln</projectfile7>
    <language>C++</language>
    <complexity>1400</complexity>
    <keywords>
      <keyword>Watermark</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoicePosition</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[VoicePosition is similar in form to VoiceConnect.  VoicePosition shows how to use 3D positioning with DirectPlay Voice.  It uses a simple 2D grid to represent a playing field.  Players may move around the playing field to hear the effects of 3D spatialization.]]></description>
    <folder>Samples\C++\DirectPlay\VoicePosition\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>VoicePosition.exe</exe>
    <screenshot>VoicePosition.gif</screenshot>
    <doc>::/directx/play/samps/voiceposition.htm</doc>
    <projectfile6>VoicePosition.dsw</projectfile6>
    <projectfile7>VoicePosition.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>VoicePosition</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>IDirectSound8</keyword>
      <keyword>IDirectSound3DListener8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Play3DSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Play 3D Sound sample shows how to create a 3-D sound buffer and manipulate its properties. It is similar to the 3D Audio Sample but uses only the DirectSound API.]]></description>
    <folder>Samples\C++\DirectSound\Play3DSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>Play3DSound.exe</exe>
    <screenshot>Play3DSound.gif</screenshot>
    <doc>::/directx/htm/Play3DSoundsample.htm</doc>
    <projectfile6>Play3DSound.dsw</projectfile6>
    <projectfile7>Play3DSound.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>Pip</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend multiple video streams in a window. After loading two media files, you can use the keyboard and function keys to move and resize the secondary media stream. You may also flip, mirror, and swap the streams with or without an animation effect.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Pip\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Pip.exe</exe>
    <screenshot>Pip.jpg</screenshot>
    <doc>::/directx/htm/Pipsample.htm</doc>
    <projectfile6>VMRPip.dsw</projectfile6>
    <projectfile7>VMRPip.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Pip</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Blender</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend multiple video streams in an MFC dialog-based application.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Blender\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Blender.exe</exe>
    <screenshot>Blender.jpg</screenshot>
    <doc>::/directx/htm/Blendersample.htm</doc>
    <projectfile6>Blender.dsw</projectfile6>
    <projectfile7>Blender.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Blender</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ReadFFE</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FFeedFileRead sample enumerates and plays all of the DirectInput Force Feedback effects in stored in a DirectInput effects file.]]></description>
    <folder>Samples\C++\DirectInput\ReadFFE\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ReadFFE.exe</exe>
    <screenshot>ReadFFE.gif</screenshot>
    <doc>::/directx/input/samps/readffesample.htm</doc>
    <projectfile6>ReadFFE.dsw</projectfile6>
    <projectfile7>ReadFFE.sln</projectfile7>
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>ReadFFE</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>IDirectInputEffect</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMOEnum</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates the use of the DMOEnum, IEnumDMO, and IMediaObject interfaces to enumerate and read information about DirectX Media Objects installed on your system.  You may view all DMOs or only those that are not keyed by checking the "Include Keyed DMOs?" checkbox.]]></description>
    <folder>Samples\C++\DirectShow\Misc\DMOEnum\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DMOEnum.exe</exe>
    <screenshot>DMOEnum.jpg</screenshot>
    <doc>::/directx/htm/DMOEnumsample.htm</doc>
    <projectfile6>DMOEnum.dsw</projectfile6>
    <projectfile7>DMOEnum.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DMOEnum</keyword>
      <keyword>Misc</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayDMO</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayDMO allows you to open any media file, view its video component (if present), and apply any number of DMO audio effects to its audio component.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayDMO\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayDMO.exe</exe>
    <screenshot>PlayDMO.jpg</screenshot>
    <doc>::/directx/htm/PlayDMOsample.htm</doc>
    <projectfile6>PlayDMO.dsw</projectfile6>
    <projectfile7>PlayDMO.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>PlayDMO</keyword>
      <keyword>Player</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpEarth</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpEarth program demonstrates the bump mapping capabilities of Direct3D.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces. This sample renders a rotating, bump mapped planet Earth.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\BumpEarth\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BumpEarth.exe</exe>
    <screenshot>BumpEarth.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/BumpEarth.htm</doc>
    <projectfile6>BumpEarth.dsw</projectfile6>
    <projectfile7>BumpEarth.sln</projectfile7>
    <language>C++</language>
    <complexity>1210</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpLens</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpLens sample demonstrates a lens effect that can be achieved using bump mapping.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\BumpLens\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BumpLens.exe</exe>
    <screenshot>BumpLens.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/BumpLens.htm</doc>
    <projectfile6>BumpLens.dsw</projectfile6>
    <projectfile7>BumpLens.sln</projectfile7>
    <language>C++</language>
    <complexity>1220</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpSelfShadow</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpSelfShadow project includes all source and content for the self shadowing bump map algorithm presented at the 2001 GDC lecture by Dan Baker and Chas Boyd. This app will run without pixel shaders, as long as the hardware has rendertargets and DOT3.  However, it runs much more efficently with pixel shaders and with better visual results.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\BumpSelfShadow\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BumpSelfShadow.exe</exe>
    <screenshot>BumpSelfShadow.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/BumpSelfShadow.htm</doc>
    <projectfile6>BumpSelfShadow.dsw</projectfile6>
    <projectfile7>BumpSelfShadow.sln</projectfile7>
    <language>C++</language>
    <complexity>2540</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpUnderWater</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpUnderWater sample demonstrates an underwater effect that can be achieved using bump mapping.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.   Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\BumpUnderWater\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BumpUnderWater.exe</exe>
    <screenshot>BumpUnderWater.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/BumpUnderWater.htm</doc>
    <projectfile6>BumpUnderWater.dsw</projectfile6>
    <projectfile7>BumpUnderWater.sln</projectfile7>
    <language>C++</language>
    <complexity>1230</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpWaves</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpWaves program demonstrates the bump mapping capabilities of Direct3D.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces. This sample renders a waterfront scene with only 4 triangles. The waves in the scene are completely fabricated with a bump map.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.   This sample also uses a technique called "projected textures", which is a texture-coordinate generation technique and is not the focal point of the sample.  For more information on texture-coordinate generation, refer again to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\BumpWaves\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BumpWaves.exe</exe>
    <screenshot>BumpWaves.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/BumpWaves.htm</doc>
    <projectfile6>BumpWaves.dsw</projectfile6>
    <projectfile7>BumpWaves.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The CaptureSound application shows how to capture waveforms to a file.]]></description>
    <folder>Samples\C++\DirectSound\CaptureSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>CaptureSound.exe</exe>
    <screenshot>CaptureSound.gif</screenshot>
    <doc>::/directx/htm/CaptureSoundsample.htm</doc>
    <projectfile6>CaptureSound.dsw</projectfile6>
    <projectfile7>CaptureSound.sln</projectfile7>
    <language>C++</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>DVApp</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates how to build various types of filter graphs for controlling DV camcorders.  It also shows how to perform capture, preview,  transmit, and device control with a DV camcorder.]]></description>
    <folder>Samples\C++\DirectShow\Capture\DVApp\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DVApp.exe</exe>
    <screenshot>DVApp.jpg</screenshot>
    <doc>::/directx/htm/DVAppsample.htm</doc>
    <projectfile6>DVApp.dsw</projectfile6>
    <projectfile7>DVApp.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DVApp</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MazeClient</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the Direct3D client portion of the DirectPlay8 client/server Maze sample. The client comes in two flavors.  A console based version, and a D3D client.  The D3D client can optionally be run as screen saver by simply copying mazeclient.exe to your \winnt\system32\ and renaming it to mazeclient.scr.  This will make it a screen saver that will be detected by the display control panel.]]></description>
    <folder>Samples\C++\DirectPlay\Maze\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>MazeClient.exe</exe>
    <screenshot>MazeClient.gif</screenshot>
    <doc>::/directx/play/samps/maze.htm</doc>
    <projectfile6>Maze.dsw</projectfile6>
    <projectfile7>Maze.sln</projectfile7>
    <language>C++</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>MazeClient</keyword>
      <keyword>Maze</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Water</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Water sample illustrates using D3DX techniques stored in shader files. The sample shows a square pond inside a building, with rippling water effects including water caustics.]]></description>
    <folder>Samples\C++\Direct3D\Water\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Water.exe</exe>
    <screenshot>Water.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/Water.htm</doc>
    <projectfile6>Water.dsw</projectfile6>
    <projectfile7>Water.sln</projectfile7>
    <language>C++</language>
    <complexity>2510</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>TransViewer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This MFC application allows you to preview all of the DirectShow Editing Services transitions installed on your system. You can preview transitions using media files or simple solid colors.]]></description>
    <folder>Samples\C++\DirectShow\Editing\TransViewer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TransViewer.exe</exe>
    <screenshot>TransViewer.jpg</screenshot>
    <doc>::/directx/htm/TransViewersample.htm</doc>
    <projectfile6>TransViewer.dsw</projectfile6>
    <projectfile7>TransViewer.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>TransViewer</keyword>
      <keyword>Editing</keyword>
      <keyword>transition</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ChatPeer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[ChatPeer is similar in form to SimplePeer.  Once a player hosts or connects to a session, the players can chat with each other by passing text strings.]]></description>
    <folder>Samples\C++\DirectPlay\ChatPeer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>ChatPeer.exe</exe>
    <screenshot>ChatPeer.gif</screenshot>
    <doc>::/directx/play/samps/chatpeer.htm</doc>
    <projectfile6>ChatPeer.dsw</projectfile6>
    <projectfile7>ChatPeer.sln</projectfile7>
    <language>C++</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>ChatPeer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DataRelay</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[The DataRelay is similar to SimplePeer but differs by sending a single target (or everyone) a packet of data with options specified in the dialog's UI.  It uses a worker thread to process received data, and uses the ReturnBuffer() API so that no copying of the received buffers is done.]]></description>
    <folder>Samples\C#\DirectPlay\DataRelay\</folder>
    <exefolder>Samples\C#\DirectPlay\Bin\</exefolder>
    <exe>csDataRelay.exe</exe>
    <screenshot>DataRelay.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DataRelay.sln</projectfile7>
    <language>C#</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ChatPeer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[ChatPeer is similar in form to SimplePeer.  Once a player hosts or connects to a session, the players can chat with each other by passing text strings.]]></description>
    <folder>Samples\VB.Net\DirectPlay\ChatPeer\</folder>
    <exefolder>Samples\VB.Net\DirectPlay\Bin\</exefolder>
    <exe>vbChatPeer.exe</exe>
    <screenshot>ChatPeer.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ChatPeer.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>ChatPeer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Texture Tool</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[The DirectX Texture Tool allows users to easily create texture maps that use the new DXTn compression formats.  Creating a DXTn-compressed texture is actually not that difficult to do: DirectDraw's Blt function can do the conversion for you.  Advanced developers will probably want to write their own tools that meet their specific needs.  But this tool provides useful basic functionality.]]></description>
    <folder>Samples\C++\Direct3D\dxtex\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>DXTex.exe</exe>
    <screenshot>DXTex.jpg</screenshot>
    <doc>::/directx/graphics/tools/dxtextool.htm</doc>
    <projectfile6>dxtex.dsw</projectfile6>
    <projectfile7>dxtex.sln</projectfile7>
    <language>C++</language>
    <complexity>1240</complexity>
    <keywords>
      <keyword>texture</keyword>
      <keyword>tool</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  9: Client</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the client portion of the ClientServer tutorial, the 9th tutorial for DirectPlay. It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Client.gif</screenshot>
    <doc>::/directx/play/tut/tutorial9_clientserver.htm</doc>
    <projectfile6>ClientServer.dsw</projectfile6>
    <projectfile7>ClientServer.sln</projectfile7>
    <language>C++</language>
    <complexity>90</complexity>
    <keywords>
      <keyword>Client</keyword>
      <keyword>ClientServer</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ClipMirror</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The ClipMirror sample demonstrates the use of custom-defined clip planes.  A 3D scene is rendered normally, and then again in a 2nd pass as if reflected in a planar mirror. Clip planes are used to clip the reflected scene to the edges of the mirror.]]></description>
    <folder>Samples\C#\Direct3D\ClipMirror\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csClipMirror.exe</exe>
    <screenshot>ClipMirror.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>clipmirror.sln</projectfile7>
    <language>C#</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CompressView</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates how to recompress a video/audio source file into another file with a different compression type. You can convert MPG, QT, AVI, or any video file that DirectShow supports into an AVI file, as long as you have the appropriate compressors and decompressors.  Note, however, that some compressors cannot be used if they have Digital Rights Management (DRM) built into them or if the compressors just are not functioning in the expected manner.]]></description>
    <folder>Samples\C++\DirectShow\Editing\CompressView\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CompressView.exe</exe>
    <screenshot>CompressView.jpg</screenshot>
    <doc>::/directx/htm/CompressViewsample.htm</doc>
    <projectfile6>Compressor.dsw</projectfile6>
    <projectfile7>Compressor.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>compressview</keyword>
      <keyword>compress</keyword>
      <keyword>Editing</keyword>
      <keyword>codec</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  4: Connect</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Connect tutorial is the 4th tutorial for DirectPlay.  It builds upon the last tutorial by adding host enumeration at a given target address.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut04_Connect\</folder>
    <screenshot>Connect.gif</screenshot>
    <doc>::/directx/play/tut/tutorial4_connect.htm</doc>
    <projectfile6>Connect.dsw</projectfile6>
    <projectfile7>Connect.sln</projectfile7>
    <language>C++</language>
    <complexity>40</complexity>
    <keywords>
      <keyword>Connect</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MazeConsoleClient</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the console client portion of the DirectPlay8 client/server Maze sample. The client comes in two flavors.  A console based version, and a D3D client.  The D3D client can optionally be run as screen saver by simply copying mazeclient.exe to your \winnt\system32\ and renaming it to mazeclient.scr.  This will make it a screen saver that will be detected by the display control panel.]]></description>
    <folder>Samples\C++\DirectPlay\Maze\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>MazeConsoleClient.exe</exe>
    <screenshot>MazeConsoleClient.gif</screenshot>
    <doc>::/directx/play/samps/maze.htm</doc>
    <projectfile6>Maze.dsw</projectfile6>
    <projectfile7>Maze.sln</projectfile7>
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>MazeConsoleClient</keyword>
      <keyword>Maze</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>BasicHLSL</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows a simple example of the High-Level Shader Language (HLSL) using the effect interface.]]></description>
    <folder>Samples\C++\Direct3D\BasicHLSL\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BasicHLSL.exe</exe>
    <screenshot>BasicHLSL.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/BasicHLSL.htm</doc>
    <projectfile6>BasicHLSL.dsw</projectfile6>
    <projectfile7>BasicHLSL.sln</projectfile7>
    <language>C++</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 1:  CreateDevice</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The CreateDevice tutorial is the first tutorial for using the new Direct3D interfaces for DirectX 9.  It shows how to create a Direct3DDevice9 object.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut01_CreateDevice\</folder>
    <screenshot>Tut01_CreateDevice.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/1/tutorial1.htm</doc>
    <projectfile6>CreateDevice.dsw</projectfile6>
    <projectfile7>CreateDevice.sln</projectfile7>
    <language>C++</language>
    <complexity>11</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CrossFade</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Cross Fade samples shows how to fade out one segment while fading in another.]]></description>
    <folder>Samples\C++\DirectMusic\CrossFade\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>CrossFade.exe</exe>
    <screenshot>CrossFade.gif</screenshot>
    <doc>::/directx/htm/CrossFadesample.htm</doc>
    <projectfile6>CrossFade.dsw</projectfile6>
    <projectfile7>CrossFade.sln</projectfile7>
    <language>C++</language>
    <complexity>1140</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>CubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The CubeMap sample demonstrates an environment-mapping technique called cube-mapping.  Environment-mapping is a technique in which the environment surrounding a 3D object (such as the lights, etc.) are put into a texture map, so that the object can have complex lighting effects without expensive lighting calculations.  Note that not all cards support all features for all the various environment mapping techniques (such as cube-mapping and projected textures).  For more information on environment mapping, cube-mapping, and projected textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\EnvMapping\CubeMap\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>CubeMap.exe</exe>
    <screenshot>CubeMap.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/CubeMap.htm</doc>
    <projectfile6>CubeMap.dsw</projectfile6>
    <projectfile7>CubeMap.sln</projectfile7>
    <language>C++</language>
    <complexity>1260</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Cull</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Cull sample illustrates how to cull objects whose object bounding box (OBB) does not intersect the view frustum.  By not passing these objects to D3D, you save the time that would be spent by D3D transforming and lighting these objects which will never be visible.  The time savings could be significant if there are many such objects, and/or if the objects contain many vertices.]]></description>
    <folder>Samples\C++\Direct3D\Cull\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Cull.exe</exe>
    <screenshot>Cull.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/Cull.htm</doc>
    <projectfile6>Cull.dsw</projectfile6>
    <projectfile7>Cull.sln</projectfile7>
    <language>C++</language>
    <complexity>190</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CustomFormat</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The CustomFormat sample illustrates the use of a custom data format.]]></description>
    <folder>Samples\C++\DirectInput\CustomFormat\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>CustomFormat.exe</exe>
    <screenshot>CustomFormat.gif</screenshot>
    <doc>::/directx/input/using/devices/customformatsample.htm</doc>
    <projectfile6>CustomFormat.dsw</projectfile6>
    <projectfile7>CustomFormat.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>CustomFormat</keyword>
      <keyword>data</keyword>
      <keyword>format</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>SetDataFormat</keyword>
      <keyword>DIDATAFORMAT</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CutScene</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Cutscene is a simple fullscreen movie player sample that enables you to add movie playback to your application without needing to learn the specifics of DirectShow programming.]]></description>
    <folder>Samples\C++\DirectShow\Players\CutScene\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CutScene.exe</exe>
    <screenshot>CutScene.jpg</screenshot>
    <doc>::/directx/htm/CutScenesample.htm</doc>
    <projectfile6>CutScene.dsw</projectfile6>
    <projectfile7>CutScene.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>CutScene</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MultiMapper</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The MultiMapper application demonstrates the DirectInput Mapper in a windowed application. The provided class allows multiple users to share action-mapped devices on the same computer.]]></description>
    <folder>Samples\C++\DirectInput\MultiMapper\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>MultiMapper.exe</exe>
    <screenshot>MultiMapper.gif</screenshot>
    <doc>::/directx/input/samps/multimappersample.htm</doc>
    <projectfile6>MultiMapper.dsw</projectfile6>
    <projectfile7>MultiMapper.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>MultiMapper</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>DataRelay</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[The DataRelay is similar to SimplePeer but differs by sending a single target (or everyone) a packet of data with options specified in the dialog's UI.  It uses a worker thread to process received data, and uses the ReturnBuffer() API so that no copying of the received buffers is done.]]></description>
    <folder>Samples\C++\DirectPlay\DataRelay\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>DataRelay.exe</exe>
    <screenshot>DataRelay.gif</screenshot>
    <doc>::/directx/play/samps/datarelay.htm</doc>
    <projectfile6>DataRelay.dsw</projectfile6>
    <projectfile7>DataRelay.sln</projectfile7>
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DataRelay</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[The DataRelay is similar to SimplePeer but differs by sending a single target (or everyone) a packet of data with options specified in the dialog's UI.  It uses a worker thread to process received data, and uses the ReturnBuffer() API so that no copying of the received buffers is done.]]></description>
    <folder>Samples\VB.Net\DirectPlay\DataRelay\</folder>
    <exefolder>Samples\VB.Net\DirectPlay\Bin\</exefolder>
    <exe>vbDataRelay.exe</exe>
    <screenshot>DataRelay.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DataRelay.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DDrawXCL</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how video can be played back from AVI, MPEG files as well as DVD titles in DirectDraw exclusive fullscreen mode.  This is expected to be very helpful to games and interactive content development.]]></description>
    <folder>Samples\C++\DirectShow\Players\DDrawXCL\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DDrawXCL.exe</exe>
    <screenshot>DDrawXCL.jpg</screenshot>
    <doc>::/directx/htm/DDrawXCLsample.htm</doc>
    <projectfile6>DDrawXCL.dsw</projectfile6>
    <projectfile7>DDrawXCL.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>DDrawXCL</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRMix</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application shows capabilities of the new video mixing renderer (VMR) that is the default video renderer in Windows XP.  In particular, it demonstrates how to use the VMR in a mixing mode with several sources, how to apply a bitmap image with a color key over the video, and how to take advantage of the IVMRMixerControl interface to manage source and destination rectangles and alpha-level for each media stream.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRMix\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRMix.exe</exe>
    <screenshot>VMRMix.jpg</screenshot>
    <doc>::/directx/htm/VMRMixsample.htm</doc>
    <projectfile6>VMRMix.dsw</projectfile6>
    <projectfile7>VMRMix.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>VMRMix</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DeviceView</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DeviceView sample shows how the DIDevImage framework provided with this SDK can be used to create a custom device configuration interface.]]></description>
    <folder>Samples\C++\DirectInput\DeviceView\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>DeviceView.exe</exe>
    <screenshot>DeviceView.gif</screenshot>
    <doc>::/directx/input/samps/deviceviewsample.htm</doc>
    <projectfile6>DeviceView.dsw</projectfile6>
    <projectfile7>DeviceView.sln</projectfile7>
    <language>C++</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>DeviceView</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>ConfigureDevices</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DVDSample</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DVD</dxsubarea>
    <type>sample</type>
    <description><![CDATA[DVDSample is a C++ DVD application.  It demonstrates all basic playback and navigation functions, as well as advanced features such as parental level management, bookmarks, karaoke, and command synchronization.]]></description>
    <folder>Samples\C++\DirectShow\DVD\DVDSample\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DVDSample.exe</exe>
    <screenshot>DVDSample.jpg</screenshot>
    <doc>::/directx/htm/dvdsample.htm</doc>
    <projectfile6>DVDSample.dsw</projectfile6>
    <projectfile7>DVDSample.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DVDSample</keyword>
      <keyword>DVD</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowed</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[WindowedMode demonstrates the tasks required to initialize and run a windowed DirectDraw application.]]></description>
    <folder>Samples\VB.Net\DirectDraw\Windowed\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbWindowed.exe</exe>
    <screenshot>Windowed.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Windowed.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>window</keyword>
      <keyword>windowed</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  1: EnumSP</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The EnumSP tutorial is the first tutorial for DirectPlay.  It initializes DirectPlay and enumerates the available DirectPlay Service Providers.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut01_EnumSP\</folder>
    <screenshot>EnumSP.gif</screenshot>
    <doc>::/directx/play/tut/tutorial1_enumeratesp.htm</doc>
    <projectfile6>EnumSP.dsw</projectfile6>
    <projectfile7>EnumSP.sln</projectfile7>
    <language>C++</language>
    <complexity>10</complexity>
    <keywords>
      <keyword>EnumSP</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>service</keyword>
      <keyword>provider</keyword>
      <keyword>EnumServiceProviders</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DolphinVS</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The DolphinVS sample shows an underwater scene of a dolphin swimming, with caustic effects on the dolphin and seafloor. The dolphin is animated using a technique called "tweening".  The underwater effect simply uses fog, and the water caustics use an animated set of textures. These effects are achieved using vertex shaders.]]></description>
    <folder>Samples\C++\Direct3D\DolphinVS\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>DolphinVS.exe</exe>
    <screenshot>DolphinVS.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/DolphinVS.htm</doc>
    <projectfile6>DolphinVS.dsw</projectfile6>
    <projectfile7>DolphinVS.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>FishEye</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FishEye sample shows a fish eye lens effect that can be achieved using cubemaps.]]></description>
    <folder>Samples\C++\Direct3D\EnvMapping\FishEye\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>FishEye.exe</exe>
    <screenshot>FishEye.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/FishEye.htm</doc>
    <projectfile6>FishEye.dsw</projectfile6>
    <projectfile7>FishEye.sln</projectfile7>
    <language>C++</language>
    <complexity>1270</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayMulti</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Play Multi sample shows how to play multiple segments simultaneously, one as a primary segment and the others as secondary segments.]]></description>
    <folder>Samples\C++\DirectMusic\PlayMulti\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>PlayMulti.exe</exe>
    <screenshot>PlayMulti.gif</screenshot>
    <doc>::/directx/htm/PlayMultisample.htm</doc>
    <projectfile6>PlayMulti.dsw</projectfile6>
    <projectfile7>PlayMulti.sln</projectfile7>
    <language>C++</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  3: EnumHosts</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The EnumHosts tutorial is the 3nd tutorial for DirectPlay.  It builds upon the last tutorial and adds the enumerating the hosts at a given target address.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut03_EnumHosts\</folder>
    <screenshot>EnumHosts.gif</screenshot>
    <doc>::/directx/play/tut/tutorial3_enumeratehosts.htm</doc>
    <projectfile6>EnumHosts.dsw</projectfile6>
    <projectfile7>EnumHosts.sln</projectfile7>
    <language>C++</language>
    <complexity>30</complexity>
    <keywords>
      <keyword>EnumHosts</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  2: Host</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Host tutorial is the 2nd tutorial for DirectPlay.  It builds upon the last tutorial and adds creation of an Address Object and hosting a session.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut02_Host\</folder>
    <screenshot>Host.gif</screenshot>
    <doc>::/directx/play/tut/tutorial2_host.htm</doc>
    <projectfile6>Host.dsw</projectfile6>
    <projectfile7>Host.sln</projectfile7>
    <language>C++</language>
    <complexity>20</complexity>
    <keywords>
      <keyword>Host</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>IDirectPlay8Address</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  5: Send</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Send tutorial is the 5th tutorial for DirectPlay.  It builds upon the last tutorial and adds a call to the Send method]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut05_Send\</folder>
    <screenshot>Send.gif</screenshot>
    <doc>::/directx/play/tut/tutorial5_send.htm</doc>
    <projectfile6>Send.dsw</projectfile6>
    <projectfile7>Send.sln</projectfile7>
    <language>C++</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>Send</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  6: HostMigration</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The HostMigration tutorial is the 6th tutorial for DirectPlay.  It builds upon the last tutorial and adds host migration.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut06_HostMigration\</folder>
    <screenshot>HostMigration.gif</screenshot>
    <doc>::/directx/play/tut/tutorial6_hostmigration.htm</doc>
    <projectfile6>HostMigration.dsw</projectfile6>
    <projectfile7>HostMigration.sln</projectfile7>
    <language>C++</language>
    <complexity>60</complexity>
    <keywords>
      <keyword>HostMigration</keyword>
      <keyword>migration</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  7: LobbyLaunch</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The LobbyLaunch tutorial is the 7th tutorial for DirectPlay.  It builds upon the last tutorial and adds lobby launching.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut07_LobbyLaunch\</folder>
    <screenshot>LobbyLaunch.gif</screenshot>
    <doc>::/directx/play/tut/tutorial7_lobbylaunched.htm</doc>
    <projectfile6>LobbyLaunch.dsw</projectfile6>
    <projectfile7>LobbyLaunch.sln</projectfile7>
    <language>C++</language>
    <complexity>70</complexity>
    <keywords>
      <keyword>LobbyLaunch</keyword>
      <keyword>lobby</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>IDirectPlay8LobbiedApplication</keyword>
    </keywords>
  </sample>
  <sample>
    <name>EnhancedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The EnhancedMesh sample shows how to use D3DX to load and enhance a mesh. The mesh is enhanced by increasing the vertex count.]]></description>
    <folder>Samples\C++\Direct3D\Meshes\EnhancedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EnhancedMesh.exe</exe>
    <screenshot>EnhancedMesh.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/EnhancedMesh.htm</doc>
    <projectfile6>EnhancedMesh.dsw</projectfile6>
    <projectfile7>EnhancedMesh.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>OptimizedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The OptimizedMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\Meshes\OptimizedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>OptimizedMesh.exe</exe>
    <screenshot>OptimizedMesh.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/OptimizedMesh.htm</doc>
    <projectfile6>OptimizedMesh.dsw</projectfile6>
    <projectfile7>OptimizedMesh.sln</projectfile7>
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ProgressiveMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ProgressiveMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  A progressive mesh is one in which the vertex information is stored internally in a special tree which can be accessed to render the mesh with any given number of vertices.  This procedure is fast, so progressive meshes are ideal for level-of-detail scenarios, where objects in the distance are rendered with fewer polygons.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\Meshes\ProgressiveMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ProgressiveMesh.exe</exe>
    <screenshot>ProgressiveMesh.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/ProgressiveMesh.htm</doc>
    <projectfile6>ProgressiveMesh.dsw</projectfile6>
    <projectfile7>ProgressiveMesh.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SkinnedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The SkinnedMesh sample shows how to use D3DX to load and display a skinned mesh.]]></description>
    <folder>Samples\C++\Direct3D\Meshes\SkinnedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>SkinnedMesh.exe</exe>
    <screenshot>SkinnedMesh.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/SkinnedMesh.htm</doc>
    <projectfile6>SkinnedMesh.dsw</projectfile6>
    <projectfile7>SkinnedMesh.sln</projectfile7>
    <language>C++</language>
    <complexity>2500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  8: Voice</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Voice tutorial is the 8th tutorial for DirectPlay.  It builds upon the last tutorial and adds voice support.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut08_Voice\</folder>
    <screenshot>Voice.gif</screenshot>
    <doc>::/directx/play/tut/tutorial8_voice.htm</doc>
    <projectfile6>Voice.dsw</projectfile6>
    <projectfile7>Voice.sln</projectfile7>
    <language>C++</language>
    <complexity>80</complexity>
    <keywords>
      <keyword>Voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>mfctex</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The MFC Tex sample illustrates the effect of combining multiple texture stages in various ways.  It also shows how to use Direct3D with Microsoft Foundation Classes (MFC), using a CFormView.  Various controls are used to control the texture appearance.]]></description>
    <folder>Samples\C++\Direct3D\mfctex\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>mfctex.exe</exe>
    <screenshot>mfctex.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/mfctex.htm</doc>
    <projectfile6>mfctex.dsw</projectfile6>
    <projectfile7>mfctex.sln</projectfile7>
    <language>C++</language>
    <complexity>230</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Pick</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Pick sample shows how to implement "picking" which is finding which triangle in a mesh is intersected by a ray.  In this case, the ray comes from mouse coordinates.]]></description>
    <folder>Samples\C++\Direct3D\Pick\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Pick.exe</exe>
    <screenshot>Pick.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/Pick.htm</doc>
    <projectfile6>Pick.dsw</projectfile6>
    <projectfile7>Pick.sln</projectfile7>
    <language>C++</language>
    <complexity>180</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PointSprites</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The PointSprites sample shows how to use the new Direct3D point sprites feature.  A point sprite is simply a forward-facing, textured quad that is referenced only by (x,y,z) position coordinates. Point sprites are most often used for particle systems and related effects.  Note that not all cards support all features for point sprites.  For more information on point sprites, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\PointSprites\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>PointSprites.exe</exe>
    <screenshot>PointSprites.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/PointSprites.htm</doc>
    <projectfile6>PointSprites.dsw</projectfile6>
    <projectfile7>PointSprites.sln</projectfile7>
    <language>C++</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>RTPatch</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The RT Patch sample shows how to use patches in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\RTPatch\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>RTPatch.exe</exe>
    <screenshot>RTPatch.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/RTPatch.htm</doc>
    <projectfile6>RTPatch.dsw</projectfile6>
    <projectfile7>RTPatch.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ShadowVolume</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ShadowVolume sample uses stencil buffers to implement real-time shadows.  In the sample, a complex object is rendered and used as a shadow-caster, to cast real-time shadows on itself and on the terrain below.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..  Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\StencilBuffer\ShadowVolume\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ShadowVolume.exe</exe>
    <screenshot>ShadowVolume.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/ShadowVolume.htm</doc>
    <projectfile6>ShadowVolume.dsw</projectfile6>
    <projectfile7>ShadowVolume.sln</projectfile7>
    <language>C++</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StencilMirror</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The StencilMirror sample uses stencil buffers to implement a mirror effect.  In the sample, a watery terrain scene is rendered with the water reflecting a helicopter that flies above.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..  Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\StencilBuffer\StencilMirror\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>StencilMirror.exe</exe>
    <screenshot>StencilMirror.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/StencilMirror.htm</doc>
    <projectfile6>StencilMirror.dsw</projectfile6>
    <projectfile7>StencilMirror.sln</projectfile7>
    <language>C++</language>
    <complexity>1290</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Text3D</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
    <folder>Samples\C++\Direct3D\Text3D\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Text3D.exe</exe>
    <screenshot>Text3D.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/Text3D.htm</doc>
    <projectfile6>Text3D.dsw</projectfile6>
    <projectfile7>Text3D.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VolumeFog</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Volume Fog sample shows the per-pixel density volumetric rendering technique. The fog volume is modeled as a polygonal mesh, and the density of the fog at every pixel is computed by subtracting the front side of the fog volume from the back side. The fog is mixed with the scene by accumulating an in/out test at every pixel -- that is, back-facing fog polygons will add, while front-facing ones will subtract.  If the value is non zero, then the scene intersects the fog and the scene's depth value is used.  In order to get better results, this demo uses 12 bits of precision by encoding high and low bits in different color channels.]]></description>
    <folder>Samples\C++\Direct3D\VolumeFog\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>VolumeFog.exe</exe>
    <screenshot>VolumeFog.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/VolumeFog.htm</doc>
    <projectfile6>VolumeFog.dsw</projectfile6>
    <projectfile7>VolumeFog.sln</projectfile7>
    <language>C++</language>
    <complexity>2520</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VolumeTexture</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The VolumeTexture sample illustrates how to use the new volume textures in Direct3D.  Normally, a texture is thought of as a 2D image, which have a width and a height and whose "texels" are addressed with two coordinate, tu and tv.  Volume textures are the 3D counterparts, with a width, height, and depth, and are addressed with three coordinates, tu, tv, and tw.  Volume textures can be used for interesting effects like patchy fog, explosions, etc.  Note that not all cards support all features for volume textures.  For more information on volume textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\VolumeTexture\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>VolumeTexture.exe</exe>
    <screenshot>VolumeTexture.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/VolumeTexture.htm</doc>
    <projectfile6>VolumeTexture.dsw</projectfile6>
    <projectfile7>VolumeTexture.sln</projectfile7>
    <language>C++</language>
    <complexity>160</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DrumPad</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The DrumPad Sample transforms every input device (joysticks, joypads, keyboard, mouse) on your computer to a simple audio drum machine (using Action Mapping and DirectX Audio).  You can load different sound files to be played for each "drum".]]></description>
    <folder>Samples\C++\DirectInput\DrumPad\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>DrumPad.exe</exe>
    <screenshot>DrumPad.gif</screenshot>
    <doc>::/directx/input/samps/drumpadsample.htm</doc>
    <projectfile6>DrumPad.dsw</projectfile6>
    <projectfile7>DrumPad.sln</projectfile7>
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>DrumPad</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>IDirectSound8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>FFConst</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FFConst sample applies raw forces to a force feedback input device, illustrating how a simulator-type application can use force feedback to generate forces computed by a physics engine. You must have a force feedback device connected to your system in order to run the application.]]></description>
    <folder>Samples\C++\DirectInput\FFConst\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>FFConst.exe</exe>
    <screenshot>FFConst.gif</screenshot>
    <doc>::/directx/input/samps/ffconstsample.htm</doc>
    <projectfile6>FFConst.dsw</projectfile6>
    <projectfile7>FFConst.sln</projectfile7>
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>FFConst</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>IDirectInputEffect</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Joystick</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Joystick sample obtains and displays joystick data.]]></description>
    <folder>Samples\C++\DirectInput\Joystick\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Joystick.exe</exe>
    <screenshot>Joystick.gif</screenshot>
    <doc>::/directx/input/samps/joysticksample.htm</doc>
    <projectfile6>Joystick.dsw</projectfile6>
    <projectfile7>Joystick.sln</projectfile7>
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>Joystick</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Keyboard</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Keyboard sample obtains and displays keyboard data.]]></description>
    <folder>Samples\C++\DirectInput\Keyboard\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Keyboard.exe</exe>
    <screenshot>Keyboard.gif</screenshot>
    <doc>::/directx/input/samps/keyboardsample.htm</doc>
    <projectfile6>Keyboard.dsw</projectfile6>
    <projectfile7>Keyboard.sln</projectfile7>
    <language>C++</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>Keyboard</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mouse</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Mouse sample obtains and displays mouse data.]]></description>
    <folder>Samples\C++\DirectInput\Mouse\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Mouse.exe</exe>
    <screenshot>Mouse.gif</screenshot>
    <doc>::/directx/input/samps/mousesample.htm</doc>
    <projectfile6>Mouse.dsw</projectfile6>
    <projectfile7>Mouse.sln</projectfile7>
    <language>C++</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>MusicTool</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Music Tool sample demonstrates how to implement a DirectMusic tool that intercepts messages.]]></description>
    <folder>Samples\C++\DirectMusic\MusicTool\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>MusicTool.exe</exe>
    <screenshot>MusicTool.gif</screenshot>
    <doc>::/directx/htm/MusicToolsample.htm</doc>
    <projectfile6>MusicTool.dsw</projectfile6>
    <projectfile7>MusicTool.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>DotProduct3</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DotProduct3 sample demonstrates an alternative approach to Direct3D bump mapping. This technique is named after the mathematical operation which combines a light vector with a surface normal. The normals for a surface are traditional (x,y,z) vectors stored in RGBA format in a texture map (called anormal map, for this technique).  Not all cards support DotProduct3 blending texture stages, but then not all cards support Direct3D bump mapping.  Refer to the DirectX SDK documentation for more information.]]></description>
    <folder>Samples\C++\Direct3D\BumpMapping\DotProduct3\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>DotProduct3.exe</exe>
    <screenshot>DotProduct3.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/DotProduct3.htm</doc>
    <projectfile6>DotProduct3.dsw</projectfile6>
    <projectfile7>DotProduct3.sln</projectfile7>
    <language>C++</language>
    <complexity>1250</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MazeServer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the DirectPlay8 client/server Maze sample. The client comes in two flavors.  A console based version, and a D3D client.  The D3D client can optionally be run as screen saver by simply copying mazeclient.exe to your \winnt\system32\ and renaming it to mazeclient.scr.  This will make it a screen saver that will be detected by the display control panel.]]></description>
    <folder>Samples\C++\DirectPlay\Maze\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>MazeServer.exe</exe>
    <screenshot>MazeServer.gif</screenshot>
    <doc>::/directx/play/samps/maze.htm</doc>
    <projectfile6>Maze.dsw</projectfile6>
    <projectfile7>Maze.sln</projectfile7>
    <language>C++</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>MazeServer</keyword>
      <keyword>Maze</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayAudio</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Play Audio sample shows how to load a segment and play it on an audiopath, how to use DirectMusic notifications, and how to change global performance parameters.]]></description>
    <folder>Samples\C++\DirectMusic\PlayAudio\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>PlayAudio.exe</exe>
    <screenshot>PlayAudio.gif</screenshot>
    <doc>::/directx/htm/PlayAudiosample.htm</doc>
    <projectfile6>PlayAudio.dsw</projectfile6>
    <projectfile7>PlayAudio.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>PlayMotif</name>
    <dxarea>DirectMusic</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Play Motif sample demonstrates how a motif played as a secondary segment can be aligned to the rhythm of the primary segment in various ways.]]></description>
    <folder>Samples\C++\DirectMusic\PlayMotif\</folder>
    <exefolder>Samples\C++\DirectMusic\Bin\</exefolder>
    <exe>PlayMotif.exe</exe>
    <screenshot>PlayMotif.gif</screenshot>
    <doc>::/directx/htm/PlayMotifsample.htm</doc>
    <projectfile6>PlayMotif.dsw</projectfile6>
    <projectfile7>PlayMotif.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>LobbyClient</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[LobbyClient is a simple lobby client.  It displays all registered DirectPlay applications on the local system.  It allows the user to launch one or more of these applications using a chosen service provider.  A launched lobbied application may be told to either join or host a game.]]></description>
    <folder>Samples\C++\DirectPlay\LobbyClient\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>LobbyClient.exe</exe>
    <screenshot>LobbyClient.gif</screenshot>
    <doc>::/directx/play/samps/lobbyclient.htm</doc>
    <projectfile6>LobbyClient.dsw</projectfile6>
    <projectfile7>LobbyClient.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>LobbyClient</keyword>
      <keyword>lobby</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>IDirectPlay8LobbyClient</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SimpleClient</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the client portion of the SimpleClientServer sample, a very basic client/server application.  It is similar in form to SimplePeer, but using the client/server interfaces.  ]]></description>
    <folder>Samples\C++\DirectPlay\SimpleClientServer\SimpleClient\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>SimpleClient.exe</exe>
    <screenshot>SimpleClient.gif</screenshot>
    <doc>::/directx/play/samps/simpleclientserver.htm</doc>
    <projectfile6>SimpleClient.dsw</projectfile6>
    <projectfile7>SimpleClient.sln</projectfile7>
    <language>C++</language>
    <complexity>220</complexity>
    <keywords>
      <keyword>SimpleClient</keyword>
      <keyword>SimpleClientServer</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SimpleServer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the SimpleClientServer sample, a very basic client/server application.  It is similar in form to SimplePeer, but using the client/server interfaces.  ]]></description>
    <folder>Samples\C++\DirectPlay\SimpleClientServer\SimpleServer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>SimpleServer.exe</exe>
    <screenshot>SimpleServer.gif</screenshot>
    <doc>::/directx/play/samps/simpleclientserver.htm</doc>
    <projectfile6>SimpleServer.dsw</projectfile6>
    <projectfile7>SimpleServer.sln</projectfile7>
    <language>C++</language>
    <complexity>230</complexity>
    <keywords>
      <keyword>SimpleServer</keyword>
      <keyword>SimpleClientServer</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SimplePeer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[SimplePeer illustrates how to network other players using DirectPlay.  After joining or creating a session, a simple game begins immediately.  Other players may join the game in progress at any time.]]></description>
    <folder>Samples\C++\DirectPlay\SimplePeer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>SimplePeer.exe</exe>
    <screenshot>SimplePeer.gif</screenshot>
    <doc>::/directx/play/samps/simplepeer.htm</doc>
    <projectfile6>SimplePeer.dsw</projectfile6>
    <projectfile7>SimplePeer.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>SimplePeer</keyword>
      <keyword>peer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StagedPeer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[StagedPeer connects players together with two dialog boxes to prompt users on the connection settings to join or create a session.  After the user connects to a sesssion, the sample displays a multiplayer stage. The stage allows all players connected to the same session to chat, and start a new game at the same time when everyone is ready and the host player decides to begin.  The host player may also reject players or close player slots.  This allows the host player to control who is allowed to join the game.  ]]></description>
    <folder>Samples\C++\DirectPlay\StagedPeer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>StagedPeer.exe</exe>
    <screenshot>StagedPeer.gif</screenshot>
    <doc>::/directx/play/samps/stagedpeer.htm</doc>
    <projectfile6>StagedPeer.dsw</projectfile6>
    <projectfile7>StagedPeer.sln</projectfile7>
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>StagedPeer</keyword>
      <keyword>peer</keyword>
      <keyword>staging</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowless9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to render video.  It offers features similar to the PlayWnd player sample in the main DirectShow samples directory.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Windowless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Windowless9.exe</exe>
    <screenshot>Windowless9.jpg</screenshot>
    <doc>::/directx/htm/Windowlesssample.htm</doc>
    <projectfile6>Windowless9.dsw</projectfile6>
    <projectfile7>Windowless9.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>Windowless</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceClient</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is the client portion of the VoiceClientServer sample. This sample is similar in form to SimpleClientServer, but shows how to add DirectPlay Voice support.]]></description>
    <folder>Samples\C++\DirectPlay\VoiceClientServer\VoiceClient\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>VoiceClient.exe</exe>
    <screenshot>VoiceClient.gif</screenshot>
    <doc>::/directx/play/samps/voiceclientserver.htm</doc>
    <projectfile6>VoiceClient.dsw</projectfile6>
    <projectfile7>VoiceClient.sln</projectfile7>
    <language>C++</language>
    <complexity>80</complexity>
    <keywords>
      <keyword>VoiceClient</keyword>
      <keyword>VoiceClientServer</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceServer</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the VoiceClientServer sample. This sample is similar in form to SimpleClientServer, but shows how to add DirectPlay Voice support.]]></description>
    <folder>Samples\C++\DirectPlay\VoiceClientServer\VoiceServer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>VoiceServer.exe</exe>
    <screenshot>VoiceServer.gif</screenshot>
    <doc>::/directx/play/samps/voiceclientserver.htm</doc>
    <projectfile6>VoiceServer.dsw</projectfile6>
    <projectfile7>VoiceServer.sln</projectfile7>
    <language>C++</language>
    <complexity>85</complexity>
    <keywords>
      <keyword>VoiceServer</keyword>
      <keyword>VoiceClientServer</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceConnect</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[VoiceConnect shows how to network other players using DirectPlay to start a DirectPlay Voice chat session.  After joining or creating a session, the players may use computer microphone to talk to one other. Other players may join the game in progress at any time.]]></description>
    <folder>Samples\C++\DirectPlay\VoiceConnect\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>VoiceConnect.exe</exe>
    <screenshot>VoiceConnect.gif</screenshot>
    <doc>::/directx/play/samps/voiceconnect.htm</doc>
    <projectfile6>VoiceConnect.dsw</projectfile6>
    <projectfile7>VoiceConnect.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>VoiceConnect</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceGroup</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[VoiceGroup is similar in form to VoiceConnect.  VoiceGroup shows how to use DirectPlay along with DirectPlayVoice to allow talking in to a specific group of players.]]></description>
    <folder>Samples\C++\DirectPlay\VoiceGroup\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>VoiceGroup.exe</exe>
    <screenshot>VoiceGroup.gif</screenshot>
    <doc>::/directx/play/samps/voicegroup.htm</doc>
    <projectfile6>VoiceGroup.dsw</projectfile6>
    <projectfile7>VoiceGroup.sln</projectfile7>
    <language>C++</language>
    <complexity>1230</complexity>
    <keywords>
      <keyword>VoiceGroup</keyword>
      <keyword>voice</keyword>
      <keyword>group</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  9: Server</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the server portion of the ClientServer tutorial, the 9th tutorial for DirectPlay.  It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Server.gif</screenshot>
    <doc>::/directx/play/tut/tutorial9_clientserver.htm</doc>
    <projectfile6>ClientServer.dsw</projectfile6>
    <projectfile7>ClientServer.sln</projectfile7>
    <language>C++</language>
    <complexity>95</complexity>
    <keywords>
      <keyword>Server</keyword>
      <keyword>ClientServer</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Texture3D</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Draws video on a Microsoft DirectX 8.0 texture surface.  This sample builds on the Direct3D Tutorial05 sample, adding support for rendering video onto a Direct3D surface.]]></description>
    <folder>Samples\C++\DirectShow\Players\Texture3D\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Texture3D.exe</exe>
    <screenshot>Texture3D.jpg</screenshot>
    <doc>::/directx/htm/Texture3Dsample.htm</doc>
    <projectfile6>Textures.dsw</projectfile6>
    <projectfile7>Textures.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Texture3D</keyword>
      <keyword>texture</keyword>
      <keyword>Player</keyword>
      <keyword>renderer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate DirectSound Devices</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Enumerate DirectSound Devices sample shows how to enumerate and create playback and capture devices.]]></description>
    <folder>Samples\C++\DirectSound\EnumDevices\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>EnumDevices.exe</exe>
    <screenshot>EnumDevices.gif</screenshot>
    <doc>::/directx/htm/enumeratedirectsounddevicessample.htm</doc>
    <projectfile6>EnumDevices.dsw</projectfile6>
    <projectfile7>EnumDevices.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>FullDuplexFilter</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Full Duplex Filter sample application shows how to capture and play back sounds at the same time.]]></description>
    <folder>Samples\C++\DirectSound\FullDuplexFilter\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>FullDuplexFilter.exe</exe>
    <screenshot>FullDuplexFilter.gif</screenshot>
    <doc>::/directx/htm/FullDuplexFiltersample.htm</doc>
    <projectfile6>FullDuplexFilter.dsw</projectfile6>
    <projectfile7>FullDuplexFilter.sln</projectfile7>
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>PlaySound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The PlaySound sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\C++\DirectSound\PlaySound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>PlaySound.exe</exe>
    <screenshot>playsound.gif</screenshot>
    <doc>::/directx/htm/playsoundsample.htm</doc>
    <projectfile6>PlaySound.dsw</projectfile6>
    <projectfile7>PlaySound.sln</projectfile7>
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>SoundFX</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The SoundFX sample shows how to use DMOs with DirectSound and how to manipulate effect parameters.  It is similar to the DirectMusic AudioFX Sample but does not use an audiopath or any of the DirectMusic interfaces.]]></description>
    <folder>Samples\C++\DirectSound\SoundFX\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>SoundFX.exe</exe>
    <screenshot>SoundFX.gif</screenshot>
    <doc>::/directx/htm/SoundFXsample.htm</doc>
    <projectfile6>SoundFX.dsw</projectfile6>
    <projectfile7>SoundFX.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StreamData</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Stream Data sample shows how to stream a WAV file to a DirectSound secondary buffer.  It is similar to the Play Sound Sample, but adds support for streaming.]]></description>
    <folder>Samples\C++\DirectSound\StreamData\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>StreamData.exe</exe>
    <screenshot>StreamData.gif</screenshot>
    <doc>::/directx/htm/StreamDatasample.htm</doc>
    <projectfile6>StreamData.dsw</projectfile6>
    <projectfile7>StreamData.sln</projectfile7>
    <language>C++</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>MultiAnimation</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates mesh animation with multiple animation sets using HLSL skinning and D3DX's animation controller. It shows how an application can render 3D animation by utilizing D3DX's animation support. D3DX has APIs that handles the loading of the animatable mesh, as well as the blending of multiple animations. The animation controller supports animation tracks for this purpose, and allows transitioning from one animation to another smoothly.]]></description>
    <folder>Samples\C++\Direct3D\MultiAnimation\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>MultiAnimation.exe</exe>
    <screenshot>MultiAnimation.jpg</screenshot>
    <readme>readme.htm</readme>
    <projectfile6>MultiAnimation.dsw</projectfile6>
    <projectfile7>MultiAnimation.sln</projectfile7>
    <language>C++</language>
    <complexity>2700</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>ID3DXAnimationController</keyword>
      <keyword>ID3DXAllocateHierarchy</keyword>
      <keyword>ID3DXAnimationCallbackHandler</keyword>
      <keyword>ID3DXAnimationSet</keyword>
      <keyword>ID3DXCompressedAnimationSet</keyword>
      <keyword>ID3DXSkinInfo</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceManagement</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Voice Management sample shows how to implement dynamic voice management when creating DirectSound secondary buffers.]]></description>
    <folder>Samples\C++\DirectSound\VoiceManagement\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>VoiceManagement.exe</exe>
    <screenshot>VoiceManagement.gif</screenshot>
    <doc>::/directx/htm/VoiceManagementsample.htm</doc>
    <projectfile6>VoiceManagement.dsw</projectfile6>
    <projectfile7>VoiceManagement.sln</projectfile7>
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Install</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[DXInstall is an example of how to use DirectXSetup interfaces to install the DirectX subsystem and DirectX drivers.  It shows how to use a callback function to present messages and get user input through a custom interface, in this case a simple modeless dialog box.]]></description>
    <folder>Samples\C++\Misc\DXInstall\</folder>
    <doc>::/directx/setup/samples/dinstall.htm</doc>
    <projectfile6>DXInstall.dsw</projectfile6>
    <projectfile7>DXInstall.sln</projectfile7>
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>DXInstall</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Full Screen Dialog</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[FullScreenDialog demonstrates how to display a GDI dialog while using DirectDraw in full-screen exclusive mode.]]></description>
    <folder>Samples\VB.Net\DirectDraw\FullScreenDialog\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbFullScreenDialog.exe</exe>
    <screenshot>FullScreenDialog.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>FullScreenDialog.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>dialog</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowed</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[WindowedMode demonstrates the tasks required to initialize and run a windowed DirectDraw application.]]></description>
    <folder>Samples\C#\DirectDraw\Windowed\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csWindowed.exe</exe>
    <screenshot>Windowed.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Windowed.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>window</keyword>
      <keyword>windowed</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMOSample</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[DMO Sample is a sample Microsoft DirectX Media Object (DMO).  It takes MPEG-1 video packets as input and produces two output streams.  The first output stream contains video frames in RGB 565 format.  Each frame displays the time code taken from the MPEG-1 video, and is otherwise blank.  The second output stream is an optional text stream with the time code.  DMO Sample uses the IMediaObjectImpl base-class template to implement the IMediaObject interface.  For information about using this template, see "Using the DMO Base Class" in the DirectX SDK documentation.  The Active Template Library (ATL) handles various COM details, including registration, aggregation, IUnknown, and the DLL entry points.]]></description>
    <folder>Samples\C++\DirectShow\DMO\DMOSample\</folder>
    <doc>::/directx/htm/DMOSamplesample.htm</doc>
    <projectfile6>DMOSample.dsw</projectfile6>
    <projectfile7>DMOSample.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DMOSample</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRXclBasic</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application is a simple, step by step sample that demonstrates how to play a video in exclusive mode using the VMR and DirectShow.  The application will prompt for a file name to play and then play it until the video is done or until the user exits the application by pressing Esc or Alt+F4.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRXclBasic\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRXclBasic.exe</exe>
    <screenshot>VMRXclBasic.jpg</screenshot>
    <doc>::/directx/htm/VMRXclBasicsample.htm</doc>
    <projectfile6>VMRXclBasic.dsw</projectfile6>
    <projectfile7>VMRXclBasic.sln</projectfile7>
    <language>C++</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>VMRXclBasic</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DxDiagOutput</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\C++\Misc\DxDiagOutput\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>DxDiagOutput.exe</exe>
    <screenshot>DxDiagOutput.jpg</screenshot>
    <doc>::/directx/intro/tools/dxdiagref/dxdiag_reference.htm</doc>
    <projectfile6>DxDiagOutput.dsw</projectfile6>
    <projectfile7>DxDiagOutput.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
    <dxsubarea />
  </sample>
  <sample>
    <name>getdxver</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The purpose of this sample is to show the return results from a call to the function GetDXVersion().  When you run GETDXVER.EXE, it will display a MessageBox with the installed DirectX version. You can determine which version of DirectX is installed on a system by thoroughly querying for various DirectX object interfaces. The GetDXVersion sample function shows one way this might be done.  However, real-world applications should not rely on this function, and should always query the DirectX objects for all necessary functionality during startup.]]></description>
    <folder>Samples\C++\Misc\getdxver\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>getdxver.exe</exe>
    <screenshot>getdxver.jpg</screenshot>
    <doc>::/directx/intro/program/version/versioncheck.htm</doc>
    <projectfile6>getdxver.dsw</projectfile6>
    <projectfile7>getdxver.sln</projectfile7>
    <language>C++</language>
    <complexity>190</complexity>
    <keywords>
      <keyword>getdxver</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate DirectSound Devices</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Enumerate DirectSound Devices sample shows how to enumerate and create playback and capture devices.]]></description>
    <folder>Samples\VB.Net\DirectSound\EnumDevice\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbEnumDevices.exe</exe>
    <screenshot>EnumDevices.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnumDevice.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate DirectSound Devices</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Enumerate DirectSound Devices sample shows how to enumerate and create playback and capture devices.]]></description>
    <folder>Samples\C#\DirectSound\EnumDevices\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csEnumDevices.exe</exe>
    <screenshot>EnumDevices.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnumDevices.sln</projectfile7>
    <language>C#</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Feedback</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Feedback sample shows Force Feedback via devices that support it.  You can observe how the forces feel when you move and twist the stick, rotate the throttle wheel, and press buttons in various combinations.  You will need a force feedback input device for this sample.]]></description>
    <folder>Samples\C#\DirectInput\Feedback\</folder>
    <screenshot>csFeedback.jpg</screenshot>
    <doc>readme.txt</doc>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csFeedback.exe</exe>
    <projectfile7>Feedback.sln</projectfile7>
    <language>C#</language>
    <complexity>1048</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Feedback</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Feedback sample shows Force Feedback via devices that support it.  You can observe how the forces feel when you move and twist the stick, rotate the throttle wheel, and press buttons in various combinations.  You will need a force feedback input device for this sample.]]></description>
    <folder>Samples\VB.Net\DirectInput\Feedback\</folder>
    <screenshot>vbFeedback.jpg</screenshot>
    <doc>readme.txt</doc>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbFeedback.exe</exe>
    <projectfile7>Feedback.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1048</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mapper</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the IFilterMapper2::EnumMatchingFilters method to locate filters in the registry. The application's user interface contains controls that match the parameters of the EnumMatchingFilters method, such as minimum merit value, pin categories, and media types.]]></description>
    <folder>Samples\C++\DirectShow\Misc\Mapper\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Mapper.exe</exe>
    <screenshot>Mapper.jpg</screenshot>
    <doc>::/directx/htm/Mappersample.htm</doc>
    <projectfile6>Mapper.dsw</projectfile6>
    <projectfile7>Mapper.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>Mapper</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Joystick</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Joystick sample obtains and displays joystick data.]]></description>
    <folder>Samples\C#\DirectInput\Joystick\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csJoystick.exe</exe>
    <screenshot>Joystick.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Joystick.sln</projectfile7>
    <language>C#</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>Joystick</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mouse</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Mouse sample obtains and displays mouse data.]]></description>
    <folder>Samples\C#\DirectInput\Mouse\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csMouse.exe</exe>
    <screenshot>Mouse.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Mouse.sln</projectfile7>
    <language>C#</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mouse</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Mouse sample obtains and displays mouse data.]]></description>
    <folder>Samples\VB.Net\DirectInput\Mouse\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbMouse.exe</exe>
    <screenshot>Mouse.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Mouse.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Joystick</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Joystick sample obtains and displays joystick data.]]></description>
    <folder>Samples\VB.Net\DirectInput\Joystick\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbJoystick.exe</exe>
    <screenshot>Joystick.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Joystick.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>Joystick</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>GargleDMO</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is a Microsoft DirectX Media Object (DMO) that creates a gargle effect, similar to the Gargle Filter sample for Microsoft DirectShow. This sample demonstrates how to implement the the following interfaces: IMediaObject, IMediaObjectInPlace, IMediaParamInfo, IMediaParams]]></description>
    <folder>Samples\C++\DirectShow\DMO\GargleDMO\</folder>
    <doc>::/directx/htm/GargleDMOsample.htm</doc>
    <projectfile6>GargleDMO.dsw</projectfile6>
    <projectfile7>GargleDMO.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>GargleDMO</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Jukebox</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Video jukebox application scans a directory for media files and displays a list of the relevant file names.  The user can play an individual file or play all of the media files in order.  The jukebox also displays information about the filter graphs that it creates, including the names of the filters, the names of their corresponding pins, and the event codes that are generated.]]></description>
    <folder>Samples\C++\DirectShow\Players\Jukebox\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Jukebox.exe</exe>
    <screenshot>Jukebox.jpg</screenshot>
    <doc>::/directx/htm/Jukeboxsample.htm</doc>
    <projectfile6>Jukebox.dsw</projectfile6>
    <projectfile7>Jukebox.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Jukebox</keyword>
      <keyword>Player</keyword>
      <keyword>ASF</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Sprite Animate</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[SpriteAnimate demonstrates a simple technique to animate DirectDraw surfaces.]]></description>
    <folder>Samples\C#\DirectDraw\SpriteAnimate\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csSpriteAnimate.exe</exe>
    <screenshot>SpriteAnimate.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SpriteAnimate.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>animate</keyword>
      <keyword>sprite</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Full Screen Dialog</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[FullScreenDialog demonstrates how to display a GDI dialog while using DirectDraw in full-screen exclusive mode.]]></description>
    <folder>Samples\C#\DirectDraw\FullScreenDialog\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csFullScreenDialog.exe</exe>
    <screenshot>FullScreenDialog.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>FullScreenDialog.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>dialog</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Keyboard</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Keyboard sample obtains and displays keyboard data.]]></description>
    <folder>Samples\C#\DirectInput\Keyboard\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csKeyboard.exe</exe>
    <screenshot>Keyboard.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Keyboard.sln</projectfile7>
    <language>C#</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>Keyboard</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Keyboard</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Keyboard sample obtains and displays keyboard data.]]></description>
    <folder>Samples\VB.Net\DirectInput\Keyboard\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbKeyboard.exe</exe>
    <screenshot>Keyboard.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Keyboard.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>Keyboard</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayWndASF</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive audio/video media file player with DRM support.  It uses DirectShow to play Windows Media files (ASF, WMA, WMV) without DRM protection and those which use DRM at a level of 100 or below.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayWndASF\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayWndASF.exe</exe>
    <screenshot>PlayWndASF.jpg</screenshot>
    <doc>::/directx/htm/PlayWndASFsample.htm</doc>
    <projectfile6>PlayWndASF.dsw</projectfile6>
    <projectfile7>PlayWndASF.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>PlayWndASF</keyword>
      <keyword>Player</keyword>
      <keyword>ASF</keyword>
      <keyword>DRM</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 4:  Lights</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Lights tutorial shows how to use dynamic lighting in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut04_Lights\</folder>
    <screenshot>Tut04_Lights.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/4/tutorial4.htm</doc>
    <projectfile6>Lights.dsw</projectfile6>
    <projectfile7>Lights.sln</projectfile7>
    <language>C++</language>
    <complexity>14</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 4: Creating and Using Lights</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The sample code in this tutorial introduces the topics of lights and materials.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial4\</folder>
    <screenshot>Tut04_Lights.jpg</screenshot>
    <projectfile7>Tutorial4.sln</projectfile7>
    <language>C#</language>
    <complexity>20</complexity>
  </sample>
  <sample>
    <name>Tutorial 4: Creating and Using Lights</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The sample code in this tutorial introduces the topics of lights and materials.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial4\</folder>
    <screenshot>Tut04_Lights.jpg</screenshot>
    <projectfile7>Tutorial4.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>20</complexity>
  </sample>
  <sample>
    <name>Tutorial 3:  Matrices</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Matrices tutorial shows how to use 4x4 matrices to transform vertices in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut03_Matrices\</folder>
    <screenshot>Tut03_Matrices.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/3/tutorial3.htm</doc>
    <projectfile6>Matrices.dsw</projectfile6>
    <projectfile7>Matrices.sln</projectfile7>
    <language>C++</language>
    <complexity>13</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 3: Using Matrices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial introduces the concept of matrices and shows how to use them. The Vertices sample project rendered 2-D vertices to draw a triangle. However, in this tutorial you will be working with transformations of vertices in 3-D.  Matrices are also used to set up cameras and viewports.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial3\</folder>
    <screenshot>Tut03_Matrices.jpg</screenshot>
    <projectfile7>Tutorial3.sln</projectfile7>
    <language>C#</language>
    <complexity>15</complexity>
  </sample>
  <sample>
    <name>Tutorial 3: Using Matrices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial introduces the concept of matrices and shows how to use them. The Vertices sample project rendered 2-D vertices to draw a triangle.  However, in this tutorial you will be working with transformations of vertices in 3-D.  Matrices are also used to set up cameras and viewports.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial3\</folder>
    <screenshot>Tut03_Matrices.jpg</screenshot>
    <projectfile7>Tutorial3.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>15</complexity>
  </sample>
  <sample>
    <name>StillView</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application scans a directory for image files (BMP, GIF, JPG, TGA) and displays a list of the relevant file names.  Click a file name in the listbox to display its image on the Image Viewer screen, along with image information such as its video dimensions and file size.]]></description>
    <folder>Samples\C++\DirectShow\Players\StillView\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>StillView.exe</exe>
    <screenshot>StillView.jpg</screenshot>
    <doc>::/directx/htm/StillViewsample.htm</doc>
    <projectfile6>StillView.dsw</projectfile6>
    <projectfile7>StillView.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>StillView</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 6:  Meshes</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Mesh tutorial shows how to load and render file-based geometry meshes in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut06_Meshes\</folder>
    <screenshot>Tut06_Meshes.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/6/tutorial6.htm</doc>
    <projectfile6>Meshes.dsw</projectfile6>
    <projectfile7>Meshes.sln</projectfile7>
    <language>C++</language>
    <complexity>16</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 6: Using Meshes</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows how to load, render, and unload a mesh.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial6\</folder>
    <projectfile7>Tutorial6.sln</projectfile7>
    <language>C#</language>
    <complexity>30</complexity>
    <screenshot>Tut06_Meshes.jpg</screenshot>
  </sample>
  <sample>
    <name>Tutorial 6: Using Meshes</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows how to load, render, and unload a mesh.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial6\</folder>
    <screenshot>Tut06_Meshes.jpg</screenshot>
    <projectfile7>Tutorial6.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>30</complexity>
  </sample>
  <sample new="true">
    <name>CompiledEffect</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how an ID3DXEffect object can be compiled when the project is built and loaded directly as a binary file at runtime.]]></description>
    <folder>Samples\C++\Direct3D\CompiledEffect\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>CompiledEffect.exe</exe>
    <screenshot>CompiledEffect.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/compiledeffect.htm</doc>
    <projectfile6>CompiledEffect.dsw</projectfile6>
    <projectfile7>CompiledEffect.sln</projectfile7>
    <language>C++</language>
    <complexity>700</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>ID3DXEffect</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MonitorInfo</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is a simple demonstration of information that can be retrieved from the Video Mixing Renderer's IVMRMonitorConfig interface.  The sample enumerates the available monitors in the system and their associated dimensions, flags, handle, name, and optional description.  A text string is created which contains the queried information, which is then displayed in a message box.]]></description>
    <folder>Samples\C++\DirectShow\VMR\MonitorInfo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>MonitorInfo.exe</exe>
    <screenshot>MonitorInfo.jpg</screenshot>
    <doc>::/directx/htm/MonitorInfosample.htm</doc>
    <projectfile6>MonitorInfo.dsw</projectfile6>
    <projectfile7>MonitorInfo.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>MonitorInfo</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayCap is a simple video capture device previewer.  Unlike AMCap, it does not allow you to capture data to a file.  Instead, it searches for the first available video capture device registered in the system, connects to it, and begins displaying its video data in a small window.  It demonstrates a simple example of using the ICaptureGraphBuilder2 and ICreateDevEnum interfaces to build a capture graph.  This type of simple previewing might be used in a videoconferencing application, for example.]]></description>
    <folder>Samples\C++\DirectShow\Capture\PlayCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayCap.exe</exe>
    <screenshot>PlayCap.jpg</screenshot>
    <doc>::/directx/htm/PlayCapsample.htm</doc>
    <projectfile6>PlayCap.dsw</projectfile6>
    <projectfile7>PlayCap.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayCapMoniker</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayCapMoniker is a simple video capture device previewer.  Unlike AMCap, it does not allow you to capture data to a file.  Instead, it searches for the first available video capture device registered in the system, connects to it, and begins displaying its video data in a small window.  while the PlayCap sample builds the capture graph manually using the ICaptureGraphBuilder2 interface, this sample simply finds the moniker of the first available capture device, finds its display name, and uses RenderFile() to automatically build the graph.]]></description>
    <folder>Samples\C++\DirectShow\Capture\PlayCapMoniker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayCapMoniker.exe</exe>
    <screenshot>PlayCapMoniker.jpg</screenshot>
    <doc>::/directx/htm/PlayCapMonikersample.htm</doc>
    <projectfile6>PlayCapMoniker.dsw</projectfile6>
    <projectfile7>PlayCapMoniker.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayCapMoniker</keyword>
      <keyword>Capture</keyword>
      <keyword>moniker</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate Devices</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to enumerate the current DirectDraw devices.]]></description>
    <folder>Samples\C#\DirectDraw\EnumDevices\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csEnumDrawDevices.exe</exe>
    <screenshot>EnumDevices.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnumDevices.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>enumerate</keyword>
      <keyword>devices</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayWnd</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive audio/video media file player.  It uses DirectShow to play any supported audio or video media file (MPG, AVI, QT, WAV, AU, SND, MID, etc.).  The video will appear in a window on the screen, and you can use a mouse to move the window.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayWnd\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayWnd.exe</exe>
    <screenshot>PlayWnd.jpg</screenshot>
    <doc>::/directx/htm/PlayWndsample.htm</doc>
    <projectfile6>PlayWnd.dsw</projectfile6>
    <projectfile7>PlayWnd.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayWnd</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectPlay8 Network Simulator</name>
    <dxarea>DirectPlay</dxarea>
    <type>utility</type>
    <description><![CDATA[The DirectPlay8 Simulator tool is a simulated DirectPlay 8.1 service provider that allows you to test your DirectPlay application in a variety of network conditions, such as high latency and packet loss. DirectPlay8 Simulator is not a replacement for testing in the real deployment environment, but it can help you predict how your application will perform.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>dp8simui.exe</exe>
    <screenshot>DP8Simui.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/play/using/testingnetworkperformance.htm</doc>
    <language>
    </language>
    <keywords>
      <keyword>network</keyword>
      <keyword>simulator</keyword>
      <keyword>latency</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Caps Viewer</name>
    <dxarea>Miscellaneous</dxarea>
    <type>utility</type>
    <description><![CDATA[The DirectX Caps Viewer shows information for Direct3D devices and capabilities, DirectPlay connections, DirectInput devices and capabilities, DirectMusic ports and DirectSound capture devices and capabilities.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>DXCapsViewer.exe</exe>
    <screenshot>DXCapsViewer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/intro/tools/capsviewer.htm</doc>
    <language>
    </language>
    <keywords>
      <keyword>caps</keyword>
      <keyword>viewer</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>D3DSpy</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[The Direct3D Spy utility (D3DSPY) is a tool that monitors function calls to the Direct3D API, and shows a representation of Direct3D's internal state.  This is valuable when writing a Direct3D program, or trying to understand why it is behaving as it is.  It can also be used to improve the performance of a Direct3D program by indentifying redundant or inefficient use of the API.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>D3DSpy.exe</exe>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/d3dspy.htm</doc>
    <screenshot>D3DSpy.jpg</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>D3DSpy</keyword>
      <keyword>d3dspy</keyword>
      <keyword>spy</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowless</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to render video.  It offers features similar to the PlayWnd player sample in the main DirectShow samples directory. You may capture the image currently being displayed in the video window by clicking the right mouse button or by selecting "Capture current frame" on the Image menu.  The image is provided by the Video Mixing Renderer, using the reliable GetCurrentImage() method on the IVMRWindowlessControl interface. This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Windowless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Windowless.exe</exe>
    <screenshot>Windowless.jpg</screenshot>
    <doc>::/directx/htm/Windowlesssample.htm</doc>
    <projectfile6>Windowless.dsw</projectfile6>
    <projectfile7>Windowless.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>Windowless</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SampGrabCB</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ command line application demonstates the use of the IMediaDet interface to create a graph that contains a sample grabber filter.  It shows how to use the sample grabber and a COM object callback to display information about media samples in a running video file.]]></description>
    <folder>Samples\C++\DirectShow\Editing\SampGrabCB\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>SampGrabCB.jpg</screenshot>
    <doc>::/directx/htm/SampGrabCBsample.htm</doc>
    <projectfile6>SampGrabCB.dsw</projectfile6>
    <projectfile7>SampGrabCB.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>sampgrab</keyword>
      <keyword>grab</keyword>
      <keyword>Editing</keyword>
      <keyword>SampleGrabber</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StillCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ app uses the ISampleGrabber interface to capture still images to a .bmp file on disk from a live capture stream.  It demonstrates how to put the sample grabber into the graph, and how to get the bits back from it in real time via the callback.]]></description>
    <folder>Samples\C++\DirectShow\Editing\StillCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>StillCap.exe</exe>
    <screenshot>StillCap.jpg</screenshot>
    <doc>::/directx/htm/StillCapsample.htm</doc>
    <projectfile6>StillCap.dsw</projectfile6>
    <projectfile7>StillCap.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>StillCap</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample>
    <name>TimelineTest</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application builds a timeline with a transition.  It demonstrates the following tasks in Microsoft DirectShow Editing Services: 1. Creating a timeline. 2. Adding tracks, sources, transitions, and effects to the timeline. 3. Creating a SMPTE wipe transition. 4. Creating an audio crossfade using the Volume Envelope effect. 5. Setting properties on timeline objects. 6. Modifying a timeline and rendering the filter graph again.]]></description>
    <folder>Samples\C++\DirectShow\Editing\TimelineTest\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TimelineTest.exe</exe>
    <screenshot>TimelineTest.jpg</screenshot>
    <doc>::/directx/htm/TimelineTestsample.htm</doc>
    <projectfile6>TimelineTest.dsw</projectfile6>
    <projectfile7>TimelineTest.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>TimelineTest</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SysEnum</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Demonstrates the use of the system device enumerator for enumerating devices and DirectShow filters installed on your system.  By default, the application lists several system device classes by CLSID.  If you select "Show All Filter Categories", it will emulate the behavior of GraphEdit to enumerate all system device classes in the system.  When you select a device class, SysEnum will enumerate all installed filters that relate to the selected class.  When you select a filter, its filename and disk location will be displayed.]]></description>
    <folder>Samples\C++\DirectShow\Misc\SysEnum\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>SysEnum.exe</exe>
    <screenshot>SysEnum.jpg</screenshot>
    <doc>::/directx/htm/SysEnumsample.htm</doc>
    <projectfile6>SysEnum.dsw</projectfile6>
    <projectfile7>SysEnum.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>SysEnum</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HLSL Workshop</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[This series of guided lessons is derived from the HLSL Workshop presented at the Game Developers Conference 2003. The lessons are divided into four .fx files containing near-complete HLSL code, each of which requires the student to add the missing code needed to implement the target graphics techinque for that lesson. This workshop format is intended to give you an opportunity to experiment with the power and flexibility of HLSL with only a minimal knowledge of HLSL syntax. ]]></description>
    <folder>Samples\C++\Direct3D\tutorials\HLSLWorkshop\</folder>
    <screenshot>HLSLWorkshop.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/hlslworkshop/hlslworkshop.htm</doc>
    <language>C++</language>
    <complexity>700</complexity>
    <keywords>
      <keyword>HLSL</keyword>
      <keyword>High-Level Shader Language</keyword>
    </keywords>
  </sample>
  <sample>
    <name>XTLTest</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Command-line tool for rendering and previewing video editing projects. This tool renders Microsoft DirectShow Editing Services (DES) project files. To enable ASF support in this application, link the project to a Microsoft Windows Media Format (WMF) SDK certificate and define USE_WMF_CERT when you compile the application.  See the WMF SDK documentation for instructions on obtaining a certificate.]]></description>
    <folder>Samples\C++\DirectShow\Editing\XTLTest\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>XTLTest.exe</exe>
    <screenshot>XTLTest.jpg</screenshot>
    <doc>::/directx/htm/XTLTestsample.htm</doc>
    <projectfile6>XTLTest.dsw</projectfile6>
    <projectfile7>XTLTest.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>XTLTest</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample>
    <name>RenderLog</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates an application's ability to create a text log of DirectShow's progress while rendering a media file. If you receive an error when calling RenderFile(), you can use the RenderLog tool to create and view the render log.]]></description>
    <folder>Samples\C++\DirectShow\Misc\RenderLog\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>RenderLog.exe</exe>
    <screenshot>RenderLog.jpg</screenshot>
    <doc>::/directx/htm/RenderLogsample.htm</doc>
    <projectfile6>RenderLog.dsw</projectfile6>
    <projectfile7>RenderLog.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>RenderLog</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 2:  Vertices</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Vertices tutorial demonstrates the necessary API to render vertices using Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut02_Vertices\</folder>
    <screenshot>Tut02_Vertices.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/2/tutorial2.htm</doc>
    <projectfile6>Vertices.dsw</projectfile6>
    <projectfile7>Vertices.sln</projectfile7>
    <language>C++</language>
    <complexity>12</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Animate Palette</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[AnimatePalette demonstrates DirectDraw palette animation when in full-screen on a palettized surface.]]></description>
    <folder>Samples\C#\DirectDraw\AnimatePalette\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csAnimatePalette.exe</exe>
    <screenshot>AnimatePalette.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>AnimatePalette.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>animate</keyword>
      <keyword>palette</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mesh Viewer</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[The Mesh Viewer utility allows you to view and modify Direct3D mesh files.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>mview.exe</exe>
    <screenshot>MeshViewer.jpg</screenshot>
    <doc>::/directx/graphics/tools/meshviewer.htm</doc>
    <language>C++</language>
    <keywords>
      <keyword>mesh</keyword>
      <keyword>viewer</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 1:  Play File</name>
    <dxarea>DirectMusic</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial is a step-by-step guide to the most basic tasks in DirectX Audio: initializing a DirectMusic performance and playing an audio file.]]></description>
    <folder>Samples\C++\DirectMusic\Tutorials\Tutorial1\</folder>
    <screenshot>Tutorial1.gif</screenshot>
    <doc>::/directx/htm/tutorial1playingaudiofiles.htm</doc>
    <projectfile6>Tutorial1.dsw</projectfile6>
    <projectfile7>Tutorial1.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 2: Change 3D Parameters</name>
    <dxarea>DirectMusic</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial is a guide to setting up a DirectMusic performance and retrieving an object.  In this case, a 3-D buffer from an audiopath so that sound parameters can be changed.]]></description>
    <folder>Samples\C++\DirectMusic\Tutorials\Tutorial2\</folder>
    <screenshot>Tutorial2.gif</screenshot>
    <doc>::/directx/htm/tutorial2usingaudiopathobjects.htm</doc>
    <projectfile6>Tutorial2.dsw</projectfile6>
    <projectfile7>Tutorial2.sln</projectfile7>
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirectMusicLoader8</keyword>
      <keyword>IDirectMusicPerformance8</keyword>
      <keyword>IDirectMusicSegment8</keyword>
      <keyword>DMUS_NOTIFICATION_PMSG</keyword>
    </keywords>
    <dxsubarea />
  </sample>
  <sample>
    <name>Tutorial 2: Rendering Vertices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to create a triangle with vertices.]]></description>
    <folder>Samples\C#\Direct3D\Tutorials\Tutorial2\</folder>
    <screenshot>Tut02_Vertices.jpg</screenshot>
    <projectfile7>Tutorial2.sln</projectfile7>
    <language>C#</language>
    <complexity>10</complexity>
  </sample>
  <sample>
    <name>Tutorial 2: Rendering Vertices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to create a triangle with vertices.]]></description>
    <folder>Samples\VB.Net\Direct3D\Tutorials\Tutorial2\</folder>
    <projectfile7>Tutorial2.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>10</complexity>
    <screenshot>Tut02_Vertices.jpg</screenshot>
  </sample>
  <sample>
    <name>CaptureTex</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample combines features of the Texture3D and PlayCap samples. CaptureTex will enumerate any existing video capture devices attached to the system and will load the first device found.  A DirectShow renderer object will be created to render the incoming video stream onto a Direct3D surface.]]></description>
    <folder>Samples\C++\DirectShow\Capture\CaptureTex\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CaptureTex.exe</exe>
    <screenshot>CaptureTex.jpg</screenshot>
    <doc>::/directx/htm/CaptureTexsample.htm</doc>
    <projectfile6>CaptureTex.dsw</projectfile6>
    <projectfile7>CaptureTex.sln</projectfile7>
    <language>C++</language>
    <complexity>2000</complexity>
    <keywords>
      <keyword>CaptureTex</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Sprite Animate</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[SpriteAnimate demonstrates a simple technique to animate DirectDraw surfaces.]]></description>
    <folder>Samples\VB.Net\DirectDraw\SpriteAnimate\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbSpriteAnimate.exe</exe>
    <screenshot>SpriteAnimate.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SpriteAnimate.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>animate</keyword>
      <keyword>sprite</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DolphinVS</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The DolphinVS sample shows an underwater scene of a dolphin swimming, with caustic effects on the dolphin and seafloor. The dolphin is animated using a technique called "tweening". The underwater effect simply uses fog, and the water caustics use an animated set of textures. These effects are achieved using vertex shaders.]]></description>
    <folder>Samples\C#\Direct3D\DolphinVS\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csDolphinVS.exe</exe>
    <screenshot>DolphinVS.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DolphinVS.sln</projectfile7>
    <language>C#</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Lighting</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Lighting samples shows how to use D3D lights when rendering.  It shows the difference between the various types of lights (ambient, point, directional, spot), how to configure these lights, and how to enable and disable them.]]></description>
    <folder>Samples\C#\Direct3D\Lighting\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csLighting.exe</exe>
    <screenshot>Lighting.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Lighting.sln</projectfile7>
    <language>C#</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PointSprites</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The PointSprites sample shows how to use the new Direct3D point sprites feature.  A point sprite is simply a forward-facing, textured quad that is referenced only by (x,y,z) position coordinates.  Point sprites are most often used for particle systems and related effects. Note that not all cards support all features for point sprites.  For more information on point sprites, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\PointSprites\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csPointSprites.exe</exe>
    <screenshot>PointSprites.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>PointSprites.sln</projectfile7>
    <language>C#</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StencilDepth</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The StencilDepth sample uses stencil buffers to display the depth complexity of a scene. The depth complextity of a scene is defined as the average number of times each pixel is rendered to.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..  Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\StencilBuffer\StencilDepth\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csStencilDepth.exe</exe>
    <screenshot>StencilDepth.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>StencilDepth.sln</projectfile7>
    <language>C#</language>
    <complexity>1280</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Billboard</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Billboard sample illustrates the billboarding technique.  Rather than rendering complex 3-D models, such as a high-polygon tree model, billboarding renders a 2-D image of the model and rotates it to always face the eyepoint..  This technique is commonly used to render trees, clouds, smoke, explosions, and more.]]></description>
    <folder>Samples\VB.Net\Direct3D\Billboard\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbBillboard.exe</exe>
    <screenshot>Billboard.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Billboard.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>123</complexity>
    <keywords>
      <keyword>billboard</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VertexBlend</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The VertexBlend sample demonstrates a technique called vertex blending (also known as surface skinning).  It displays a file-based object which is made to bend is various spots.  Surface skinning is an impressive technique used for effects like smooth joints and bulging muscles in character animations.  Note that not all cards support all features for vertex blending.  For more information on vertex blending, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\VertexBlend\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csVertexBlend.exe</exe>
    <screenshot>VertexBlend.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VertexBlend.sln</projectfile7>
    <language>C#</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VertexShader</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders.  Vertex shaders use a set of instructions, executed by the 3D device on a per-vertex basis, that can affect the properties of the vertex (positions, normal, color, tex coords, etc.) in interesting ways.  Note that not all cards may support all the various features vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\VertexShader\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csVertexShader.exe</exe>
    <screenshot>VertexShader.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VertexShader.sln</projectfile7>
    <language>C#</language>
    <complexity>170</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DolphinVS</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The DolphinVS sample shows an underwater scene of a dolphin swimming with caustic effects on the dolphin and seafloor. The dolphin is animated using a technique called "tweening".  The underwater effect simply uses fog, and the water caustics use an animated set of textures. These effects are achieved using vertex shaders.]]></description>
    <folder>Samples\VB.Net\Direct3D\DolphinVS\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbDolphinVS.exe</exe>
    <screenshot>DolphinVS.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DolphinVS.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Lighting</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Lighting samples shows how to use D3D lights when rendering.  It shows the difference between the various types of lights (ambient, point, directional, spot), how to configure these lights, and how to enable and disable them.]]></description>
    <folder>Samples\VB.Net\Direct3D\Lighting\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbLighting.exe</exe>
    <screenshot>Lighting.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Lighting.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PointSprites</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The PointSprites sample shows how to use the new Direct3D point sprites feature.  A point sprite is simply a forward-facing, textured quad that is referenced only by (x,y,z) position coordinates.  Point sprites are most often used for particle systems and related effects.  Note that not all cards support all features for point sprites.  For more information on point sprites, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\PointSprites\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbPointSprites.exe</exe>
    <screenshot>PointSprites.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>PointSprites.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VertexBlend</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The VertexBlend sample demonstrates a technique called vertex blending (also known as surface skinning).  It displays a file-based object which is made to bend in various spots.  Surface skinning is an impressive technique used for effects like smooth joints and bulging muscles in character animations.  Note that not all cards support all features for vertex blending.  For more information on vertex blending, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\VertexBlend\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbVertexBlend.exe</exe>
    <screenshot>VertexBlend.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VertexBlend.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VertexShader</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders. Vertex shaders use a set of instructions, executed by the 3D device on a per-vertex basis that can affect the properties of the vertex (positions, normal, color, tex coords, etc.) in interesting ways.  Note that not all cards may support all the various features for  vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\VertexShader\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbVertexShader.exe</exe>
    <screenshot>VertexShader.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VertexShader.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>170</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>GrabBitmaps</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ command line application shows how to use the sample grabber filter and a COM object callback to capture media samples in a running video file. GrabBitmaps performs the following steps: Open a specified AVI file, Create a filter graph with a sample grabber filter, Read five frames at approximately one-second intervals, Write the frames to bitmap (.BMP) files in the current directory.]]></description>
    <folder>Samples\C++\DirectShow\Editing\GrabBitmaps\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>GrabBitmaps.jpg</screenshot>
    <doc>::/directx/htm/grabbitmaps.htm</doc>
    <projectfile6>GrabBitmaps.dsw</projectfile6>
    <projectfile7>GrabBitmaps.sln</projectfile7>
    <language>C++</language>
    <complexity>1000</complexity>
    <keywords>
      <keyword>GrabBitmaps</keyword>
      <keyword>Editing</keyword>
      <keyword>SampleGrabber</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate Devices</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to enumerate the current DirectDraw devices.]]></description>
    <folder>Samples\VB.Net\DirectDraw\EnumDevices\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbEnumDrawDevices.exe</exe>
    <screenshot>EnumDevices.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnumDevices.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>enumerate</keyword>
      <keyword>devices</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ClipVolume</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ClipVolume sample demonstrates a technique for using shaders to "subtract" a sphere from an arbitrary model when rendering.  This technique could be useful in visualization applications to see inside complex objects.  The sample also shows how to perform two-sided lighting.]]></description>
    <folder>Samples\C++\Direct3D\ClipVolume\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ClipVolume.exe</exe>
    <screenshot>ClipVolume.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/clipvolume.htm</doc>
    <projectfile6>ClipVolume.dsw</projectfile6>
    <projectfile7>ClipVolume.sln</projectfile7>
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The CubeMap sample demonstrates an enviroment-mapping technique called cube-mapping.  Environment-mapping is a technique in which the environment surrounding a 3D object (such as the lights, etc.) are put into a texture map, so that the object can have complex lighting effects without expensive lighting calculations.  Note that not all cards support all features for all the various environment mapping techniques (such as cubemapping and projected textures).  For more information on environment mapping, cubemapping, and projected textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\EnvMapping\CubeMap\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csCubeMap.exe</exe>
    <screenshot>CubeMap.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>CubeMap.sln</projectfile7>
    <language>C#</language>
    <complexity>1260</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MotionBlur</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The MotionBlur sample demonstrates a vertex shader that creates a motion blur effect by stretching some vertices along the direction of motion and fading their transparency.]]></description>
    <folder>Samples\VB.Net\Direct3D\MotionBlur\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbMotionBlur.exe</exe>
    <screenshot>MotionBlur.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>MotionBlur.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpLens</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpLens sample demonstrates a lens effect that can be achieved using bump mapping.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\BumpMapping\BumpLens\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbBumpLens.exe</exe>
    <screenshot>BumpLens.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpLens.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1220</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StencilMirror</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The StencilMirror sample uses stencil buffers to implement a mirror effect.  In the sample, a watery terrain scene is rendered with the water reflecting a helicopter that flies above.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..   Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\StencilBuffer\StencilMirror\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbStencilMirror.exe</exe>
    <screenshot>StencilMirror.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>StencilMirror.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1290</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ProgressiveMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ProgressiveMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions. A progressive mesh is one in which the vertex information is stored internally in a special tree which can be accessed to render the mesh with any given number of vertices. This procedure is fast, so progressive meshes are ideal for level-of-detail scenarios, where objects in the distance are rendered with fewer polygons.   For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\Meshes\ProgressiveMesh\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbProgressiveMesh.exe</exe>
    <screenshot>ProgressiveMesh.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ProgressiveMesh.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ShadowVolume</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ShadowVolume sample uses stencil buffers to implement real-time shadows.  In the sample, a complex object is rendered and used as a shadow-caster, to cast real-time shadows on itself and on the terrain below.    Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..    Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\StencilBuffer\ShadowVolume\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbShadowVolume.exe</exe>
    <screenshot>ShadowVolume.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ShadowVolume.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StencilDepth</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The StencilDepth sample uses stencil buffers to display the depth complexity of a scene. The depth complextity of a scene is defined as the average number of times each pixel is rendered to.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..    Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\StencilBuffer\StencilDepth\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbStencilDepth.exe</exe>
    <screenshot>StencilDepth.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>StencilDepth.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1280</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRPlayer9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend one or two running videos and a static image.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\VMRPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRPlayer9.exe</exe>
    <screenshot>VMRPlayer.jpg</screenshot>
    <doc>::/directx/htm/VMRPlayersample.htm</doc>
    <projectfile6>VMRPlayer9.dsw</projectfile6>
    <projectfile7>VMRPlayer9.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>VMRPlayer</keyword>
      <keyword>player</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>PixelMotionBlur</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to do a motion blur effect using floating point textures and multiple render targets.  The first pass renders the scene to the first render target and writes the velocity of each pixel to the second render target.  Then it renders a full screen quad and uses a pixel shader to look up the velocity of that pixel and blurs the pixel based on the velocity.]]></description>
    <folder>Samples\C++\Direct3D\PixelMotionBlur\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>PixelMotionBlur.exe</exe>
    <screenshot>PixelMotionBlur.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/PixelMotionBlur.htm</doc>
    <projectfile6>PixelMotionBlur.dsw</projectfile6>
    <projectfile7>PixelMotionBlur.sln</projectfile7>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Blobs</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample mimics a metaball effect in screen space using a pixel shader. True metaball techniques deform meshes according to pushing or pulling modifiers, and are commonly used to model liquid effects like the merging of water droplets; however, metaball effects can be computationally expensive, and this sample shows how to fake a 3D metaball effect in 2D image space using a pixel shader.]]></description>
    <folder>Samples\C++\Direct3D\Blobs\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Blobs.exe</exe>
    <readme>readme.htm</readme>
    <screenshot>Blobs.jpg</screenshot>
    <projectfile6>Blobs.dsw</projectfile6>
    <projectfile7>Blobs.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Watermark9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Watermark demonstrates the VMR9's ability to alpha blend a static image with the running video stream (or with multiple video streams).  In addition to displaying a watermark (logo) in the bottom right corner of the window, this sample also demonstrates how to flip, mirror, manipulate alpha, and move a bitmap around in the application's video window.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Watermark\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Watermark9.exe</exe>
    <screenshot>Watermark.jpg</screenshot>
    <doc>::/directx/htm/Watermarksample.htm</doc>
    <projectfile6>Watermark9.dsw</projectfile6>
    <projectfile7>Watermark9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Watermark</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>SHPRTPixel</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[Similar to the SHPRTVertex sample, this sample demonstrates how use D3DXSHPRTSimulationTex(), a per texel precomputed radiance transfer (PRT) simulator that uses low-order spherical harmonics (SH) and records the results to a file. The sample then demonstrates how compress the results with principal component analysis (PCA) and views the compressed results with arbitrary lighting in real time with a ps_2_0 pixel shader.]]></description>
    <folder>Samples\C++\Direct3D\SHPRTPixel\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>SHPRTPixel.exe</exe>
    <screenshot>SHPRTPixel.jpg</screenshot>
    <readme>readme.htm</readme>
    <projectfile6>SHPRTPixel.dsw</projectfile6>
    <projectfile7>SHPRTPixel.sln</projectfile7>
    <language>C++</language>
    <complexity>2600</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VolumeTexture</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The VolumeTexture sample illustrates how to use the new volume textures in Direct3D.  Normally, a texture is thought of as a 2D image, which have a width and a height and whose "texels" are addressed with two coordinate, tu and tv.  Volume textures are the 3D counterparts, with a width, height, and depth, and are addressed with three coordinates, tu, tv, and tw.  Volume textures can be used for interesting effects like patchy fog, explosions, etc.  Note that not all cards support all features for volume textures.  For more information on volume textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\VolumeTexture\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csVolumeTexture.exe</exe>
    <screenshot>VolumeTexture.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VolumeTexture.sln</projectfile7>
    <language>C#</language>
    <complexity>160</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Ticker9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend video and text.  It uses the VMR9's IVMRMixerBitmap9 interface to blend text onto the bottom portion of the video window in a style similar to closed-captioning text.  When the video file opens, Ticker creates a bitmap with a default text string and begins to scroll it across the bottom of the screen.  You may change the scrolling text with the "Set Text String" dialog.  You may adjust the font and color of the blended text by choosing the "Set Font" menu option.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Ticker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Ticker9.exe</exe>
    <screenshot>vmr9Ticker.jpg</screenshot>
    <doc>::/directx/htm/Tickersample.htm</doc>
    <projectfile6>Ticker9.dsw</projectfile6>
    <projectfile7>Ticker9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Ticker</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Text9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend video and text.  It uses the VMR9's IVMRMixerBitmap9 interface to blend text onto the bottom portion of the video window in a style similar to closed-captioning text.  The text is written onto a dynamically created bitmap, which is then blended with the running video.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Text\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Text9.exe</exe>
    <screenshot>Text9.jpg</screenshot>
    <doc>::/directx/htm/Textsample.htm</doc>
    <projectfile6>Text9.dsw</projectfile6>
    <projectfile7>Text9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Text</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Pip9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend multiple video streams in a window.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Pip\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Pip9.exe</exe>
    <screenshot>Pip9.jpg</screenshot>
    <doc>::/directx/htm/Pipsample.htm</doc>
    <projectfile6>VMRPip9.dsw</projectfile6>
    <projectfile7>VMRPip9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Pip</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MonitorInfo9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is a simple demonstration of information that can be retrieved from the Video Mixing Renderer 9 IVMRMonitorConfig9 interface.  The sample enumerates the available monitors in the system and their associated dimensions, flags, handle, name, and optional description.  A text string is created which contains the queried information, which is then displayed in a message box.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\MonitorInfo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>MonitorInfo9.exe</exe>
    <screenshot>MonitorInfo9.jpg</screenshot>
    <doc>::/directx/htm/MonitorInfosample.htm</doc>
    <projectfile6>MonitorInfo9.dsw</projectfile6>
    <projectfile7>MonitorInfo9.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>MonitorInfo</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Blender9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend multiple video streams in an MFC dialog-based application.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Blender\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Blender9.exe</exe>
    <screenshot>Blender9.jpg</screenshot>
    <doc>::/directx/htm/Blendersample.htm</doc>
    <projectfile6>Blender9.dsw</projectfile6>
    <projectfile7>Blender9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Blender</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DxDiagOutput</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\C#\Misc\DxDiagOutput\</folder>
    <exefolder>Samples\C#\Misc\Bin\</exefolder>
    <exe>csDxDiagOutput.exe</exe>
    <screenshot>DxDiagOutput.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DxDiagOutput.sln</projectfile7>
    <language>C#</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DxDiagOutput</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\VB.Net\Misc\DxDiagOutput\</folder>
    <exefolder>Samples\VB.Net\Misc\Bin\</exefolder>
    <exe>vbDxDiagOutput.exe</exe>
    <screenshot>DxDiagOutput.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DxDiagOutput.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Diagnostic Report</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by the enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\C++\Misc\DxDiagReport\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>DxDiagReport.exe</exe>
    <screenshot>DxDiagReport.jpg</screenshot>
    <doc>::/directx/intro/tools/dxdiag.htm</doc>
    <projectfile6>DxDiagReport.dsw</projectfile6>
    <projectfile7>DxDiagReport.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>DepthOfField</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows a technique for creating a depth-of-field effect with Direct3D, in which objects are only in focus at a given distance from the camera, and are out of focus at other distances.]]></description>
    <folder>Samples\C++\Direct3D\DepthOfField\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>DepthOfField.exe</exe>
    <screenshot>DepthOfField.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/depthoffield.htm</doc>
    <projectfile6>DepthOfField.dsw</projectfile6>
    <projectfile7>DepthOfField.sln</projectfile7>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Emboss</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Emboss sample demonstrates an alternative approach to standard Direct3D bump mapping. Embossing is done by subtracting the height map from itself and having texture coordinates that are slightly changed.  Not all cards support Direct3D bump mapping. Refer to the Microsoft DirectX 9.0 software development kit (SDK) documentation for more information.]]></description>
    <folder>Samples\VB.Net\Direct3D\BumpMapping\Emboss\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbEmboss.exe</exe>
    <screenshot>Emboss.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Emboss.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1240</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Emboss</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Emboss sample demonstrates an alternative approach to standard Direct3D bump mapping. Embossing is done by subtracting the height map from itself and having texture coordinates that are slightly changed.  Not all cards support Direct3D bump mapping. Refer to the Microsoft DirectX 9.0 software development kit (SDK) documentation for more information.]]></description>
    <folder>Samples\C#\Direct3D\BumpMapping\Emboss\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csEmboss.exe</exe>
    <screenshot>Emboss.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Emboss.sln</projectfile7>
    <language>C#</language>
    <complexity>1240</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ReadFFE</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ReadFFE sample loads and plays all of the DirectInput Force Feedback effects in stored in a DirectInput effects file.]]></description>
    <folder>Samples\C#\DirectInput\ReadFFE\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csReadFFE.exe</exe>
    <screenshot>ReadFFE.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ReadFFE.sln</projectfile7>
    <language>C#</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>ReadFFE</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>DirectInput</keyword>
      <keyword>EffectObject</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DrumPad</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The DrumPad Sample transforms every input device (joysticks, joypads, keyboard, mouse) on your computer to a simple audio drum machine (using Action Mapping and DirectX Audio). You can load different sound files to be played for each "drum".]]></description>
    <folder>Samples\VB.Net\DirectInput\DrumPad\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbDrumPad.exe</exe>
    <screenshot>DrumPad.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DrumPad.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>DrumPad</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>DirectInput</keyword>
      <keyword>DirectSound</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlaySound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The PlaySound sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\VB.Net\DirectSound\PlaySound\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbPlaySound.exe</exe>
    <screenshot>playsound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>PlaySound.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>DirectSound</keyword>
      <keyword>DirectSoundBuffer</keyword>
      <keyword>WaveFormat</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Scrawl</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Scrawl application demonstrates use of the mouse in nonexclusive mode in a windowed application.]]></description>
    <folder>Samples\VB.Net\DirectInput\Scrawl\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbScrawl.exe</exe>
    <screenshot>Scrawl.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Scrawl.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>Scrawl</keyword>
      <keyword>mouse</keyword>
      <keyword>nonexclusive</keyword>
      <keyword>cooperative</keyword>
      <keyword>DirectInput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ReadFFE</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ReadFFE sample loads and plays all of the DirectInput Force Feedback effects in stored in a DirectInput effects file.]]></description>
    <folder>Samples\VB.Net\DirectInput\ReadFFE\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbReadFFE.exe</exe>
    <screenshot>ReadFFE.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ReadFFE.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>ReadFFE</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>DirectInput</keyword>
      <keyword>EffectObject</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DrumPad</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The DrumPad Sample transforms every input device (joysticks, joypads, keyboard, mouse) on your computer to a simple audio drum machine (using Action Mapping and DirectX Audio). You can load different sound files to be played for each "drum".]]></description>
    <folder>Samples\C#\DirectInput\DrumPad\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csDrumPad.exe</exe>
    <screenshot>DrumPad.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DrumPad.sln</projectfile7>
    <language>C#</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>DrumPad</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>DirectInput</keyword>
      <keyword>DirectSound</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Scrawl</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Scrawl application demonstrates use of the mouse in nonexclusive mode in a windowed application.]]></description>
    <folder>Samples\C#\DirectInput\Scrawl\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csScrawl.exe</exe>
    <screenshot>Scrawl.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Scrawl.sln</projectfile7>
    <language>C#</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>Scrawl</keyword>
      <keyword>mouse</keyword>
      <keyword>nonexclusive</keyword>
      <keyword>cooperative</keyword>
      <keyword>DirectInput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlaySound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The PlaySound sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\C#\DirectSound\PlaySound\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csPlaySound.exe</exe>
    <screenshot>playsound.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>PlaySound.sln</projectfile7>
    <language>C#</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>DirectSound</keyword>
      <keyword>DirectSoundBuffer</keyword>
      <keyword>WaveFormat</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample new="true" external="true">
    <name>Rthdribl</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[Masaki Kawase's Rthdribl sample demonstrates "Real-time High Dynamic Range Image-Based Lighting". DirectX 9.0 high-precision texture formats and version-2.0 of Pixel Shader represent real-time true HDR rendering. 
Technical features of the demo are: True HDR (High-Dynamic Range) Rendering, IBL (Image-Based Lighting), Glare Generation (Afterimage, Bloom, Halo, Ghost, and Star), Automatic Exposure Adjustment, Iris shaped Depth of Field blur, Realistic Motion Blur, FSAA (Full-Scene Anti-Alias), Fresnel Effect (Specular Reflectance) etc. This URL link will redirect you to an external web site and is provided for informational purposes only. Microsoft makes no warranties, express or implied, with respect to this external web site or the information contained in it.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="External Website"><![CDATA[http://www.daionet.gr.jp/~masa/rthdribl/]]></link>
    <screenshot>rthdribl.jpg</screenshot>
    <doc>
    </doc>
    <projectfile6>
    </projectfile6>
    <projectfile7>
    </projectfile7>
    <language>C++</language>
    <complexity>8000</complexity>
    <keywords>
    </keywords>
  </sample>
  <sample external="true">
    <name>DirectX Slides from Game Developer Conference 2003</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[This download includes presentations given by the DirectX team at Game Developers Conference 2003. These include: How to Install Less and Play More, Direct3D Performance Tools Preview, Shader Management 101, Interactive Rendering with Smooth Area Lighting Models, Power Debugging with Microsoft Visual C++ and the DirectX extensions.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="Download Location"><![CDATA[http://www.microsoft.com/downloads/details.aspx?FamilyID=2ca1010d-16bd-4266-a916-8d4970b1aa53&DisplayLang=en]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>
    </complexity>
  </sample>
  <sample external="true">
    <name>Best Practices for Game Installation and Maintenance</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Bartolomeo describes a set of best practices that can help reduce user frustration over the time taken to install a game, prevent unnecessary support calls, and allow users to start playing your game as quickly and painlessly as possible.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx07152003.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>
    </complexity>
  </sample>
  <sample external="true">
    <name>Taking It Higher with the High Level Shader Language</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Kev Gee moves parts of the MSDN Shader Workshop to the Microsoft DirectX High Level Shading Language and demonstrates its advantages over the legacy of writing shaders in assembly. (14 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndrive/html/directx04152003.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>600</complexity>
  </sample>
  <sample external="true">
    <name>Using the Effects Framework</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson and Kris Gray summarize the effects framework in D3DX, an integral component of D3DX that offers developers a range of benefits by grouping sets of visual effects. (14 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx03182003.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>800</complexity>
  </sample>
  <sample external="true">
    <name>D3DX Meshes, Part 2: The Optimize Mesh Sample</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson walks through key portions of the Optimize Mesh sample in the Microsoft DirectX 9.0 SDK, showing how to use the Microsoft Direct3DX (D3DX) mesh classes to make it easy to load, save, optimize, and draw meshes to the screen. (13 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx01212003.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>751</complexity>
  </sample>
  <sample external="true">
    <name>D3DX Meshes, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson gives an overview of the basic classes and methods for working with meshes in Direct3D using the D3DX library. The use of meshes allow for a standard way to represent and use data for 3-D geometry. This makes working with 3-D geometry easy, and can substantially increase the speed at which an object is drawn. (6 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx11192002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>750</complexity>
  </sample>
  <sample external="true">
    <name>Exploring D3DX, Part 2: Textures</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor continues to illustrate the usefulness of D3DX, turning to the various forms of texture support provided by the Microsoft Direct3D utility library, including mipmapped texture support, cube-map support, volume-texture support, bump-mapping support, and more. (17 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx08202002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>701</complexity>
  </sample>
  <sample external="true">
    <name>Exploring D3DX, Part 1: An Overview</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor begins his exploration of D3DX, which provides meshes, effects and effects files, math support, texturing support, and more as a substantial time saver for developers. (10 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx07162002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>700</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop, Part 3: The Pixel Shader Exercises</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor concludes his coverage of the MSDN ShaderWorkshop with five final exercises that illustrate various usueful pixel shader tasks.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx05222002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1204</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop Application, Part 2: The Vertex Shader Exercises</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor continues his tour through the MSDN ShaderWorkshop by working through the first six exercises, which expose some basic vertex shader concepts.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx04152002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1203</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop Application, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor introduces the MSDN Shader Workshop application, which is based on the application used in the Meltdown 2001 shader tutorial event. The Meltdown shader tutorial includes exercises for both vertex and pixel shaders, as well as solutions to the exercises.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx03192002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1202</complexity>
  </sample>
  <sample external="true">
    <name>Per-Pixel Lighting</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses per-pixel lighting, with an eye to explaining why pixel shaders are so important. In this article he discusses the basics of per-pixel lighting in addition to standard lighting models and custom lighting models.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx11192001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1201</complexity>
  </sample>
  <sample external="true">
    <name>Pixel Shaders, Part 1: An Introduction</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor begins his coverage of pixel shaders by showcasing several basic pixel shaders and showing how they sync up with vertex shaders and streams.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx09172001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1200</complexity>
  </sample>
  <sample external="true">
    <name>Screensavers Redux: The DirectX 8.0 Screensaver Framework</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor showcases a new screensaver framework for Microsoft DirectX 8.0. The DirectX 8.0 screensaver framework is full featured and goes far beyond the DirectX 7.0 SDK screensaver framework by providing test, configure, and run modes along with preview, password, and multi-monitor support.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx08202001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>710</complexity>
  </sample>
  <sample external="true">
    <name>Using Vertex Shaders, Part 3: Optimizing the Tweening Vertex Shader</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor showcases some basic shader optimizations applied to the DolphinVS sample's tweening shader.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx05212001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1003</complexity>
  </sample>
  <sample external="true">
    <name>Tweening 3-Way, or Using Vertex Shaders, Part 2</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor explores using vertex shader to perform character animation. The basic character animation technique presented is known as "tweening." This name derives from the process itself, in which character animation artists use an authoring tool and define several models in sequence for each action, for instance the action of running. Each model contains a pose of the action. The programmer reads the poses and generates intermediate, or "in-between" frames, using linear interpolation between the two sets of vertices.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx04162001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1002</complexity>
  </sample>
  <sample external="true">
    <name>Using Vertex Shaders, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses vertex shaders in detail. Vertex shaders give developers fine-grained control over the vertex transformation and lighting pipeline and can be used as a substitute in DirectX 8 for the fixed-function transform and lighting pipeline]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx02192001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1001</complexity>
  </sample>
  <sample external="true">
    <name>Programmable Shaders for DirectX 8.0</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor presents the programmable pipeline, unarguably the most important new feature among a wealth of new features in DirectX 8.0 graphics.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx01152001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1000</complexity>
  </sample>
  <sample external="true">
    <name>The Simplification of DirectX 8.0 Graphics</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses the new features DirectX 8.0 graphics; this release simplifies many common tasks, including initialization, enumeration, device creation, presentation, lost devices/surfaces, and resource management.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx12192000.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>101</complexity>
  </sample>
  <sample external="true">
    <name>Introduction to DirectX 8.0</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor presents an overview of all the cool features this new version provides for developers.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx112000.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>100</complexity>
  </sample>
  <sample>
    <name>LightingVS</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The LightingVS sample shows how to use D3D vertex shaders to implement lighting when rendering.  It shows the difference between the various types of lights (ambient, point, directional, spot), how to configure these lights, and how to enable and disable them.]]></description>
    <folder>Samples\C++\Direct3D\LightingVS\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>LightingVs.exe</exe>
    <screenshot>LightingVS.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/samples/LightingVS.htm</doc>
    <projectfile6>LightingVS.dsw</projectfile6>
    <projectfile7>LightingVS.sln</projectfile7>
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>SHIrradianceEnvMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to use spherical harmonics to handle any number of lights in a single pass with a simple shader.]]></description>
    <folder>Samples\C++\Direct3D\SHIrradianceEnvMap\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>SHIrradianceEnvMap.exe</exe>
    <screenshot>SHIrradianceEnvMap.jpg</screenshot>
    <readme>readme.htm</readme>
    <projectfile6>SHIrradianceEnvMap.dsw</projectfile6>
    <projectfile7>SHIrradianceEnvMap.sln</projectfile7>
    <language>C++</language>
    <complexity>1230</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 10: ThreadPool</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial uses the IDirectPlay8ThreadPool interface to control when and for how long the DirectPlay worker threads are allowed to run.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut10_ThreadPool\</folder>
    <screenshot>ThreadPool.gif</screenshot>
    <projectfile7>Tut10_ThreadPool.sln</projectfile7>
    <language>C#</language>
    <complexity>70</complexity>
    <keywords>
      <keyword>ThreadPool</keyword>
      <keyword>lobby</keyword>
      <keyword>DirectPlayPeer</keyword>
      <keyword>DirectPlayLobbiedApplication</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Text3D</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
    <folder>Samples\VB.Net\Direct3D\Text3D\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbText3D.exe</exe>
    <screenshot>Text3D.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Text3D.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Text3D</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
    <folder>Samples\C#\Direct3D\Text3D\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csText3D.exe</exe>
    <screenshot>Text3D.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Text3D.sln</projectfile7>
    <language>C#</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Player</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample provides simple playback of audio and video.]]></description>
    <folder>Samples\VB.Net\AudioVideo\Player\</folder>
    <exefolder>Samples\VB.Net\AudioVideo\bin\</exefolder>
    <exe>vbAVPlayer.exe</exe>
    <screenshot>Player.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Player.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>156</complexity>
  </sample>
  <sample>
    <name>Player</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample provides simple playback of audio and video.]]></description>
    <folder>Samples\C#\AudioVideo\Player\</folder>
    <exefolder>Samples\C#\AudioVideo\bin\</exefolder>
    <exe>csAVPlayer.exe</exe>
    <screenshot>Player.jpg</screenshot>
    <doc>readme.txt</doc>
    <language>C#</language>
    <complexity>156</complexity>
    <projectfile7>Player.sln</projectfile7>
  </sample>
  <sample>
    <name>MDI Window</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[MDIWindow demonstrates DirectDraw in MDI windows.]]></description>
    <folder>Samples\C#\DirectDraw\MDIWindow\</folder>
    <exefolder>Samples\C#\DirectDraw\Bin\</exefolder>
    <exe>csMDIWindow.exe</exe>
    <screenshot>MDIWindow.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>MDIWindow.sln</projectfile7>
    <language>C#</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>mdi</keyword>
      <keyword>window</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MDI Window</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[MDIWindow demonstrates DirectDraw in MDI windows.]]></description>
    <folder>Samples\VB.Net\DirectDraw\MDIWindow\</folder>
    <exefolder>Samples\VB.Net\DirectDraw\Bin\</exefolder>
    <exe>vbMDIWindow.exe</exe>
    <screenshot>MDIWindow.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>MDIWindow.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>mdi</keyword>
      <keyword>window</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Donuts 4: Revenge of the Space Torus</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA["Donuts 4: Revenge of the Space Torus" is a complete rewritten sequel to Donuts3D.  It features all new artwork and a simple physics engine showcasing Direct3D, DirectMusic, and DirectInput.  The executable loads a lot of media on startup.  A 1 GHz system or better with an AGP display adapter is recommended.]]></description>
    <folder>Samples\C++\Demos\Donuts4\</folder>
    <exefolder>Samples\C++\Demos\Bin\</exefolder>
    <exe>Donuts4.exe</exe>
    <screenshot>Donuts4.jpg</screenshot>
    <projectfile6>Donuts4.dsw</projectfile6>
    <projectfile7>Donuts4.sln</projectfile7>
    <language>C++</language>
    <complexity>2500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
    <dxsubarea />
  </sample>
  <sample>
    <name>ThrottleServer</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the Throttle sample, which demonstrates how to monitor the send queue and scale the rate of network communication.  ]]></description>
    <folder>Samples\C++\DirectPlay\Throttle\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>ThrottleServer.exe</exe>
    <screenshot>ThrottleServer.gif</screenshot>
    <doc>::/directx/play/samps/Throttle.htm</doc>
    <projectfile6>Throttle.dsw</projectfile6>
    <projectfile7>Throttle.sln</projectfile7>
    <language>C++</language>
    <complexity>1150</complexity>
    <keywords>
      <keyword>ThrottleServer</keyword>
      <keyword>Throttle</keyword>
      <keyword>GetSendQueueInfo</keyword>
      <keyword>IDirectPlay8Client</keyword>
      <keyword>IDirectPlay8Server</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ThrottleClient</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is the client portion of the Throttle sample, which demonstrates how to monitor the send queue and scale the rate of network communication.  ]]></description>
    <folder>Samples\C++\DirectPlay\Throttle\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>ThrottleClient.exe</exe>
    <screenshot>ThrottleClient.gif</screenshot>
    <doc>::/directx/play/samps/Throttle.htm</doc>
    <projectfile6>Throttle.dsw</projectfile6>
    <projectfile7>Throttle.sln</projectfile7>
    <language>C++</language>
    <complexity>1140</complexity>
    <keywords>
      <keyword>ThrottleClient</keyword>
      <keyword>Throttle</keyword>
      <keyword>GetSendQueueInfo</keyword>
      <keyword>IDirectPlay8Server</keyword>
      <keyword>IDirectPlay8Client</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpWaves</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpWaves program demonstrates the bump mapping capabilities of Direct3D. Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces. This sample renders a waterfront scene with only 4 triangles. The waves in the scene are completely fabricated with a bump map.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support). For more information on bump mapping, refer to the DirectX SDK documentation.   This sample also uses a technique called "projected textures", which is a texture-coordinate generation technique and is not the focal point of the sample. For more information on texture-coordinate generation, refer again to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\BumpMapping\BumpWaves\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbBumpWaves.exe</exe>
    <screenshot>BumpWaves.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpWaves.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Fractal</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Fractal sample illustrates using Fractals to generate a height map.]]></description>
    <folder>Samples\C#\Direct3D\Fractal\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csFractal.exe</exe>
    <screenshot>Fractal.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Fractal.sln</projectfile7>
    <language>C#</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Fractal</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Fractal sample illustrates using Fractals to generate a height map.]]></description>
    <folder>Samples\VB.Net\Direct3D\Fractal\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbFractal.exe</exe>
    <screenshot>Fractal.jpg</screenshot>
    <projectfile7>Fractal.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
    <doc>readme.txt</doc>
  </sample>
  <sample>
    <name>VMR9Allocator</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is designed to show how to render streaming media (MPEG, ASF, AVI and other formats) into a D3D Scene using the Video Mixing Renderer 9 filter.  The sample creates an object that implements IVMRSurfaceAllocator9 and IVMRImagePresenter9.  The object takes over surface and texture allocation and rendering of the decoded frames into a Direct3D9 scene environment.  For simplicity, the VMR9Allocator has just one 3D plane with 2 shaded vertices that is being rotated.
]]></description>
    <folder>Samples\C++\DirectShow\VMR9\VMR9Allocator\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMR9Allocator.exe</exe>
    <screenshot>VMR9Allocator.jpg</screenshot>
    <doc>::/directx/htm/vmr9allocatorsample.htm</doc>
    <projectfile6>VMR9Allocator.dsw</projectfile6>
    <projectfile7>VMR9Allocator.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>VMR9Allocator</keyword>
    </keywords>
    <doc />
  </sample>
  <sample>
    <name>SoundFX</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The SoundFX sample shows how to use DMOs with DirectSound and how to manipulate effect parameters.  It is similar to the DirectMusic AudioFX Sample but does not use an audiopath or any of the DirectMusic interfaces.]]></description>
    <folder>Samples\VB.Net\DirectSound\SoundFX\</folder>
    <exefolder>Samples\VB.Net\DirectSound\Bin\</exefolder>
    <exe>vbSoundFX.exe</exe>
    <screenshot>SoundFX.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SoundFX.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SoundFX</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The SoundFX sample shows how to use DMOs with DirectSound and how to manipulate effect parameters.  It is similar to the DirectMusic AudioFX Sample but does not use an audiopath or any of the DirectMusic interfaces.]]></description>
    <folder>Samples\C#\DirectSound\SoundFX\</folder>
    <exefolder>Samples\C#\DirectSound\Bin\</exefolder>
    <exe>csSoundFX.exe</exe>
    <screenshot>SoundFX.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SoundFX.sln</projectfile7>
    <language>C#</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpWaves</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpWaves program demonstrates the bump mapping capabilities of Direct3D. Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces. This sample renders a waterfront scene with only 4 triangles. The waves in the scene are completely fabricated with a bump map.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support). For more information on bump mapping, refer to the DirectX SDK documentation.   This sample also uses a technique called "projected textures", which is a texture-coordinate generation technique and is not the focal point of the sample. For more information on texture-coordinate generation, refer again to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\BumpMapping\BumpWaves\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csBumpWaves.exe</exe>
    <screenshot>BumpWaves.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpWaves.sln</projectfile7>
    <language>C#</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BmpMix9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to render video in a window.  An animated alpha-blended bitmap is rendered onto a Direct3D surface and mixed with the running video.  You can click and drag the bitmap around the video window using your mouse.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\BitmapMix\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>bmpMix9.exe</exe>
    <screenshot>bmpMix9.jpg</screenshot>
    <doc>::/directx/htm/bitmapmixsample.htm</doc>
    <projectfile6>bmpMix9.dsw</projectfile6>
    <projectfile7>bmpMix9.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>bmpMix9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SphereMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The SphereMap sample demonstrates an enviroment-mapping technique called sphere-mapping.  Environment-mapping is a technique in which the environment surrounding a 3D object (such as the lights, etc.) are put into a texture map, so that the object can have complex lighting effects without expensive lighting calculations.  Note that not all cards support all features for all the various environment mapping techniques (such as cubemapping and projected textures).  For more information on environment mapping, cubemapping, and projected textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\EnvMapping\SphereMap\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csSphereMap.exe</exe>
    <screenshot>SphereMap.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>SphereMap.sln</projectfile7>
    <language>C#</language>
    <complexity>150</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>EnvMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The CubeMap sample demonstrates an enviroment-mapping technique called cube-mapping.  Environment-mapping is a technique in which the environment surrounding a 3D object (such as the lights, etc.) are put into a texture map, so that the object can have complex lighting effects without expensive lighting calculations.  Note that not all cards support all features for all the various environment mapping techniques (such as cubemapping and projected textures).  For more information on environment mapping, cubemapping, and projected textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\EnvMapping\CubeMap\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbCubeMap.exe</exe>
    <screenshot>CubeMap.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>CubeMap.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1260</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Texture3D9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Draws video on a Microsoft DirectX 9.0 texture surface.  This sample builds on the Direct3D Tutorial05 sample, adding support for rendering video onto a Direct3D9 surface.]]></description>
    <folder>Samples\C++\DirectShow\Players\Texture3D9\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Texture3D9.exe</exe>
    <screenshot>Texture3D9.jpg</screenshot>
    <doc>::/directx/htm/texture3d9sample.htm</doc>
    <projectfile6>Texture3D9.dsw</projectfile6>
    <projectfile7>Texture3D9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Texture3D9</keyword>
      <keyword>Player</keyword>
      <keyword>renderer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DXMessenger:  Server</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the DXMessenger sample.  It provides a data store for maintaining client lists and friends as well as the interface to maintain connections.]]></description>
    <folder>Samples\C#\DirectPlay\DXMessenger\Server\</folder>
    <screenshot>csServer.jpg</screenshot>
    <doc>..\readme.txt</doc>
    <exefolder>Samples\C#\DirectPlay\Bin\</exefolder>
    <exe>csMessengerServer.exe</exe>
    <projectfile7>Server.sln</projectfile7>
    <language>C#</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MotionBlur</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The MotionBlur sample demonstrates a vertex shader that creates a motion blur effect by stretching some vertices along the direction of motion and fading their transparency.]]></description>
    <folder>Samples\C#\Direct3D\MotionBlur\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csMotionBlur.exe</exe>
    <screenshot>MotionBlur.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>MotionBlur.sln</projectfile7>
    <language>C#</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceConnect</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[VoiceConnect shows how to network other players using DirectPlay to start a DirectPlay Voice chat session.  After joining or creating a session, the players may use computer microphone to talk to one other. Other players may join the game in progress at any time.]]></description>
    <folder>Samples\C#\DirectPlay\VoiceConnect\</folder>
    <exefolder>Samples\C#\DirectPlay\Bin\</exefolder>
    <exe>csVoiceConnect.exe</exe>
    <screenshot>VoiceConnect.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VoiceConnect.sln</projectfile7>
    <language>C#</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>VoiceConnect</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DXMessenger:  Client</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the client portion of the DXMessenger sample.  The interface allows you to connect to various servers and log in or create new accounts.  Once connected to a server you can add friends and have conversations with friends instantly.]]></description>
    <folder>Samples\VB.Net\DirectPlay\DXMessenger\Client\</folder>
    <screenshot>vbClient.jpg</screenshot>
    <doc>..\readme.txt</doc>
    <exefolder>Samples\VB.Net\DirectPlay\Bin\</exefolder>
    <exe>vbMessengerClient.exe</exe>
    <projectfile7>MessengerClient.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DXMessenger:  Server</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the server portion of the DXMessenger sample.  It provides a data store for maintaining client lists and friends as well as the interface to maintain connections.]]></description>
    <folder>Samples\VB.Net\DirectPlay\DXMessenger\Server\</folder>
    <screenshot>vbServer.jpg</screenshot>
    <doc>..\readme.txt</doc>
    <exefolder>Samples\VB.Net\DirectPlay\Bin\</exefolder>
    <exe>vbMessengerServer.exe</exe>
    <projectfile7>MessengerServer.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DXMessenger:  Client</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[This is the client portion of the DXMessenger sample.  The interface allows you to connect to various servers and log in or create new accounts.  Once connected to a server you can add friends and have conversations with friends instantly.]]></description>
    <folder>Samples\C#\DirectPlay\DXMessenger\Client\</folder>
    <screenshot>csClient.jpg</screenshot>
    <doc>..\readme.txt</doc>
    <exefolder>Samples\C#\DirectPlay\Bin\</exefolder>
    <exe>csMessengerClient.exe</exe>
    <projectfile7>Client.sln</projectfile7>
    <language>C#</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>DataRelay</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>ReturnBuffer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>EnhancedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The EnhancedMesh sample shows how to use D3DX to load and enhance a mesh. The mesh is enhanced by increasing the vertex count.]]></description>
    <folder>Samples\C#\Direct3D\Meshes\EnhancedMesh\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csEnhancedMesh.exe</exe>
    <screenshot>EnhancedMesh.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnhancedMesh.sln</projectfile7>
    <language>C#</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ShadowVolume</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>StencilBuffer</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ShadowVolume sample uses stencil buffers to implement real-time shadows.  In the sample, a complex object is rendered and used as a shadow-caster to cast real-time shadows on itself and on the terrain below.  Stencil buffers are a depth buffer technique that can be updated as geometry is rendered, and used again as a mask for drawing more geometry.  Common effects include mirrors, shadows (an advanced technique), dissolves, etc..  Note that not all cards support all features for all the various stencil buffer techniques (some hardware has no, or limited, stencil buffer support).  For more information on stencil buffers, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C#\Direct3D\StencilBuffer\ShadowVolume\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csShadowVolume.exe</exe>
    <screenshot>ShadowVolume.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ShadowVolume.sln</projectfile7>
    <language>C#</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ClipVolume</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The ClipVolume sample demonstrates a technique for using shaders to "subtract" a sphere from an arbitrary model when rendering.  This technique could be useful in visualization applications to see inside complex objects.  The sample also shows how to perform two-sided lighting.]]></description>
    <folder>Samples\C#\Direct3D\ClipVolume\</folder>
    <exefolder>Samples\C#\Direct3D\Bin\</exefolder>
    <exe>csClipVolume.exe</exe>
    <screenshot>ClipVolume.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ClipVolume.sln</projectfile7>
    <language>C#</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BumpUnderWater</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The BumpUnderwater sample demonstrates an underwater effect that can be achieved using bump mapping.  Bump mapping is a texture blending technique used to render the appearance of rough, bumpy surfaces, but can also be used for other effects as shown here.  Note that not all cards support all features for all the various bump mapping techniques (some hardware has no, or limited, bump mapping support).  For more information on bump mapping, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\BumpMapping\BumpUnderWater\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbBumpUnderWater.exe</exe>
    <screenshot>BumpUnderWater.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>BumpUnderWater.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1230</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DotProduct3</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>BumpMapping</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DotProduct3 samples demonstrates an alternative approach to Direct3D bump mapping. This technique is named after the mathematical operation which combines a light vector with a surface normal. The normals for a surface are traditional (x,y,z) vectors stored in RGBA format in a texture map (called anormal map, for this technique).  Not all cards support DotProduct3 blending teture stages, but then not all cards support Direct3D bump mapping.  Refer to the DirectX SDK documentation for more information.]]></description>
    <folder>Samples\VB.Net\Direct3D\BumpMapping\DotProduct3\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbDotProduct3.exe</exe>
    <screenshot>DotProduct3.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>DotProduct3.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1250</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>EnhancedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The EnhancedMesh sample shows how to use D3DX to load and enhance a mesh. The mesh is enhanced by increasing the vertex count.]]></description>
    <folder>Samples\VB.Net\Direct3D\Meshes\EnhancedMesh\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbEnhancedMesh.exe</exe>
    <screenshot>EnhancedMesh.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>EnhancedMesh.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ClipVolume</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The ClipVolume sample demonstrates a technique for using shaders to "subtract" a sphere from an arbitrary model when rendering.  This technique could be useful in visualization applications to see inside complex objects.  The sample also shows how to perform two-sided lighting.]]></description>
    <folder>Samples\VB.Net\Direct3D\ClipVolume\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbClipVolume.exe</exe>
    <screenshot>ClipVolume.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ClipVolume.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VolumeTexture</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The VolumeTexture sample illustrates how to use the new volume textures in Direct3D.  Normally, a texture is thought of as a 2D image, which have a width and a height and whose "texels" are addressed with two coordinate, tu and tv.  Volume textures are the 3D counterparts, with a width, height, and depth, and are addressed with three coordinates, tu, tv, and tw.  Volume textures can be used for interesting effects like patchy fog, explosions, etc.  Note that not all cards support all features for volume textures.  For more information on volume textures, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\VB.Net\Direct3D\VolumeTexture\</folder>
    <exefolder>Samples\VB.Net\Direct3D\Bin\</exefolder>
    <exe>vbVolumeTexture.exe</exe>
    <screenshot>VolumeTexture.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VolumeTexture.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>160</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Texture</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates placing video on a 3D surface.]]></description>
    <folder>Samples\VB.Net\AudioVideo\Texture\</folder>
    <exefolder>Samples\VB.Net\AudioVideo\bin\</exefolder>
    <exe>vbVideoTexture.exe</exe>
    <screenshot>Texture.jpg</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>Texture.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>156</complexity>
  </sample>
  <sample new="true">
    <name>MediaPlayerVisuals</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample is a collection of Windows Media Player visualizations which use Direct3D, along with a supporting common framework class which enables developers to easily create their own Direct3D visualizations. ]]></description>
    <folder>Samples\C++\Direct3D\MediaPlayerVisuals\</folder>
    <screenshot>MediaPlayerVisuals.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/playervisuals.htm</doc>
    <projectfile6>MediaPlayerVisuals.dsw</projectfile6>
    <projectfile7>MediaPlayerVisuals.sln</projectfile7>
    <language>C++</language>
    <complexity>300</complexity>
    <keywords>
      <keyword>Media Player</keyword>
      <keyword>Visualization</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  2: Host</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Host tutorial is the 2nd tutorial for DirectPlay.  It builds upon the last tutorial and adds creation of an Address Object and hosting a session.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut02_Host\</folder>
    <screenshot>Host.gif</screenshot>
    <projectfile7>Tut02_Host.sln</projectfile7>
    <language>C#</language>
    <complexity>20</complexity>
    <keywords>
      <keyword>Host</keyword>
      <keyword>DirectPlayPeer</keyword>
      <keyword>DirectPlayAddress</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  3: FindHosts</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial extends Tutorial 2, and discusses how to find all available hosts.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut03_FindHosts\</folder>
    <screenshot>FindHosts.gif</screenshot>
    <projectfile7>Tut03_FindHosts.sln</projectfile7>
    <language>C#</language>
    <complexity>40</complexity>
    <keywords>
      <keyword>Connect</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  4: Connect</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Connect tutorial is the 4th tutorial for DirectPlay.  It builds upon the last tutorial by adding host enumeration at a given target address]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut04_Connect\</folder>
    <screenshot>Connect.gif</screenshot>
    <projectfile7>Tut04_Connect.sln</projectfile7>
    <language>C#</language>
    <complexity>40</complexity>
    <keywords>
      <keyword>Connect</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  5: Send</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Send tutorial is the 5th tutorial for DirectPlay.  It builds upon the last tutorial and adds a call to the Send method]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut05_Send\</folder>
    <screenshot>Send.gif</screenshot>
    <projectfile7>Tut05_Send.sln</projectfile7>
    <language>C#</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>Send</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  6: HostMigration</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The HostMigration tutorial is the 6th tutorial for DirectPlay.  It builds upon the last tutorial and adds host migration]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut06_HostMigration\</folder>
    <projectfile7>Tut06_HostMigration.sln</projectfile7>
    <language>C#</language>
    <complexity>60</complexity>
    <keywords>
      <keyword>HostMigration</keyword>
      <keyword>migration</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
    <screenshot>HostMigration.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  7: LobbyLaunch</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The LobbyLaunch tutorial is the 7th tutorial for DirectPlay.  It builds upon the last tutorial and adds lobby launching]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut07_LobbyLaunch\</folder>
    <screenshot>LobbyLaunch.gif</screenshot>
    <projectfile7>Tut07_LobbyLaunch.sln</projectfile7>
    <language>C#</language>
    <complexity>70</complexity>
    <keywords>
      <keyword>LobbyLaunch</keyword>
      <keyword>lobby</keyword>
      <keyword>DirectPlayPeer</keyword>
      <keyword>DirectPlayLobbiedApplication</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  8: Voice</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Voice tutorial is the 8th tutorial for DirectPlay.  It builds upon the last tutorial and adds voice support]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut08_Voice\</folder>
    <screenshot>Voice.gif</screenshot>
    <projectfile7>Tut08_Voice.sln</projectfile7>
    <language>C#</language>
    <complexity>80</complexity>
    <keywords>
      <keyword>Voice</keyword>
      <keyword>DirectPlayVoiceClient</keyword>
      <keyword>DirectPlayVoiceServer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  9: Server</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the server portion of the ClientServer tutorial, the 9th tutorial for DirectPlay. It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Server.gif</screenshot>
    <projectfile7>Tut09_ClientServer.sln</projectfile7>
    <language>C#</language>
    <complexity>95</complexity>
    <keywords>
      <keyword>Server</keyword>
      <keyword>ClientServer</keyword>
      <keyword>DirectPlayServer</keyword>
      <keyword>DirectPlayClient</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  9: Client</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the client portion of the ClientServer tutorial, the 9th tutorial for DirectPlay. It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Client.gif</screenshot>
    <projectfile7>Tut09_ClientServer.sln</projectfile7>
    <language>C#</language>
    <complexity>90</complexity>
    <keywords>
      <keyword>Client</keyword>
      <keyword>ClientServer</keyword>
      <keyword>DirectPlayServer</keyword>
      <keyword>DirectPlayClient</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ChatPeer</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[ChatPeer is similar in form to SimplePeer.  Once a player hosts or connects to a session, the players can chat with each other by passing text strings.]]></description>
    <folder>Samples\C#\DirectPlay\ChatPeer\</folder>
    <exefolder>Samples\C#\DirectPlay\Bin\</exefolder>
    <exe>csChatPeer.exe</exe>
    <screenshot>ChatPeer.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ChatPeer.sln</projectfile7>
    <language>C#</language>
    <complexity>210</complexity>
    <keywords>
      <keyword>ChatPeer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  1: GetServiceProviders</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The GetServiceProviders tutorial is the first tutorial for DirectPlay. It initializes DirectPlay and enumerates the available DirectPlay Service Providers.]]></description>
    <folder>Samples\C#\DirectPlay\Tutorials\Tut01_GetServiceProviders\</folder>
    <screenshot>GetServiceProviders.gif</screenshot>
    <projectfile7>Tut01_GetServiceProviders.sln</projectfile7>
    <language>C#</language>
    <complexity>10</complexity>
    <keywords>
      <keyword>GetServiceProviders.sln</keyword>
      <keyword>service</keyword>
      <keyword>provider</keyword>
      <keyword>ServiceProviders</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceConnect</name>
    <dxarea>DirectPlay</dxarea>
    <type>sample</type>
    <description><![CDATA[VoiceConnect shows how to network other players using DirectPlay to start a DirectPlay Voice chat session.  After joining or creating a session, the players may use a computer microphone to talk to one other. Other players may join the game in progress at any time.]]></description>
    <folder>Samples\VB.Net\DirectPlay\VoiceConnect\</folder>
    <exefolder>Samples\VB.Net\DirectPlay\Bin\</exefolder>
    <exe>vbVoiceConnect.exe</exe>
    <screenshot>VoiceConnect.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>VoiceConnect.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>VoiceConnect</keyword>
      <keyword>voice</keyword>
      <keyword>IDirectPlayVoiceClient</keyword>
      <keyword>IDirectPlayVoiceServer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Fur</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Fur sample illustrates how to do real-time fur rendering.]]></description>
    <folder>Samples\C++\Direct3D\Fur\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Fur.exe</exe>
    <doc>::/directx/graphics/tutorialsandsamples/samples/fur.htm</doc>
    <screenshot>Fur.jpg</screenshot>
    <projectfile6>Fur.dsw</projectfile6>
    <projectfile7>Fur.sln</projectfile7>
    <language>C++</language>
    <complexity>2500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionBasic</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ActionBasic sample is intended to be an introduction to action mapping, and illustrates a step by step approach to creating an action mapped application.]]></description>
    <folder>Samples\VB.Net\DirectInput\ActionBasic\</folder>
    <exefolder>Samples\VB.Net\DirectInput\Bin\</exefolder>
    <exe>vbActionBasic.exe</exe>
    <screenshot>ActionBasic.gif</screenshot>
    <projectfile7>ActionBasic.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
    <doc>readme.txt</doc>
  </sample>
  <sample>
    <name>Tutorial  1: GetServiceProviders</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The GetServiceProviders tutorial is the first tutorial for DirectPlay.  It initializes DirectPlay and enumerates the available DirectPlay Service Providers.]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut01_GetServiceProviders\</folder>
    <projectfile7>Tut01_GetServiceProviders.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>10</complexity>
    <keywords>
      <keyword>GetServiceProviders.sln</keyword>
      <keyword>service</keyword>
      <keyword>provider</keyword>
      <keyword>ServiceProviders</keyword>
    </keywords>
    <screenshot>GetServiceProviders.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  2: Host</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Host tutorial is the 2nd tutorial for DirectPlay.  It builds upon the last tutorial and adds creation of an Address Object and hosting a session.]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut02_Host\</folder>
    <projectfile7>Tut02_Host.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>20</complexity>
    <keywords>
      <keyword>Host</keyword>
      <keyword>DirectPlayPeer</keyword>
      <keyword>DirectPlayAddress</keyword>
    </keywords>
    <screenshot>Host.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  3: Find Hosts</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The FindHosts tutorial is the 3nd tutorial for DirectPlay.  It builds upon the last tutorial and adds the finding of hosts at a given target address]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut03_FindHosts\</folder>
    <projectfile7>Tut03_FindHosts.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>30</complexity>
    <keywords>
      <keyword>FindHosts</keyword>
    </keywords>
    <screenshot>FindHosts.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  4: Connect</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Connect tutorial is the 4th tutorial for DirectPlay.  It builds upon the last tutorial by adding host enumeration at a given target address]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut04_Connect\</folder>
    <projectfile7>Tut04_Connect.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>40</complexity>
    <keywords>
      <keyword>Connect</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
    <screenshot>Connect.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  5: Send</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Send tutorial is the 5th tutorial for DirectPlay.  It builds upon the last tutorial and adds a call to the Send method]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut05_Send\</folder>
    <projectfile7>Tut05_Send.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>Send</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
    <screenshot>Send.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  6: HostMigration</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The HostMigration tutorial is the 6th tutorial for DirectPlay.  It builds upon the last tutorial and adds host migration]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut06_HostMigration\</folder>
    <projectfile7>Tut06_HostMigration.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>60</complexity>
    <keywords>
      <keyword>HostMigration</keyword>
      <keyword>migration</keyword>
      <keyword>DirectPlayPeer</keyword>
    </keywords>
    <screenshot>HostMigration.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  7: LobbyLaunch</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The LobbyLaunch tutorial is the 7th tutorial for DirectPlay.  It builds upon the last tutorial and adds lobby launching]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut07_LobbyLaunch\</folder>
    <projectfile7>Tut07_LobbyLaunch.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>70</complexity>
    <keywords>
      <keyword>LobbyLaunch</keyword>
      <keyword>lobby</keyword>
      <keyword>DirectPlayPeer</keyword>
      <keyword>DirectPlayLobbiedApplication</keyword>
    </keywords>
    <screenshot>LobbyLaunch.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  8: Voice</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The Voice tutorial is the 8th tutorial for DirectPlay.  It builds upon the last tutorial and adds voice support]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut08_Voice\</folder>
    <projectfile7>Tut08_Voice.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>80</complexity>
    <keywords>
      <keyword>Voice</keyword>
      <keyword>DirectPlayVoiceClient</keyword>
      <keyword>DirectPlayVoiceServer</keyword>
    </keywords>
    <screenshot>Voice.gif</screenshot>
  </sample>
  <sample>
    <name>Tutorial  9: Server</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the server portion of the ClientServer tutorial, the 9th tutorial for DirectPlay.  It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Server.gif</screenshot>
    <projectfile7>Tut09_ClientServer.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>95</complexity>
    <keywords>
      <keyword>Server</keyword>
      <keyword>ClientServer</keyword>
      <keyword>DirectPlayServer</keyword>
      <keyword>DirectPlayClient</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial  9: Client</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This is the client portion of the ClientServer tutorial, the 9th tutorial for DirectPlay.  It contains two projects which use the client and server interfaces.]]></description>
    <folder>Samples\VB.Net\DirectPlay\Tutorials\Tut09_ClientServer\</folder>
    <screenshot>Client.gif</screenshot>
    <projectfile7>Tut09_ClientServer.sln</projectfile7>
    <language>VB.Net</language>
    <complexity>90</complexity>
    <keywords>
      <keyword>Client</keyword>
      <keyword>ClientServer</keyword>
      <keyword>DirectPlayServer</keyword>
      <keyword>DirectPlayClient</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionBasic</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ActionBasic sample is intended to be an introduction to action mapping, and illustrates a step by step approach to creating an action mapped application.]]></description>
    <folder>Samples\C#\DirectInput\ActionBasic\</folder>
    <exefolder>Samples\C#\DirectInput\Bin\</exefolder>
    <exe>csActionBasic.exe</exe>
    <screenshot>ActionBasic.gif</screenshot>
    <doc>readme.txt</doc>
    <projectfile7>ActionBasic.sln</projectfile7>
    <language>C#</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>NAT Resolver</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The NAT Resolver sample shows how the IDirectPlay8NATResolver interface can be used to implement address resolution for players behind NATs. This interface acts as a simple server which accept queries and reflects the perceived address back to the caller.]]></description>
    <folder>Samples\C++\DirectPlay\NatResolver\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>NatResolver.exe</exe>
    <screenshot>NatResolver.gif</screenshot>
    <doc>::/directx/play/samps/natresolver.htm</doc>
    <projectfile6>NatResolver.dsw</projectfile6>
    <projectfile7>NatResolver.sln</projectfile7>
    <language>C++</language>
    <complexity>400</complexity>
    <keywords>
      <keyword>NatResolver</keyword>
      <keyword>IDirectPlay8NATResolver</keyword>
    </keywords>
  </sample>
  <sample>
    <name>NAT Peer</name>
    <dxarea>DirectPlay</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The NAT Peer sample allows the user to specify the address and optional password of an IDirectPlay8NATResolver server to be used for address resolution during calls to Host, EnumHosts, and Connect.]]></description>
    <folder>Samples\C++\DirectPlay\NatPeer\</folder>
    <exefolder>Samples\C++\DirectPlay\Bin\</exefolder>
    <exe>NatPeer.exe</exe>
    <screenshot>NatPeer.gif</screenshot>
    <doc>::/directx/play/samps/natpeer.htm</doc>
    <projectfile6>NatPeer.dsw</projectfile6>
    <projectfile7>NatPeer.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>NatPeer</keyword>
      <keyword>IDirectPlay8Peer</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 10: ThreadPool</name>
    <dxarea>DirectPlay</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial uses the IDirectPlay8ThreadPool interface to control when and for how long the DirectPlay worker threads are allowed to run.]]></description>
    <folder>Samples\C++\DirectPlay\Tutorials\Tut10_ThreadPool\</folder>
    <screenshot>ThreadPool.gif</screenshot>
    <doc>::/directx/play/tut/tutorial10_threadpool.htm</doc>
    <projectfile6>ThreadPool.dsw</projectfile6>
    <projectfile7>ThreadPool.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>ThreadPool</keyword>
      <keyword>IDirectPlay8ThreadPool</keyword>
      <keyword>IDirectPlay8Peer</keyword>
      <keyword>IDirectPlay8LobbiedApplication</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HDRCubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates cubic environment-mapping with floating-point cube textures and high dynamic range lighting. DirectX 9.0's new floating-point textures can store color values higher than 1.0, which can make lighting effects more realistic on the environment-mapped geometry when the material absorbs part of the light. Note that not all cards support all features for the environment-mapping and high dynamic range lighting techniques.]]></description>
    <folder>Samples\C++\Direct3D\HDRCubeMap\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HDRCubeMap.exe</exe>
    <screenshot>HDRCubeMap.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/HDRCubeMap.htm</doc>
    <projectfile6>HDRCubeMap.dsw</projectfile6>
    <projectfile7>HDRCubeMap.sln</projectfile7>
    <language>C++</language>
    <complexity>1750</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>IDirect3DCubeTexture9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HLSLwithoutEffects</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders written in Microsoft Direct3D's High-Level Shader Language (HLSL). HLSL shaders have C-like syntax and constructs, such as functions, expressions, statements, and data types. A vertex shader looks very similar to a C function, and is executed by the 3D device once per every vertex processed to affect the properties of the vertex.  Note that not all cards may support all the various features vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\HLSLwithoutEffects\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HLSLwithoutEffects.exe</exe>
    <screenshot>HLSLwithoutEffects.jpg</screenshot>
    <doc>::/directx/graphics/tutorialsandsamples/HLSLwithoutEffects.htm</doc>
    <projectfile6>HLSLwithoutEffects.dsw</projectfile6>
    <projectfile7>HLSLwithoutEffects.sln</projectfile7>
    <language>C++</language>
    <complexity>170</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
</samples>