<doc>
  <assembly>
    <name>Microsoft.DirectX.Direct3D</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterInformation">
      <summary>Adapter information.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterInformation.GetWhqlInformation">
      <summary>Retrieve adapter information including Windows Hardware Quality Labs (Whql) information.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Adapter">
      <summary>Retrieves the adapter ordinal assigned to the physical display adapter that was present in the system when the AdapterInformation object was instantiated.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.CurrentDisplayMode">
      <summary>Retrieves information about the current display mode for the current physical display adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.Information">
      <summary>Retrieves information about the physical display adapter that was present in the system when the AdapterInformation object was instantiated.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterInformation.SupportedDisplayModes">
      <summary>Retrieves information about the supported display modes for the current physical display adapter.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterListEnumerator">
      <summary>Collection of adapters.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.GetEnumerator">
      <summary>Gets an enumerator for this collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Count">
      <summary>Gets the number of elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Default">
      <summary>Default adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterListEnumerator.Item(System.Int32)">
      <summary />
      <param name="adapter" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BaseTexture">
      <summary>Manipulates texture resources, including <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> and <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> textures.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.BaseTexture.Disposing">
      <summary>Occurs when the <see cref="E:Microsoft.DirectX.Direct3D.BaseTexture.Disposing" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp">[in, out] Unmanaged Component Object Model (COM) pointer to <B>BaseTexture</B>. This parameter is not supported.</param>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/basetexture.xml">BaseTexture</A> object.</param>
      <param name="pool">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> value that indicates the type of memory storage that the texture uses.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Dispose">
      <summary>Immediately releases the unmanaged resources used by the current object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GenerateMipSubLevels">
      <summary>Generates Also known as MIP map (Latin: multum in parvo, translated as "much in little"). A sequence of textures, each of which is a progressively lower-resolution, prefiltered representation of the same image. A higher-resolution image is used when a visible object is close to the viewer. As the object moves farther away (and gets smaller), lower-resolution images are used. sublevels.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.GetObjectByValue(System.Int32)">
      <summary>Returns an unmanaged Component Object Model (COM)COM pointer based on an identifier. This method is not supported.</summary>
      <param name="objId">Identifier of the object.</param>
      <returns>New copy of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Equality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.op_Inequality(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.BaseTexture" />.<see cref="E:Microsoft.DirectX.Direct3D.BaseTexture.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BaseTexture.SetLevelOfDetail(System.Int32)">
      <summary>Sets the most detailed level of detail (LOD) for a managed texture.</summary>
      <param name="lodNew">[in] Most detailed LOD value to set for the  chain.</param>
      <returns>[in] An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> value, clamped to the maximum LOD value (one less than the total number of levels). Subsequent calls to this method return the maximum value, not the previously set LOD value.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.AutoGenerateFilterType">
      <summary>Retrieves or sets the filter type used for automatically generated  sublevels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelCount">
      <summary>Retrieves the number of texture levels in a multilevel texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BaseTexture.LevelOfDetail">
      <summary>Retrieves or sets the most detailed level of detail (LOD) for a managed texture.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlane">
      <summary>Defines the clipping plane for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.GetSingleArray">
      <summary>Retrieves the coefficients of a user-defined clipping plane for the device.</summary>
      <returns>Returns a four-element array of values that represent the coefficients of the clipping plane, in the form of the general plane equation. See Remarks.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlane.SetSingleArray(System.Single[])">
      <summary>Sets the coefficients of a user-defined clipping plane for the device.</summary>
      <param name="value">[in] A four-element array of values that represent the clipping plane coefficients to set, in the form of the general plane equation. See Remarks.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Enabled">
      <summary>Enables or disables a clipping plane.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlane.Plane">
      <summary>Retrieves or sets the coefficients of a user-defined clipping plane for the device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipPlanes">
      <summary>Contains the clipping planes on the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.DisableAll">
      <summary>Disables all clipping planes on the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipPlanes.EnableAll">
      <summary>Enables all clipping planes that have been set.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipPlanes.Item(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.ClipPlane" /> object referenced by index.</summary>
      <param name="index">Index of the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/clipplane/clipplane.xml">ClipPlane</A> to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingRenderStateException">
      <summary>The currently set render states cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingRenderStateException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException">
      <summary>The current texture filters cannot be used together.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTextureFilterException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException">
      <summary>The current textures cannot be used simultaneously.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ConflictingTexturePaletteException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeTexture">
      <summary>Manipulates a cube texture resource.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace)">
      <summary>Adds a dirty region to a cube texture resource.
	</summary>
      <param name="faceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> value that identifies the face where the dirty region will be added. Omitting the <B>CubeMapFace Rectangle</B> parameter indicates that the dirty region should expand to cover the full face.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a cube texture resource.
	</summary>
      <param name="faceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> value that identifies the face where the dirty region will be added. Omitting the <B>CubeMapFace Rectangle</B> parameter indicates that the dirty region should expand to cover the full face.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that specifies the dirty region.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="edgeLength">[in] Size of the edges of all top-level faces of the cube texture. The pixel dimensions of subsequent levels of each face are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of 1 pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="levels">[in] Number of levels in each face of the cube texture. If this value is 0, Microsoft® Direct3D® generates all cube texture sublevels down to 1x1 pixels for each face, for hardware that supports mipmapped cube textures. To see the number of levels generated, check the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/p/levelcount.xml">BaseTexture.LevelCount</A> property.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> values. It is good practice to match the usage parameter in the <B>CubeTexture</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="format">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumerated type that describes the format of all levels in all faces of the cube texture.</param>
      <param name="pool">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> value that describes the memory class into which the cube texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="lp">[out] Created <A href="/directx/ref/ns/microsoft.directx.direct3d/c/cubetexture/cubetexture.xml">CubeTexture</A>.</param>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="pool">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> value that describes the memory class into which the cube texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetCubeMapSurface(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Retrieves a cube texture map surface.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a mipmapped cube texture.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the returned cube texture map surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a description of one face of a specified cube texture level.</summary>
      <param name="level">[in] Level of a mipmapped cube texture.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/surfacedescription/surfacedescription.xml">SurfaceDescription</A> structure that describes one face of the specified cube texture level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.GetObjectByValue(System.Int32)">
      <summary>Supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <param name="ranks">[in] Array of 1 to 3 <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <param name="ranks">[in] Array of 1 to 3 <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire cube texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="ranks">[in] Array of 1 to 3 <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a cube texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a  cube texture.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> enumerated values that describe the type of lock to perform.</param>
      <param name="ranks">[in] Array of 1 to 3 <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked rectangle.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CubeTexture.UnlockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)">
      <summary>Unlocks a rectangle on a cube texture resource.</summary>
      <param name="faceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/cubemapface/cubemapface.xml">CubeMapFace</A> enumerated type that identifies a cube map face.</param>
      <param name="level">[in] Level of a mipmapped cube texture.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex">
      <summary>Defines various custom fixed-format vertex types.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Device">
      <summary>Performs primitive-based rendering, creates resources, handles system-level variables, adjusts gamma ramp levels, gets and sets palettes, and creates shaders.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceLost">
      <summary>Occurs when a device is about to be lost (for example, immediately prior to a reset).</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceReset">
      <summary>Occurs after a device is reset, allowing an application to re-create all <see cref="F:Microsoft.DirectX.Direct3D.Pool.Pool.Default" /> resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.DeviceResizing">
      <summary>Occurs when a device is resizing, allowing the application to cancel the default handling of the resize.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Device.Disposing">
      <summary>Occurs when the <see cref="E:Microsoft.DirectX.Direct3D.Device.Disposing" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginScene">
      <summary>Begins a scene.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.BeginStateBlock">
      <summary>Signals MicrosoftMicrosoft Direct3DDirect3D to begin recording a device state block.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#cctor">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel">
      <summary>Reports the current cooperative-level status of the MicrosoftMicrosoft Direct3DDirect3D device for a windowed or full-screen application.</summary>
      <returns>Current cooperative-level status of the device for a windowed or full-screen application. A return value of <b>true</b> indicates that the device is operational and that the calling application can continue; a value of <b>false</b> indicates that the device is lost or needs to be reset.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CheckCooperativeLevel(System.Int32@)">
      <summary>Reports the current cooperative-level status of the MicrosoftMicrosoft Direct3DDirect3D device for a windowed or full-screen application.</summary>
      <param name="result">[in, out] Current cooperative-level status of the device for a windowed or full-screen application, reported using a <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml">ResultCode</A> value. A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#Success">Success</A> result indicates that the device is operational and that the calling application can continue. A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#DeviceLost">DeviceLost</A> result indicates that the device is lost but cannot be reset at this time; therefore, rendering is not possible. A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#DeviceNotReset">DeviceNotReset</A> result indicates that the device is lost but can be reset at this time.</param>
      <returns>Current cooperative-level status of the device for a windowed or full-screen application. A return value of <b>true</b> indicates that the device is operational and that the calling application can continue; a value of <b>false</b> indicates that the device is lost or needs to be reset.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32)">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">[in] Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Stencil">ClearFlags.Stencil</A>: Clears the stencil buffer to the value in the <i>Stencil</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Target">ClearFlags.Target</A>: Clears the render target to the color in the <i>Color</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#ZBuffer">ClearFlags.ZBuffer</A>: Clears the depth buffer to the value in the <i>Z</i> parameter.</param>
      <param name="color">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingColorClassTopic.asp">Color</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the color to which the render target surface is cleared.</param>
      <param name="zdepth">[in] New <i>z</i> value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">[in] Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2<i>n</i>-1, where <i>n</i> is the bit depth of the stencil buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Drawing.Color,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">[in] Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Stencil">ClearFlags.Stencil</A>: Clears the stencil buffer to the value in the <i>Stencil</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Target">ClearFlags.Target</A>: Clears the render target to the color in the <i>Color</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#ZBuffer">ClearFlags.ZBuffer</A>: Clears the depth buffer to the value in the <i>Z</i> parameter.</param>
      <param name="color">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingColorClassTopic.asp">Color</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the color to which the render target surface is cleared.</param>
      <param name="zdepth">[in] New <i>z</i> value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">[in] Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2<i>n</i>-1, where <i>n</i> is the bit depth of the stencil buffer.</param>
      <param name="rect">[in] Array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structures that describe the rectangles to clear. To clear the entire surface, set a rectangle to the dimensions of the rendering target. Each rectangle uses screen coordinates that correspond to points on the render target surface. Coordinates are clipped to the bounds of the viewport rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32)">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">[in] Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Stencil">ClearFlags.Stencil</A>: Clears the stencil buffer to the value in the <i>Stencil</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Target">ClearFlags.Target</A>: Clears the render target to the color in the <i>Color</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#ZBuffer">ClearFlags.ZBuffer</A>: Clears the depth buffer to the value in the <i>Z</i> parameter.</param>
      <param name="color">[in] A 32-bit ARGB color value to which the render target surface is cleared.</param>
      <param name="zdepth">[in] New <i>z</i> value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">[in] Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2<i>n</i>-1, where <i>n</i> is the bit depth of the stencil buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Clear(Microsoft.DirectX.Direct3D.ClearFlags,System.Int32,System.Single,System.Int32,System.Drawing.Rectangle[])">
      <summary>Clears the viewport or a set of rectangles in the viewport to a specified RGBA color, clears the depth buffer, and erases the stencil buffer.</summary>
      <param name="flags">[in] Flags that indicate which surfaces to clear. This parameter can be any combination of the following flags, but at least one flag must be used. <P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Stencil">ClearFlags.Stencil</A>: Clears the stencil buffer to the value in the <i>Stencil</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#Target">ClearFlags.Target</A>: Clears the render target to the color in the <i>Color</i> parameter.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/clearflags/clearflags.xml#ZBuffer">ClearFlags.ZBuffer</A>: Clears the depth buffer to the value in the <i>Z</i> parameter.</param>
      <param name="color">[in] A 32-bit ARGB color value to which the render target surface is cleared.</param>
      <param name="zdepth">[in] New <i>z</i> value that this method stores in the depth buffer. This parameter can be in the range of 0.0 through 1.0 (for z-based or w-based depth buffers). A value of 0.0 represents the nearest distance to the viewer; a value of 1.0 represents the farthest distance.</param>
      <param name="stencil">[in] Integer value to store in each stencil-buffer entry. This parameter can be in the range of 0 through 2<i>n</i>-1, where <i>n</i> is the bit depth of the stencil buffer.</param>
      <param name="regions">[in] Array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structures that describe the rectangles to clear. To clear the entire surface, set a rectangle to the dimensions of the rendering target. Each rectangle uses screen coordinates that correspond to points on the render target surface. Coordinates are clipped to the bounds of the viewport rectangle.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Drawing.Color)">
      <summary>Allows an application to fill a rectangular area of a <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> surface with a specified color.</summary>
      <param name="surface">[in] Surface to be filled.</param>
      <param name="rect">[in] Source rectangle. To fill the entire surface, specify <b>null</b>.</param>
      <param name="color">[in] Color used for filling.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ColorFill(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,System.Int32)">
      <summary>Allows an application to fill a rectangular area of a <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> surface with a specified color.</summary>
      <param name="surface">[in] Surface to be filled.</param>
      <param name="rect">[in] Source rectangle. To fill the entire surface, specify <b>null</b>.</param>
      <param name="color">[in] Color used for filling.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a depth stencil resource.</summary>
      <param name="width">[in] Width of the depth stencil surface in pixels.</param>
      <param name="height">[in] Height of the depth stencil surface in pixels.</param>
      <param name="format">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/depthformat/depthformat.xml">DepthFormat</A> enumerated type that describes the format of the depth stencil surface. This value must be one of the enumerated depth stencil formats for the current device.</param>
      <param name="multiSample">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/multisampletype/multisampletype.xml">MultiSampleType</A> enumerated type that describes the multisampling buffer type. This value must be one of the supported multisample types. When this surface is passed to the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/p/depthstencilsurface.xml">Device.DepthStencilSurface</A> property, its multisample type must be the same as that of the render target set by <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/setrendertarget.xml">Device.SetRenderTarget</A>.</param>
      <param name="multiSampleQuality">[in] Quality level. The valid range is between 0 and one less than the level returned by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdevicemultisampletype.xml#param_MultiSampleType_multiSampleType">multiSampleType</A> parameter of the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdevicemultisampletype.xml">Manager.CheckDeviceMultiSampleType</A> method. Passing a larger value results in a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsexception/graphicsexception.xml">GraphicsException</A> with an <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#InvalidCall">InvalidCall</A> value. The <B>multiSampleQuality</B> values of paired render targets, depth stencil surfaces, and the <B>multiSample</B> type must all match.</param>
      <param name="discard">[in] Flag that enables  discarding if set to <b>true</b>; if set to <b>false</b>, z-buffer discarding is not enabled. <P>If this flag is set, the contents of the depth stencil buffer are invalid after <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Device.Present</A> is called or when <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/p/depthstencilsurface.xml">Device.DepthStencilSurface</A> is set with a different depth surface.</P> This flag's behavior is the same as passing the enumerated value <A href="/directx/ref/ns/microsoft.directx.direct3d/e/presentflag/presentflag.xml#DiscardDepthStencil">PresentFlag.DiscardDepthStencil</A> to the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Present</A> method.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> that represents the created depth stencil surface resource.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates an off-screen surface.</summary>
      <param name="width">[in] Width of the surface in pixels.</param>
      <param name="height">[in] Height of the surface in pixels.</param>
      <param name="format">[in] Format of the surface. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A>.</param>
      <param name="pool">[in] Surface pool type. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A>.</param>
      <returns>The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that is created.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)">
      <summary>Creates a render-target surface.</summary>
      <param name="width">[in] Width of the render-target surface in pixels.</param>
      <param name="height">[in] Height of the render-target surface in pixels.</param>
      <param name="format">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumerated type that describes the format of the render target.</param>
      <param name="multiSample">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/multisampletype/multisampletype.xml">MultiSampleType</A> enumerated type that describes the multisampling buffer type. This parameter specifies the antialiasing type for the render target. When this surface is passed to <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/setrendertarget.xml">Device.SetRenderTarget</A>, its multisample type must be the same as that of the depth stencil property <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/p/depthstencilsurface.xml">Device.DepthStencilSurface</A>.</param>
      <param name="multiSampleQuality">[in] Quality level. The valid range is between 0 and one less than the level returned by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdevicemultisampletype.xml#param_Int32R_qualityLevels">param_Int32R_qualityLevels</A> parameter of the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdevicemultisampletype.xml">Manager.CheckDeviceMultiSampleType</A>. Passing a larger value causes an <A href="/directx/ref/ns/microsoft.directx.direct3d/c/invalidcallexception/invalidcallexception.xml">InvalidCallException</A>. The <B>multiSampleQuality</B> values of paired render targets, depth stencil surfaces, and the multisample type must all match.</param>
      <param name="lockable">[in] Render targets are not lockable unless the application specifies <b>true</b>. Note that lockable render targets reduce performance on some graphics hardware.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,System.IntPtr,Microsoft.DirectX.Direct3D.CreateFlags,Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Initializes a new instance of the current class.</summary>
      <param name="adapter">[in] Ordinal number that identifies which physical device the object represents. Device 0 is the default device. The highest value that can be used in this parameter is one less than the total number of physical devices.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumerated type that denotes the desired device type. If the desired device type is not available, the method fails.</param>
      <param name="renderWindowHandle">[in] Handle to a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsFormClassTopic.asp">Form</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />, <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWebUIWebControlsPanelClassTopic.asp">Panel</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />, or any other <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> derived class. This parameter indicates the surface to bind to the device. <P>For full-screen mode, the window specified must be a top-level window.</P><P>For windowed mode, this parameter can be <b>null</b>. If <b>null</b> is specified, a non-<b>null</b> handle must be specified when calling <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Device.Present</A>. This can be done either by setting the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">PresentParameters.DeviceWindow</A> property or by using the optional <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml#param_Control_overrideWindow">param_Control_overrideWindow</A> parameter of the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Device.Present</A> method.</P></param>
      <param name="behaviorFlags">[in] Combination of one or more options that control device creation.</param>
      <param name="presentationParameters">[in, out] Pointer to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A> object that describes the presentation parameters for the device to create. For Microsoft® Windows® 2000 and Microsoft® Windows® XP, the full-screen device display refresh rate is set in the following order. <OL><LI>User-specified nonzero <b>ForcedRefreshRate</b> registry key, if supported by the device.</LI><LI>Application-specified nonzero refresh rate value in the presentation parameter.</LI><LI>Refresh rate of the latest desktop mode, if supported by the device.</LI><LI>75 hertz if supported by the device.</LI><LI>60 hertz if supported by the device.</LI><LI>Device default.</LI></OL> By default, if a refresh rate is unsupported, the closest supported refresh rate below it is used. For example, if the application specifies 63 hertz, 60 hertz is used. No refresh rates below 57 hertz are supported.<P /> Calling this method changes the value of several members of <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>. <UL><LI><A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbuffercount.xml">BackBufferCount</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferwidth.xml">BackBufferWidth</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferheight.xml">BackBufferHeight</A> = 0 for windowed or full-screen mode.</LI><LI><A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferformat.xml">BackBufferFormat</A> = <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml#Unknown">Unknown</A> for windowed mode only. Full-screen mode must specify a format.</LI></UL> If <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml#AdapterGroupDevice">AdapterGroupDevice</A> is set, <B>param_PresentParametersA_presentationParameters</B> is an array. Regardless of the number of heads that exist, only one depth stencil surface is automatically created.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.CreateFlags,Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Initializes a new instance of the current class.</summary>
      <param name="adapter">[in] Ordinal number that identifies which physical device the object represents. Device 0 is the default device. The highest value that can be used in this parameter is one less than the total number of physical devices.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumerated type that denotes the desired device type. If the desired device type is not available, the method fails.</param>
      <param name="renderWindow">[in] Pointer to an unmanaged (or non-Windows form) window handle.</param>
      <param name="behaviorFlags">[in] Combination of one or more options that control device creation.</param>
      <param name="presentationParameters">[in, out] Pointer to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A> object that describes the presentation parameters for the device to create. For Microsoft® Windows® 2000 and Microsoft® Windows® XP, the full-screen device display refresh rate is set in the following order. <OL><LI>User-specified nonzero <b>ForcedRefreshRate</b> registry key, if supported by the device.</LI><LI>Application-specified nonzero refresh rate value in the presentation parameter.</LI><LI>Refresh rate of the latest desktop mode, if supported by the device.</LI><LI>75 hertz if supported by the device.</LI><LI>60 hertz if supported by the device.</LI><LI>Device default.</LI></OL> By default, if a refresh rate is unsupported, the closest supported refresh rate below it is used. For example, if the application specifies 63 hertz, 60 hertz is used. No refresh rates below 57 hertz are supported.<P /> Calling this method changes the value of several members of <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>. <UL><LI><A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbuffercount.xml">BackBufferCount</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferwidth.xml">BackBufferWidth</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferheight.xml">BackBufferHeight</A> = 0 for windowed or full-screen mode.</LI><LI><A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/backbufferformat.xml">BackBufferFormat</A> = <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml#Unknown">Unknown</A> for windowed mode only. Full-screen mode must specify a format.</LI></UL> If <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml#AdapterGroupDevice">AdapterGroupDevice</A> is set, <B>param_PresentParametersA_presentationParameters</B> is an array. Regardless of the number of heads that exist, only one depth stencil surface is automatically created.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the current class.</summary>
      <param name="lp">[in] Pointer to an unmanaged Component Object Model (COM) <b>IDirect3DDevice9</b> interface. This parameter is useful for working with unmanaged applications from managed code. Not supported.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DeletePatch(System.Int32)">
      <summary>Frees a cached high-order patch.</summary>
      <param name="handle">[in] Handle of the cached high-order patch to delete.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Dispose">
      <summary>Immediately releases the unmanaged resources used by the current object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Renders the specified geometric primitive, based on indexing into an array of vertices.</summary>
      <param name="primitiveType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/primitivetype/primitivetype.xml">PrimitiveType</A> enumerated type that describes the type of primitive to render. The <A href="/directx/ref/ns/microsoft.directx.direct3d/e/primitivetype/primitivetype.xml#PointList">PointList</A> constant is not supported with this method. See Remarks.</param>
      <param name="baseVertex">[in] Offset from the start of the index buffer to the first vertex index.</param>
      <param name="minVertexIndex">[in] Minimum vertex index for vertices used during the call.</param>
      <param name="numVertices">[in] Number of vertices used during the call, starting from <B>baseVertex</B> + <B>minVertexIndex</B>.</param>
      <param name="startIndex">[in] Location in the index array at which to start reading vertices.</param>
      <param name="primCount">[in] Number of primitives to render. The number of vertices used is a function of the <B>primitive count</B> and <B>primitive type</B>. To determine the maximum number of primitives allowed, check the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/maxprimitivecount.xml">MaxPrimitiveCount</A> member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A> structure.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawIndexedUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Object,System.Boolean,System.Object)">
      <summary>Renders the specified geometric primitive with data specified by a user memory pointer.</summary>
      <param name="primitiveType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/primitivetype/primitivetype.xml">PrimitiveType</A> enumerated type that describes the type of primitive to render.</param>
      <param name="minVertexIndex">[in] Minimum vertex index, relative to 0 (the start of <B>vertexStreamZeroData</B>), for vertices used during the call.</param>
      <param name="numVertexIndices">[in] Number of vertices used during the call, starting from <B>minVertexIndex</B>.</param>
      <param name="primitiveCount">[in] Number of primitives to render. The number of indices used is a function of the primitive count and primitive type. To determine the maximum number of primitives allowed, check the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/maxprimitivecount.xml">MaxPrimitiveCount</A> member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A> structure.</param>
      <param name="indexData">[in] User memory pointer to the index data.</param>
      <param name="sixteenBitIndices">[in] Value that describes the format of the index data. A value of <b>true</b> indicates 16-bit indices; a value of <b>false</b> indicates 32-bit indices.</param>
      <param name="vertexStreamZeroData">[in] User memory pointer to the vertex data to use for vertex stream 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)">
      <summary>Renders a sequence of non-indexed geometric primitives of the specified type from the current set of data input streams.</summary>
      <param name="primitiveType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/primitivetype/primitivetype.xml">PrimitiveType</A> enumerated type that describes the type of primitive to render.</param>
      <param name="startVertex">[in] Index of the first vertex to load. Beginning at <B>startVertex</B>, the correct number of vertices is read out of the vertex buffer.</param>
      <param name="primitiveCount">[in] Number of primitives to render. To determine the maximum number of primitives allowed, check <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/maxprimitivecount.xml">MaxPrimitiveCount</A>. The <B>primitiveCount</B> is the number of primitives as determined by the primitive type. If it is a line list, each primitive has two vertices. If it is a triangle list, each primitive has three vertices.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.RectanglePatchInformation@)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the rectangular patch to draw.</param>
      <param name="numSegs">A <A href="/directx/ref/ns/microsoft.directx/s/plane/plane.xml">Plane</A> structure. The <A href="/directx/ref/ns/microsoft.directx/s/plane/f/a.xml">A</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/b.xml">B</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/c.xml">C</A> and <A href="/directx/ref/ns/microsoft.directx/s/plane/f/d.xml">D</A> fields identify the number of segments each edge of the rectangle patch should be divided into when tessellated.</param>
      <param name="rectPatchInformation">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/rectanglepatchinformation/rectanglepatchinformation.xml">RectanglePatchInformation</A> structure that describes the rectangular patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.RectanglePatchInformation@)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the rectangular patch to draw.</param>
      <param name="numSegs">[in] Array of four floating-point values that identify the number of segments each edge of the rectangle patch should be divided into when tessellated. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/rectanglepatchinformation/rectanglepatchinformation.xml">RectanglePatchInformation</A>.</param>
      <param name="rectPatchInformation">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/rectanglepatchinformation/rectanglepatchinformation.xml">RectanglePatchInformation</A> structure that describes the rectangular patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the rectangular patch to draw.</param>
      <param name="numSegs">A <A href="/directx/ref/ns/microsoft.directx/s/plane/plane.xml">Plane</A> structure. The <A href="/directx/ref/ns/microsoft.directx/s/plane/f/a.xml">A</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/b.xml">B</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/c.xml">C</A> and <A href="/directx/ref/ns/microsoft.directx/s/plane/f/d.xml">D</A> fields identify the number of segments each edge of the rectangle patch should be divided into when tessellated.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch(System.Int32,System.Single[])">
      <summary>Draws a rectangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the rectangular patch to draw.</param>
      <param name="numSegs">[in] Array of four floating-point values that identify the number of segments each edge of the rectangle patch should be divided into when tessellated. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/rectanglepatchinformation/rectanglepatchinformation.xml">RectanglePatchInformation</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane,Microsoft.DirectX.Direct3D.TrianglePatchInformation@)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the triangular patch to draw.</param>
      <param name="numSegs">A <A href="/directx/ref/ns/microsoft.directx/s/plane/plane.xml">Plane</A> structure. The <A href="/directx/ref/ns/microsoft.directx/s/plane/f/a.xml">A</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/b.xml">B</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/c.xml">C</A>, and <A href="/directx/ref/ns/microsoft.directx/s/plane/f/d.xml">D</A> fields identify the number of segments each edge of the triangle patch should be divided into when tessellated.</param>
      <param name="triPatchInformation">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/trianglepatchinformation/trianglepatchinformation.xml">TrianglePatchInformation</A> structure that describes the triangular high-order patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[],Microsoft.DirectX.Direct3D.TrianglePatchInformation@)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the triangular patch to draw.</param>
      <param name="numSegs">[in] Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/trianglepatchinformation/trianglepatchinformation.xml">TrianglePatchInformation</A>.</param>
      <param name="triPatchInformation">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/trianglepatchinformation/trianglepatchinformation.xml">TrianglePatchInformation</A> structure that describes the triangular high-order patch to draw.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,Microsoft.DirectX.Plane)">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the triangular patch to draw.</param>
      <param name="numSegs">A <A href="/directx/ref/ns/microsoft.directx/s/plane/plane.xml">Plane</A> structure. The <A href="/directx/ref/ns/microsoft.directx/s/plane/f/a.xml">A</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/b.xml">B</A>, <A href="/directx/ref/ns/microsoft.directx/s/plane/f/c.xml">C</A>, and <A href="/directx/ref/ns/microsoft.directx/s/plane/f/d.xml">D</A> fields identify the number of segments each edge of the triangle patch should be divided into when tessellated.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch(System.Int32,System.Single[])">
      <summary>Draws a triangular patch using the currently set streams.</summary>
      <param name="handle">[in] Handle to the triangular patch to draw.</param>
      <param name="numSegs">[in] Pointer to an array of three floating-point values that identify the number of segments each edge of the triangle patch should be divided into when tessellated. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/trianglepatchinformation/trianglepatchinformation.xml">TrianglePatchInformation</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.DrawUserPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Object)">
      <summary>Renders data specified by a user memory pointer as a sequence of geometric primitives of the specified type.</summary>
      <param name="primitiveType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/primitivetype/primitivetype.xml">PrimitiveType</A> enumerated type that describes the type of primitive to render.</param>
      <param name="primitiveCount">[in] Number of primitives to render. To determine the maximum number of primitives allowed, check the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/maxprimitivecount.xml">MaxPrimitiveCount</A> member.</param>
      <param name="vertexStreamZeroData">[in] User memory vertex data to use for vertex stream 0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndScene">
      <summary>Ends a scene that was started by calling the <see cref="M:Microsoft.DirectX.Direct3D.Device.BeginScene" /> method.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EndStateBlock">
      <summary>Signals MicrosoftMicrosoft Direct3DDirect3D to stop recording a device state block and retrieve a pointer to the state block interface.</summary>
      <returns>State block object. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/c/stateblock/stateblock.xml">StateBlock</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.EvictManagedResources">
      <summary>Evicts all managed resources, including MicrosoftMicrosoft Direct3DDirect3D resources and those that are driver-managed.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetBackBuffer(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from a device's A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="swapChain">[in] Unsigned integer that specifies the swap chain.</param>
      <param name="backBuffer">[in] Index of the back buffer object to return.</param>
      <param name="backBufferType">[in] Stereo view is not supported in Microsoft® DirectX® 9.0, so the only valid value for this parameter is <A href="/directx/ref/ns/microsoft.directx.direct3d/e/backbuffertype/backbuffertype.xml#Mono">Mono</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> that represents the returned back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetFrontBufferData(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of a device's front buffer and places it in a system memory buffer provided by the application.</summary>
      <param name="swapChain">[in] Unsigned integer that specifies the <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" G_RID="term_swap_chain"><!--A collection of one or more back buffers that can be serially presented to the front buffer (primary surface).-->swap chain</span>.</param>
      <param name="buffer">[in, out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> class that receives a copy of the front buffer's contents. The data is returned in successive rows with no intervening space, proceeding from the highest vertical row on the device's output to the lowest. <P>For windowed mode, the size of the destination surface should be the desktop size. For full-screen mode, the size of the destination surface should be the screen size.</P></param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetGammaRamp(System.Int32)">
      <summary>Retrieves the gamma correction ramp for the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="swapChain">[in] Unsigned integer that specifies the swap chain.</param>
      <returns>[in, out] Application-supplied <A href="/directx/ref/ns/microsoft.directx.direct3d/s/gammaramp/gammaramp.xml">GammaRamp</A> structure to fill with the gamma correction ramp.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetObjectByValue(System.Int32)">
      <summary>This member supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId">Identifier of the object.</param>
      <returns>New copy of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPaletteEntries(System.Int32)">
      <summary>Retrieves palette entries.</summary>
      <param name="paletteNumber">[in] Ordinal value that identifies the palette to retrieve.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/paletteentry/paletteentry.xml">PaletteEntry</A> structure that represents the returned palette entries.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Retrieves a Boolean shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of <b>Boolean</b> values in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Retrieves an integer shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of four-integer vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetPixelShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Retrieves a floating-point shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of four-float vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRasterStatus(System.Int32)">
      <summary>Returns information that describes the raster of the monitor on which the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface). is presented.</summary>
      <param name="swapChain">[in] Unsigned integer that specifies the swap chain.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/rasterstatus/rasterstatus.xml">RasterStatus</A> structure that contains information about the position or other status of the raster on the monitor driven by this adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTarget(System.Int32)">
      <summary>Retrieves a render target surface.</summary>
      <param name="renderTargetIndex">[in] Index of the render target. See Remarks.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> that represents the returned render target surface for the current device.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetRenderTargetData(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies the render target data from device memory to system memory.</summary>
      <param name="renderTarget">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents a render target.</param>
      <param name="destSurface">[in, out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents a destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSource(System.Int32,System.Int32@,System.Int32@)">
      <summary>Retrieves a vertex buffer bound to the specified data stream.</summary>
      <param name="streamNumber">[in] Number of the data stream, in the range of 0 to the maximum number of streams -1.</param>
      <param name="offsetInBytes">[out] Offset from the beginning of the stream to the beginning of the vertex data, in bytes. See Remarks.</param>
      <param name="stride">[out] Pointer to a returned stride of the component, in bytes. See Remarks.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexbuffer/vertexbuffer.xml">VertexBuffer</A> class that represents the returned vertex buffer bound to the specified data stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetStreamSourceFrequency(System.Int32)">
      <summary>Retrieves the stream source frequency divider value.</summary>
      <param name="streamNumber">[in] Stream source number.</param>
      <returns>Frequency divider value.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetSwapChain(System.Int32)">
      <summary>Retrieves a reference to a A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="swapChain">[in] Swap chain ordinal value. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/numberofadaptersingroup.xml">NumberOfAdaptersInGroup</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/swapchain/swapchain.xml">SwapChain</A> class that receives a copy of the swap chain.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTexture(System.Int32)">
      <summary>Retrieves a Rectangular array of pixels that is applied to a visual object in . assigned to a stage for a device.</summary>
      <param name="stage">[in] Stage identifier of the texture to retrieve. Stage identifiers are zero-based.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/basetexture.xml">BaseTexture</A> class that represents the returned texture.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetTransform(Microsoft.DirectX.Direct3D.TransformType)">
      <summary>Retrieves a matrix that describes a transformation state.</summary>
      <param name="state">[in] Transform that is being retrieved. This parameter can be any member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/transformtype/transformtype.xml">TransformType</A> enumerated type.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> structure that describes the returned transformation state.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderBooleanConstant(System.Int32,System.Int32)">
      <summary>Retrieves a Boolean vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of <b>Boolean</b> values in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderInt32Constant(System.Int32,System.Int32)">
      <summary>Retrieves an integer vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of four-integer vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.GetVertexShaderSingleConstant(System.Int32,System.Int32)">
      <summary>Retrieves a floating-point vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantCount">[in] Number of four-float vectors in the array of constants.</param>
      <returns>Array of constants.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.MultiplyTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Multiplies a device's world, view, or projection matrices by a specified matrix.</summary>
      <param name="state">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/transformtype/transformtype.xml">TransformType</A> enumerated type that identifies which device matrix to modify. The most common setting, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/transformtype/transformtype.xml#World">World</A>, modifies the world matrix, but the view or projection matrices also can be modified.</param>
      <param name="matrix">[in] A <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> structure that modifies the current transformation.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Equality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Returns <b>true</b> if both objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.op_Inequality(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Device)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Returns <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.IntPtr,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">[in] The <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to present.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <param name="sourceRectangle">[in] Value that is set to <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.IntPtr)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. If the rectangle exceeds the source surface, it is clipped to the source surface. This parameter can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle. This parameter can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for this presentation. If this parameter is not used, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">[in] The <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to present.</param>
      <param name="sourceRectangle">[in] Value that is set to <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="rectPresent">[in] The <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to present.</param>
      <param name="overrideWindow">[in] Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <param name="sourceRectangle">[in] Value that is set to <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Windows.Forms.Control)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="overrideWindow">[in] Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the display with the contents of the next buffer in the sequence of back buffers owned by the device.</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. If the rectangle exceeds the source surface, it is clipped to the source surface. This parameter can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle. This parameter can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>.</param>
      <param name="overrideWindow">[in] Pointer to a destination window whose client area is taken as the target for this presentation. If this parameter is omitted, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindow.xml">DeviceWindow</A> is taken.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.</summary>
      <param name="srcStartIndex">[in] Index of first vertex to load.</param>
      <param name="destIndex">[in] Index of first vertex in the destination vertex buffer into which the results are placed.</param>
      <param name="vertexCount">[in] Number of vertices to process.</param>
      <param name="destBuffer">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexbuffer/vertexbuffer.xml">VertexBuffer</A> class; the destination vertex buffer that represents the stream of interleaved vertex data.</param>
      <param name="vertexDeclaration">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexdeclaration/vertexdeclaration.xml">VertexDeclaration</A> class that represents the output vertex data declaration. When vertex shader 3.0 or later is set as the current vertex shader, the output vertex declaration must be present.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices(System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,Microsoft.DirectX.Direct3D.VertexDeclaration,System.Boolean)">
      <summary>Applies the vertex processing defined by the vertex shader to the set of input data streams, generating a single stream of interleaved vertex data to the destination vertex buffer.</summary>
      <param name="srcStartIndex">[in] Index of first vertex to load.</param>
      <param name="destIndex">[in] Index of first vertex in the destination vertex buffer into which the results are placed.</param>
      <param name="vertexCount">[in] Number of vertices to process.</param>
      <param name="destBuffer">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexbuffer/vertexbuffer.xml">VertexBuffer</A> class; the destination vertex buffer that represents the stream of interleaved vertex data.</param>
      <param name="vertexDeclaration">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexdeclaration/vertexdeclaration.xml">VertexDeclaration</A> class that represents the output vertex data declaration. When vertex shader 3.0 or later is set as the current vertex shader, the output vertex declaration must be present.</param>
      <param name="copyData">[in] Processing options. Set this parameter to <b>true</b> for default processing; set it to <b>false</b> to prevent the system from copying vertex data not affected by the vertex operation into the destination buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceLost(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceLost" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceReset(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceReset" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_DeviceResizing(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.DeviceResizing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="E:Microsoft.DirectX.Direct3D.Device.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])">
      <summary>Resets the presentation parameters for the current device.</summary>
      <param name="presentationParameters">[in, out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A> structure that describes the new presentation parameters. This value cannot be <b>null</b>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursor(System.Windows.Forms.Cursor,System.Boolean)">
      <summary>Sets the current cursor.</summary>
      <param name="cursor">Handle to the cursor.</param>
      <param name="addWaterMark">Value that, when set to <b>true</b>, adds small grey characters that read "D3D" to the upper-left corner of the cursor image.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorPosition(System.Int32,System.Int32,System.Boolean)">
      <summary>Sets the cursor position and update options.</summary>
      <param name="positionX">[in] New X-position of the cursor in virtual desktop coordinates. See Remarks.</param>
      <param name="positionY">[in] New Y-position of the cursor in virtual desktop coordinates. See Remarks.</param>
      <param name="updateImmediate">[in] Value that specifies the frequency of cursor updates. If set to <b>true</b>, the system guarantees that the cursor is updated at a minimum of half of the display refresh rate, but never more frequently than the display refresh rate. If set to <b>false</b>, the method delays cursor updates until the next <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Device.Present</A> call. <P>Setting this parameter to <b>false</b> usually results in better performance. However, applications should use <b>true</b> if the rate of calls to <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/present.xml">Present</A> is low enough that users would notice a significant delay in cursor motion. This flag has no effect in an application in windowed mode. Some video cards implement hardware color cursors; this flag does not affect these cards.</P></param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetCursorProperties(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets properties for the cursor.</summary>
      <param name="hotSpotX">[in] X-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="hotSpotY">[in] Y-coordinate offset (in pixels) that marks the center of the cursor. The offset is relative to the upper-left corner of the cursor. When the cursor is given a new position, the image is drawn at an offset from the new position. The offset is determined by subtracting the hot spot coordinates from the position.</param>
      <param name="cursorBitmap">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object. This parameter must be an 8888 ARGB surface (format <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml#A8R8G8B8">A8R8G8B8</A>). The contents of this surface are copied and potentially converted into an internal buffer from which the cursor is displayed. The dimensions of this surface must be less than the dimensions of the display mode, and must be a power of two in each direction, although not necessarily the same power of two. The alpha channel must be either 0.0 or 1.0.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetDialogBoxesEnabled(System.Boolean)">
      <summary>Enables the use of MicrosoftMicrosoft WindowsWindows Graphics Device Interface (GDI)GDI dialog boxes in full-screen applications.</summary>
      <param name="value">[in] Value that is set to <b>true</b> to enable Microsoft® Windows® Graphics Device Interface (GDI) dialog boxes, and <b>false</b> to disable them.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetGammaRamp(System.Int32,System.Boolean,Microsoft.DirectX.Direct3D.GammaRamp)">
      <summary>Sets the gamma correction ramp for the implicit A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="swapChain">[in] Unsigned integer that specifies the swap chain.</param>
      <param name="calibrate">Value that, when set to <b>true</b>, indicates that correction should be applied. A <b>false</b> value indicates that no gamma correction should be applied. The supplied gamma table is transferred directly to the device.</param>
      <param name="ramp">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/gammaramp/gammaramp.xml">GammaRamp</A> structure that represents the gamma correction ramp to set for the implicit swap chain.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPaletteEntries(System.Int32,Microsoft.DirectX.Direct3D.PaletteEntry[])">
      <summary>Sets palette entries.</summary>
      <param name="paletteNumber">[in] Ordinal value that identifies the palette on which the operation is performed.</param>
      <param name="entries">[in] Pointer to a <A href="/directx/ref/ns/microsoft.directx.direct3d/s/paletteentry/paletteentry.xml">PaletteEntry</A> structure that represents the palette entries to set. The number of <A href="/directx/ref/ns/microsoft.directx.direct3d/s/paletteentry/paletteentry.xml">PaletteEntry</A> structures passed into <B>param_PaletteEntryA_entries</B> is assumed to be 256. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets a <see cref="T:System.Boolean" /> shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets an <see cref="T:System.Int32" /> shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Vector4" /> shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Sets a <see cref="T:Microsoft.DirectX.Matrix" /> shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetPixelShaderConstant(System.Int32,System.Single[])">
      <summary>Sets a <see cref="T:System.Single" /> shader constant.</summary>
      <param name="startRegister" />
      <param name="constantData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetRenderTarget(System.Int32,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Sets a new color buffer for a device.</summary>
      <param name="renderTargetIndex">[in] Index of the render target. See Remarks.</param>
      <param name="renderTarget">[in] New color buffer. If set to <b>null</b>, the color buffer for the corresponding <B>renderTargetIndex</B> is disabled. If set to any value other than <b>null</b>, the reference count on the new render target is incremented. Devices must always be associated with a color buffer. <P>The new render-target surface must have at least <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml#RenderTarget">RenderTarget</A> specified.</P></param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream.</summary>
      <param name="streamNumber">[in] Data stream in the range of 0 to the maximum number of streams -1.</param>
      <param name="streamData">[in] Pointer to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexbuffer/vertexbuffer.xml">VertexBuffer</A> class that represents the vertex buffer to bind to the specified data stream.</param>
      <param name="offsetInBytes">[in] Offset from the beginning of the stream to the beginning of the vertex data, in bytes. To determine whether the device supports stream offsets, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/devicecaps/p/supportsstreamoffset.xml">DeviceCaps.SupportsStreamOffset</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSource(System.Int32,Microsoft.DirectX.Direct3D.VertexBuffer,System.Int32,System.Int32)">
      <summary>Binds a vertex buffer to a device data stream.</summary>
      <param name="streamNumber">[in] Data stream in the range of 0 to the maximum number of streams -1.</param>
      <param name="streamData">[in] Pointer to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexbuffer/vertexbuffer.xml">VertexBuffer</A> class that represents the vertex buffer to bind to the specified data stream.</param>
      <param name="offsetInBytes">[in] Offset from the beginning of the stream to the beginning of the vertex data, in bytes. To determine whether the device supports stream offsets, see <A href="/directx/ref/ns/microsoft.directx.direct3d/s/devicecaps/p/supportsstreamoffset.xml">DeviceCaps.SupportsStreamOffset</A>.</param>
      <param name="stride">[in] Stride of the component, in bytes. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetStreamSourceFrequency(System.Int32,System.Int32)">
      <summary>Sets the stream source frequency divider value.</summary>
      <param name="streamNumber">[in] Stream source number.</param>
      <param name="divider">[in] Frequency divider value.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTexture(System.Int32,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Assigns a texture to a device stage.</summary>
      <param name="stage">[in] Index value for the device stage.</param>
      <param name="texture">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/basetexture.xml">BaseTexture</A> object that represents the texture being set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetTransform(Microsoft.DirectX.Direct3D.TransformType,Microsoft.DirectX.Matrix)">
      <summary>Sets a single device transform.</summary>
      <param name="state">[in] Type of transform that is being modified; can be any member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/transformtype/transformtype.xml">TransformType</A> enumerated type.</param>
      <param name="matrix">[in] A <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> structure that modifies the current transform.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A href="/directx/ref/ns/microsoft.directx/s/vector4/vector4.xml">Vector4</A> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Boolean[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemBooleanClassTopic.asp">Boolean</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Int32[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Vector4[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A href="/directx/ref/ns/microsoft.directx/s/vector4/vector4.xml">Vector4</A> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,Microsoft.DirectX.Matrix[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.SetVertexShaderConstant(System.Int32,System.Single[])">
      <summary>Sets a vertex shader constant.</summary>
      <param name="startRegister">[in] Register number that contains the first constant value.</param>
      <param name="constantData">[in] Array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemSingleClassTopic.asp">Single</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> constants.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ShowCursor(System.Boolean)">
      <summary>Displays or hides the cursor.</summary>
      <param name="canShow">[in] Value that determines the cursor's visibility. If set to <b>true</b>, the cursor is shown; if set to <b>false</b>, it is hidden.</param>
      <returns>Value that indicates whether the cursor was previously visible. If set to <b>true</b>, the cursor was visible; if set to <b>false</b>, it was not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.StretchRectangle(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.TextureFilter)">
      <summary>Copies the contents of the source rectangle to the destination rectangle.</summary>
      <param name="sourceSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the source surface.</param>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the source rectangle. If set to <b>null</b>, the entire source surface is used.</param>
      <param name="destSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the destination surface.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the destination rectangle. If set to <b>null</b>, the entire destination surface is used.</param>
      <param name="filter">[in] Filter type. Allowable values are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/texturefilter/texturefilter.xml#None">None</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/texturefilter/texturefilter.xml#Point">Point</A>, or <A href="/directx/ref/ns/microsoft.directx.direct3d/e/texturefilter/texturefilter.xml#Linear">Linear</A>. For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/texturefilter/texturefilter.xml">TextureFilter</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.TestCooperativeLevel">
      <summary>Reports the current cooperative-level status of the MicrosoftMicrosoft Direct3DDirect3D device for a windowed or full-screen application.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the source surface; must point to a surface other than <i>destinationSurface</i>.</param>
      <param name="destinationSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the source surface; must point to a surface other than <i>destinationSurface</i>.</param>
      <param name="destinationSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the destination surface.</param>
      <param name="destPoint">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingPointClassTopic.asp">Point</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the upper-left corner of the destination rectangle. Specifying <b>null</b> for this parameter causes the entire surface to be copied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the source surface; must point to a surface other than <i>destinationSurface</i>.</param>
      <param name="sourceRect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the rectangle on the source surface. Specifying <b>null</b> for this parameter causes the entire surface to be copied.</param>
      <param name="destinationSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the destination surface.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface(Microsoft.DirectX.Direct3D.Surface,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Surface,System.Drawing.Point)">
      <summary>Copies rectangular subsets of pixels from one surface to another.</summary>
      <param name="sourceSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the source surface; must point to a surface other than <i>destinationSurface</i>.</param>
      <param name="sourceRect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the rectangle on the source surface. Specifying <b>null</b> for this parameter causes the entire surface to be copied.</param>
      <param name="destinationSurface">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the destination surface.</param>
      <param name="destPoint">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingPointClassTopic.asp">Point</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that represents the upper-left corner of the destination rectangle. Specifying <b>null</b> for this parameter causes the entire surface to be copied.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)">
      <summary>Updates the dirty portions of a texture.</summary>
      <param name="sourceTexture">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/basetexture.xml">BaseTexture</A> object that represents the source texture, which must be in system memory (<A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml#Pool.SystemMemory">Pool.SystemMemory</A>).</param>
      <param name="destinationTexture">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/basetexture.xml">BaseTexture</A> object that represents the destination texture, which must be in the default memory pool (<A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml#Pool.Default">Pool.Default</A>).</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Device.ValidateDevice">
      <summary>Reports the device's ability to render the current texture-blending operations and arguments in a single pass.</summary>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/validatedeviceparams/validatedeviceparams.xml">ValidateDeviceParams</A> object that provides the number of passes and the result code of the validation check.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.AvailableTextureMemory">
      <summary>Retrieves an estimate of the amount of available texture memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipPlanes">
      <summary>Retrieves the clipping planes on the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ClipStatus">
      <summary>Retrieves or sets a <see cref="T:Microsoft.DirectX.Direct3D.ClipStatus" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CreationParameters">
      <summary>Retrieves the creation parameters of the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.CurrentTexturePalette">
      <summary>Retrieves or sets the current texture palette.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface">
      <summary>Retrieves or sets the depth stencil surface owned by the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DeviceCaps">
      <summary>Retrieves the capabilities of the rendering device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Indices">
      <summary>Retrieves or sets index data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers">
      <summary>Retrieves or sets a value that indicates whether the device should use event handlers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Lights">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Lights" /> collection on the current device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Material">
      <summary>Retrieves or sets the current material properties for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NPatchMode">
      <summary>Retrieves or sets the N-patch mode segments.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.NumberOfSwapChains">
      <summary>Retrieves the number of implicit A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PixelShader">
      <summary>Retrieves or sets the current pixel shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.PresentationParameters">
      <summary>Retrieves presentation parameters for a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RasterStatus">
      <summary>Retrieves information that describes the raster of the monitor on which the swap chain is presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.RenderState">
      <summary>Retrieves a render-state value for a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SamplerState">
      <summary>Retrieves a device's sampler states.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.ScissorRectangle">
      <summary>Retrieves or sets the scissor rectangle.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.SoftwareVertexProcessing">
      <summary>Retrieves or sets the vertex processing mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.TextureState">
      <summary>Retrieves a state value for an assigned texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Transform">
      <summary>Retrieves a matrix that describes a transformation state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexDeclaration">
      <summary>Retrieves or sets a vertex shader declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexFormat">
      <summary>Retrieves or sets the supported flexible vertex formats.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.VertexShader">
      <summary>Retrieves or sets the current vertex shader.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Device.Viewport">
      <summary>Retrieves or sets the viewport parameters for the current device.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceLostException">
      <summary>The device has been lost but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceLostException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceNotResetException">
      <summary>The device has been lost but can be reset at this time.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceNotResetException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayModeEnumerator">
      <summary>A collection of diplay modes.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.GetEnumerator">
      <summary>Gets an enumerator for this collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Count">
      <summary>Gets the number of elements.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayModeEnumerator.Item(Microsoft.DirectX.Direct3D.Format)">
      <summary />
      <param name="f" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInternalErrorException">
      <summary>Internal driver error.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInternalErrorException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverInvalidCallException">
      <summary>The driver reports this method call is invalid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverInvalidCallException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GraphicsException">
      <summary>Base exception type for Graphics. Derives from DirectXException.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsException.GetExceptionFromResultInternal(System.Int32)">
      <summary />
      <param name="resultCode" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GraphicsStream">
      <summary>Contains a graphics data stream.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Close">
      <summary>Closes the current stream and releases any resources associated with it.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.Boolean,System.Boolean)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="dataPointer">[in] Reference to the graphics data in the stream buffer.</param>
      <param name="size">[in] Size of the data referenced by <i>dataPointer</i>.</param>
      <param name="read">[in] Value that indicates whether the buffer is readable.</param>
      <param name="write">[in] Value that indicates whether the buffer is writable.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.#ctor(System.IntPtr,System.Int64,System.IntPtr)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="dataPointer">[in] Reference to the graphics data in the stream buffer.</param>
      <param name="size">[in] Size of the data referenced by <i>dataPointer</i>.</param>
      <param name="bufferPointer">[in] Reference to the actual stream buffer.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the current instance is equal to the specified object; otherwise, it is <b>false</b>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Flush">
      <summary>Not supported.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the current instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Boolean)">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="unicode">[in] Value that indicates whether the graphics stream is Unicode (<b>true</b>) or ASCII (<b>false</b>).</param>
      <returns>A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemStringClassTopic.asp">String</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Type,System.Int32[])">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="returnType">[in] Value that indicates the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> of the returned array.</param>
      <param name="ranks">[in] Value that specifies the number of dimensions with which to create the return array. The maximum number of <i>ranks</i> allowed is three.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> of type <i>returnType</i> that contains the data read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Type)">
      <summary>Reads from the current stream and advances the position within it by the number of bytes read.</summary>
      <param name="returnType">[in] Value that indicates the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> of the returned array.</param>
      <returns>A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemValueTypeClassTopic.asp">ValueType</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> of type <i>returnType</i> that contains the data read from the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</summary>
      <param name="buffer">[in] Reference to a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemByteClassTopic.asp">Byte</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> array that is used as the read buffer.</param>
      <param name="offset">[in] Value that specifies the offset of the data read from <i>buffer</i>.</param>
      <param name="count">[in] Value that specifies the number of bytes to read.</param>
      <returns>Integer that represents the number of bytes read into <i>buffer</i> from the graphics stream.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position within the current stream.</summary>
      <param name="newposition">Value that represents the new position within the stream buffer.</param>
      <param name="origin">Member of the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemIOSeekOriginClassTopic.asp">SeekOrigin</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> enumeration that specifies where to begin seeking.</param>
      <returns>New position within the stream buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.SetLength(System.Int64)">
      <summary>Not supported.</summary>
      <param name="newLength" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.String)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">[in] Reference to a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemStringClassTopic.asp">String</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.String,System.Boolean)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">[in] Reference to a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemStringClassTopic.asp">String</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to write into the stream buffer.</param>
      <param name="unicode">[in] Value that indicates whether the graphics stream is Unicode (<b>true</b>) or ASCII (<b>false</b>).</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.Array)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">[in] Reference to an <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.ValueType)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="value">[in] Value that specifies the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemValueTypeClassTopic.asp">ValueType</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> of the data to write into the stream buffer.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GraphicsStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes to the current stream and advances the current position within it by the number of bytes written.</summary>
      <param name="buffer">[in] Reference to a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemByteClassTopic.asp">Byte</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> array that is used as the write buffer.</param>
      <param name="offset">[in] Value that specifies the offset of the data to write from <i>buffer</i>.</param>
      <param name="count">[in] Value that specifies the number of bytes to write.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanRead">
      <summary>Retrieves a value that indicates whether the current stream supports reading.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanSeek">
      <summary>Retrieves a value that indicates whether the current stream supports seeking.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.CanWrite">
      <summary>Retrieves a value that indicates whether the current stream supports writing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.InternalBuffer">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.InternalData">
      <summary>This internal data member is the direct pointer to the unmanaged memory. It can be used, for example, to glue in unmanaged code that renders to dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.Length">
      <summary>Retrieves the length of the stream in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.GraphicsStream.Position">
      <summary>Retrieves or sets the position within the current stream.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBuffer">
      <summary>Manipulates an index buffer resource.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Created">
      <summary>Occurs after a device is reset and the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> is re-created.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing">
      <summary>Occurs when the <see cref="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the index buffer.</param>
      <param name="sizeOfBufferInBytes">[in] Size of the index buffer in bytes.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>IndexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class into which to place the resource.</param>
      <param name="sixteenBitIndices">Value that is <b>true</b> if the index buffer contains 16-bit indices; <b>false</b> if it contains 32-bit indices.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="lp">[in] An pointer used to interface with unmanaged code. Not supported.</param>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the index buffer.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>IndexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class into which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" /> class.</summary>
      <param name="typeIndexType">[in] Member of the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that indicates the type of index data the buffer holds. This can be a value type or any type that contains only value types.</param>
      <param name="numberIndices">[in] Maximum number of indices the buffer can hold.</param>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the index buffer.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>IndexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class into which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Dispose">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.GetObjectByValue(System.Int32)">
      <summary>Supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <B>sizeToLock</B> and <B>offsetToLock</B> parameters.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverwrite">NoOverwrite</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <B>sizeToLock</B> and <B>offsetToLock</B> parameters.</param>
      <param name="sizeToLock">[in] Size of the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <B>param_Int32_sizeToLock</B> and <B>param_Int32_offsetToLock</B> parameters.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverwrite">NoOverwrite</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of index data and obtains a pointer to the index buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the index data to lock, in bytes. To lock the entire index buffer, specify 0 for the <B>sizeToLock</B> and <B>offsetToLock</B> parameters.</param>
      <param name="typeIndex">A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverwrite">NoOverwrite</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>.</param>
      <param name="ranks">[in] Array of 1 to 3 <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked index buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary>Raises an <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.IndexBuffer.Created" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises an <see cref="T:Microsoft.DirectX.Direct3D.IndexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.IndexBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks, sets, and unlocks a range of vertex data.</summary>
      <param name="data">[in] An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemObjectClassTopic.asp">Object</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to copy into the index buffer.</param>
      <param name="lockAtOffset">[in] Offset to set in the index buffer. To set the entire buffer, set this parameter to 0.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> locking flags that describe the type of lock to perform when setting the buffer. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverWrite">NoOverWrite</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBuffer.Unlock">
      <summary>Unlocks index data.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Description">
      <summary>Retrieves a description of the index buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBuffer.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InterfaceGuid">
      <summary>Various object guids for use with the GetContainer calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.BaseTexture">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.CubeTexture">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Device">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.IndexBuffer">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.PixelShader">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Resource">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.StateBlock">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Surface">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.SwapChain">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexBuffer">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexDeclaration">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VertexShader">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.Volume">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.InterfaceGuid.VolumeTexture">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidCallException">
      <summary>The method call is invalid. For example, a method's parameter may not be valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidCallException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.InvalidDeviceException">
      <summary>The requested device type is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.InvalidDeviceException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Light">
      <summary>Defines a set of lighting properties.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.Commit">
      <summary>Commits any deferred light settings on the specified light.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.FromLight(Microsoft.DirectX.Direct3D.Light)">
      <summary>Creates a new light based on an existing light.</summary>
      <param name="light">Existing light that is used to create the new light.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.GetCommittedData">
      <summary>Fills the current object with light data that has been committed.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Light.ToString">
      <summary>Converts the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object to the default string representation.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Ambient">
      <summary>Retrieves or sets the ambient color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.AmbientColor">
      <summary>Retrieves or sets the ambient color emitted by the light. This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation0">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation1">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Attenuation2">
      <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Deferred">
      <summary>Retrieves or sets a value that indicates whether light data is applied immediately or deferred until the next call to <see cref="M:Microsoft.DirectX.Direct3D.Light.Commit" /> is set to true by default.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Diffuse">
      <summary>Retrieves or sets the diffuse color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.DiffuseColor">
      <summary>Retrieves or sets the diffuse color emitted by the light.  This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Direction">
      <summary>Retrieves or sets the direction in which the light is pointing in world space, as specified by a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Enabled">
      <summary>Retrieves or sets a Boolean value that enables or disables a set of lighting parameters within a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Falloff">
      <summary>Retrieves or sets the decrease in illumination between a spotlight's inner cone (the angle specified by <see cref="P:Microsoft.DirectX.Direct3D.Light.InnerConeAngle" />) and the outer edge of the outer cone (the angle specified by <see cref="P:Microsoft.DirectX.Direct3D.Light.OuterConeAngle" />).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.InnerConeAngle">
      <summary>Retrieves or sets the angle, in radians, of a spotlight's inner cone; that is, the fully illuminated spotlight cone.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.OuterConeAngle">
      <summary>Retrieves or sets the angle, in radians, that defines the outer edge of a spotlight's outer cone.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Position">
      <summary>Retrieves or sets the position of the light in world space, as specified by a <see cref="T:Microsoft.DirectX.Vector3" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Range">
      <summary>Retrieves or sets the distance beyond which the light has no effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Specular">
      <summary>Retrieves or sets the specular color emitted by the light.  This member is a <see cref="T:System.Drawing.Color" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.SpecularColor">
      <summary>Retrieves or sets the specular color emitted by the light.  This member is a <see cref="T:Microsoft.DirectX.Direct3D.ColorValue" /> structure.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.Type">
      <summary>Retrieves or sets the type of the light source.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XDirection">
      <summary>Retrieves or sets an X-axis value that indicates the direction in which the light points.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.XPosition">
      <summary>Retrieves or sets an X-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YDirection">
      <summary>Retrieves or sets a Y-axis value that indicates the direction of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.YPosition">
      <summary>Retrieves or sets a Y-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZDirection">
      <summary>Retrieves or sets a Z-axis value that indicates the direction of the light.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Light.ZPosition">
      <summary>Retrieves or sets a Z-coordinate value that indicates the position of the light.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Lights">
      <summary>Defines a collection of lights.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Lights.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the <see cref="T:Microsoft.DirectX.Direct3D.Lights" />.</summary>
      <returns>An enumerator that can iterate through the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/lights/lights.xml">Lights</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Lights.MoveNext">
      <summary>Advances the enumerator to the next light.</summary>
      <returns>Value that is <b>true</b> if the move to the next item was sucessful; <b>false</b> if it was not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Lights.Reset">
      <summary>Resets the current enumerator to point to the head of the queue.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Lights.Count">
      <summary>Retrieves the number of <see cref="T:Microsoft.DirectX.Direct3D.Light" /> objects in <see cref="T:Microsoft.DirectX.Direct3D.Lights" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Lights.Current">
      <summary>Retrieves the current <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object in the queue.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Lights.Item(System.Int32)">
      <summary>Retrieves a specific <see cref="T:Microsoft.DirectX.Direct3D.Light" /> object using an index value.</summary>
      <param name="index">Index value of the light to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Manager">
      <summary>Provides information about the environment, and enumerates and retrieves device capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a depth stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/depthformat/depthformat.xml">DepthFormat</A> enumeration that identifies the format of the depth stencil surface to be tested.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned. If a depth stencil format is not compatible with the render target in the display mode, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDepthStencilMatch(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a depth stencil format is compatible with a render target format in a particular display mode.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="renderTargetFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the render-target surface to be tested.</param>
      <param name="depthStencilFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/depthformat/depthformat.xml">DepthFormat</A> enumeration that identifies the format of the depth stencil surface to be tested.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned. If a depth stencil format is not compatible with the render target in the display mode, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">[in] Requested usage options for the surface. Usage options are any combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> enumeration values (only a subset of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> values are valid for <B>CheckDeviceFormat</B>). For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A>.</param>
      <param name="resourceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resourcetype/resourcetype.xml">ResourceType</A> requested for use with the queried format.</param>
      <param name="checkFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the surfaces that can be used, as defined by <i>usage</i>.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P /> If the format is not acceptable to the device for this usage, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.<P /> If <i>adapter</i> equals or exceeds the number of display adapters in the system, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.DepthFormat,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">[in] Requested usage options for the surface. Usage options are any combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> enumeration values (only a subset of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> values are valid for <B>CheckDeviceFormat</B>). For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A>.</param>
      <param name="resourceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resourcetype/resourcetype.xml">ResourceType</A> requested for use with the queried format.</param>
      <param name="checkFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the surfaces that can be used, as defined by <i>usage</i>.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P /> If the format is not acceptable to the device for this usage, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.<P /> If <i>adapter</i> equals or exceeds the number of display adapters in the system, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">[in] Requested usage options for the surface. Usage options are any combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> enumeration values (only a subset of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> values are valid for <B>CheckDeviceFormat</B>). For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A>.</param>
      <param name="resourceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resourcetype/resourcetype.xml">ResourceType</A> requested for use with the queried format.</param>
      <param name="checkFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the surfaces that can be used, as defined by <i>usage</i>.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P /> If the format is not acceptable to the device for this usage, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.<P /> If <i>adapter</i> equals or exceeds the number of display adapters in the system, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.ResourceType,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Determines whether a surface format is available as a specified resource type and can be used as a texture, depth stencil buffer, render target, or any combination of the three, on a device representing the current adapter.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter to query. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if this value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <param name="adapterFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the display mode into which the adapter will be placed.</param>
      <param name="usage">[in] Requested usage options for the surface. Usage options are any combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> enumeration values (only a subset of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> values are valid for <B>CheckDeviceFormat</B>). For more information, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A>.</param>
      <param name="resourceType">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resourcetype/resourcetype.xml">ResourceType</A> requested for use with the queried format.</param>
      <param name="checkFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that identifies the format of the surfaces that can be used, as defined by <i>usage</i>.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <returns>Value that is <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P /> If the format is not acceptable to the device for this usage, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.<P /> If <i>adapter</i> equals or exceeds the number of display adapters in the system, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Int32@)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Device type. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration.</param>
      <param name="sourceFormat">[in] Source adapter format. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration.</param>
      <param name="targetFormat">[in] Target adapter format. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <returns>Returns <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.<P /> If the hardware does not support conversion between the two formats, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormatConversion(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format)">
      <summary>Tests a device to determine whether it supports conversion from one display format to another.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Device type. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration.</param>
      <param name="sourceFormat">[in] Source adapter format. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration.</param>
      <param name="targetFormat">[in] Target adapter format. Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration.</param>
      <returns>Returns <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>.<P /> If the hardware does not support conversion between the two formats, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32@,System.Int32@)">
      <summary>Determines whether a multisampling technique is available on the current device.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration.</param>
      <param name="surfaceFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that specifies the format of the surface to be multisampled. See Remarks.</param>
      <param name="windowed">[in] <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemBooleanClassTopic.asp">Boolean</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> value. Specify <b>true</b> to inquire about windowed multisampling, or <b>false</b> to inquire about full-screen multisampling.</param>
      <param name="multiSampleType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/multisampletype/multisampletype.xml">MultiSampleType</A> enumeration that identifies the multisampling technique to test.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <param name="qualityLevels">[out] Number of quality stops available for a given multisample type; can be <b>null</b> if it is not necessary to return the values.</param>
      <returns>Returns <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to one of the following values: <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if the <i>Adapter</i> or <i>MultiSampleType</i> parameters are invalid, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A> if the device does not support the queried multisampling technique, or <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidDevice">ResultCode.InvalidDevice</A> if <i>deviceType</i> does not apply to the adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,System.Boolean,Microsoft.DirectX.Direct3D.MultiSampleType)">
      <summary>Determines whether a multisampling technique is available on the current device.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration.</param>
      <param name="surfaceFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that specifies the format of the surface to be multisampled. See Remarks.</param>
      <param name="windowed">[in] <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemBooleanClassTopic.asp">Boolean</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> value. Specify <b>true</b> to inquire about windowed multisampling, or <b>false</b> to inquire about full-screen multisampling.</param>
      <param name="multiSampleType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/multisampletype/multisampletype.xml">MultiSampleType</A> enumeration that identifies the multisampling technique to test.</param>
      <returns>Returns <b>true</b> if the method succeeds; <b>false</b> if it fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to one of the following values: <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> if the <i>Adapter</i> or <i>MultiSampleType</i> parameters are invalid, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A> if the device does not support the queried multisampling technique, or <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidDevice">ResultCode.InvalidDevice</A> if <i>deviceType</i> does not apply to the adapter.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean)">
      <summary>Specifies whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="checkType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that indicates the device type to check.</param>
      <param name="displayFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that indicates the format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">[in] Back buffer format. For more information about formats, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A>. This value must be one of the render-target formats. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/p/displaymode.xml">DisplayMode</A> can be used to obtain the current format.<P />For windowed applications, the back buffer format does not need to match the display mode format if the hardware supports color conversion. The set of possible back buffer formats is constrained, but the runtime allows any valid back buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.<P />Full-screen applications cannot perform color conversion.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml#Format.Unknown">Format.Unknown</A> is allowed for windowed mode.</param>
      <param name="windowed">[in] Value that indicates whether the device type will be used in full-screen or windowed mode. If set to <b>true</b>, the query is performed for windowed applications; otherwise, this value should be set to <b>false</b>.</param>
      <returns>Returns <b>true</b> if the method succeeds and the device can be used on this adapter; <b>false</b> if the method fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>, provided <i>adapter</i> equals or exceeds the number of display adapters in the system. <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> also is returned if <B>CheckDeviceType</B> specified a device that does not exist.<P />If the requested back buffer format is not supported, or if hardware acceleration is not available for the specified formats, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceType(System.Int32,Microsoft.DirectX.Direct3D.DeviceType,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Format,System.Boolean,System.Int32@)">
      <summary>Specifies whether a hardware-accelerated device type can be used on the current adapter.</summary>
      <param name="adapter">[in] Display adapter ordinal number. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter. This method returns <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> when the value equals or exceeds the number of display adapters in the system.</param>
      <param name="checkType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that indicates the device type to check.</param>
      <param name="displayFormat">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumeration that indicates the format of the adapter display mode for which the device type is being checked. For example, some devices operate only in modes of 16 bits per pixel.</param>
      <param name="backBufferFormat">[in] Back buffer format. For more information about formats, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A>. This value must be one of the render-target formats. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/p/displaymode.xml">DisplayMode</A> can be used to obtain the current format.<P />For windowed applications, the back buffer format does not need to match the display mode format if the hardware supports color conversion. The set of possible back buffer formats is constrained, but the runtime allows any valid back buffer format to be presented to any desktop format. Additionally, the device must be operable in desktop mode because devices typically do not operate in modes of 8 bits per pixel.<P />Full-screen applications cannot perform color conversion.<P /><A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml#Format.Unknown">Format.Unknown</A> is allowed for windowed mode.</param>
      <param name="windowed">[in] Value that indicates whether the device type will be used in full-screen or windowed mode. If set to <b>true</b>, the query is performed for windowed applications; otherwise, this value should be set to <b>false</b>.</param>
      <param name="result">[out] <b>HRESULT</b> code passed back from the method.</param>
      <returns>Returns <b>true</b> if the method succeeds and the device can be used on this adapter; <b>false</b> if the method fails. Check the <i>result</i> parameter for the <b>HRESULT</b> code returned.<P />If the method fails, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A>, provided <i>adapter</i> equals or exceeds the number of display adapters in the system. <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.InvalidCall">ResultCode.InvalidCall</A> also is returned if <B>CheckDeviceType</B> specified a device that does not exist.<P />If the requested back buffer format is not supported, or if hardware acceleration is not available for the specified formats, <i>result</i> is set to <A href="/directx/ref/ns/microsoft.directx.direct3d/e/resultcode/resultcode.xml#ResultCode.NotAvailable">ResultCode.NotAvailable</A>.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetAdapterMonitor(System.Int32)">
      <summary>Returns the handle of the monitor associated with the MicrosoftMicrosoft Direct3DDirect3D object.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter.</param>
      <returns>Handle of the monitor associated with the Microsoft® Direct3D® object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetDeviceCaps(System.Int32,Microsoft.DirectX.Direct3D.DeviceType)">
      <summary>Retrieves information specific to a device.</summary>
      <param name="adapter">[in] Ordinal number that denotes the display adapter. <A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/adapterlistenumerator.xml">AdapterListEnumerator</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/adapterlistenumerator/p/default.xml">Default</A> is always the primary display adapter.</param>
      <param name="deviceType">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/devicetype/devicetype.xml">DeviceType</A> enumeration that identifies the device type.</param>
      <returns>If the method succeeds, the return value is a <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A> object that contains information that describes the device's capabilities.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the current instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Equality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary>Compares the current instance of the class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if both objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Manager.op_Inequality(Microsoft.DirectX.Direct3D.Manager,Microsoft.DirectX.Direct3D.Manager)">
      <summary>Compares the current instance of the class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if both objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Manager.Adapters">
      <summary>Collection of adapters on the system.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MoreDataException">
      <summary>There is more data available than the specified buffer size can hold.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MoreDataException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotAvailableException">
      <summary>This device does not support the queried technique.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotAvailableException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.NotFoundException">
      <summary>The requested item was not found.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.NotFoundException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException">
      <summary>Direct3D does not have enough display memory to perform the operation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.OutOfVideoMemoryException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShader">
      <summary>Encapsulates the functionality of a pixel shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.PixelShader.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.PixelShader.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the class.</summary>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="functionToken">[in] Integer array representing the pixel shader function tokens that specify the blending operations.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="functionToken">[in] Reference to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the pixel shader function tokens to use.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="lp">[in] Pointer to the unmanaged Component Object Model (COM) interface, <b>IDirect3DPixelShader9</b>, which allows unmanaged COM clients to create an instance of the managed pixel shader class. Not supported.</param>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by an object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetFunction">
      <summary>Retrieves an array that contains the shader data.</summary>
      <returns>Array that contains the shader data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId">Identifier of the object.</param>
      <returns>New copy of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Equality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.op_Inequality(Microsoft.DirectX.Direct3D.PixelShader,Microsoft.DirectX.Direct3D.PixelShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.PixelShader" />.<see cref="E:Microsoft.DirectX.Direct3D.PixelShader.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Device">
      <summary>Retrieves the MicrosoftMicrosoft Direct3DDirect3D device associated with a pixel shader object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShader.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentParameters">
      <summary>Describes the presentation parameters.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentParameters.DefaultPresentRate">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.Clone">
      <summary>Clones, or copies, a <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> object.</summary>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemObjectClassTopic.asp">Object</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the copied device.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.#ctor(Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> class.</summary>
      <param name="original">A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A> object from which to create the new object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PresentParameters.ToString">
      <summary>Returns a default string representation of the object.</summary>
      <returns>Default string representation of the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.AutoDepthStencilFormat">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.DepthFormat" /> of the depth stencil surface the device creates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferCount">
      <summary>Retrieves or sets the number of back buffers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferFormat">
      <summary>Retrieves or sets the format of the back buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferHeight">
      <summary>Retrieves or sets the height of a swap chain's back buffers, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.BackBufferWidth">
      <summary>Retrieves or sets the width of a swap chain's back buffers, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindow">
      <summary>Retrieves or sets the display window.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.DeviceWindowHandle">
      <summary>Retrieves or sets the display window.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.EnableAutoDepthStencil">
      <summary>Retrieves or sets a Boolean value that indicates whether MicrosoftMicrosoft Direct3DDirect3D manages depth buffers for an application.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.ForceNoMultiThreadedFlag">
      <summary>Retrieves or sets a Boolean value that indicates whether an application can use multithreading.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.FullScreenRefreshRateInHz">
      <summary>Retrieves or sets the rate at which the display adapter refreshes the screen.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSample">
      <summary>Retrieves or sets the <see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.MultiSampleQuality">
      <summary>Retrieves or sets the multisample quality level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval">
      <summary>Retrieves or sets the maximum rate at which the swap chain's back buffers can be presented.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentFlag">
      <summary>Retrieves or sets the present flag.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.SwapEffect">
      <summary>Retrieves or sets the swap effect.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PresentParameters.Windowed">
      <summary>Boolean value that indicates whether an application is running in a windowed mode.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Query">
      <summary />
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Query.Disposing">
      <summary>Occurs when the Dispose method has been called or when the object has been finalized and collected by the .NET runtime's garbage collector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.QueryType)">
      <summary />
      <param name="device" />
      <param name="queryType" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary />
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Dispose">
      <summary />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Equals(System.Object)">
      <summary />
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Finalize">
      <summary />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetEventData(System.Boolean)">
      <summary />
      <param name="flush" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetHashCode">
      <summary />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetObjectByValue(System.Int32)">
      <summary />
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetOcclusionData(System.Boolean)">
      <summary />
      <param name="flush" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetResourceManagerData(System.Boolean)">
      <summary />
      <param name="flush" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetVertexCacheData(System.Boolean)">
      <summary />
      <param name="flush" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.GetVertexStatsData(System.Boolean)">
      <summary />
      <param name="flush" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.Issue(Microsoft.DirectX.Direct3D.IssueFlags)">
      <summary />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.op_Equality(Microsoft.DirectX.Direct3D.Query,Microsoft.DirectX.Direct3D.Query)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.op_Inequality(Microsoft.DirectX.Direct3D.Query,Microsoft.DirectX.Direct3D.Query)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Query.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.Device">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.Disposed">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Query.QueryType">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderStates">
      <summary>Defines device render states.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderStates.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderStates.FromRenderState(Microsoft.DirectX.Direct3D.RenderStates)">
      <summary>Sets new device render states from a <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> object.</summary>
      <param name="newState">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A> object that contains the new device render states to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RenderStates.ToString">
      <summary>Converts the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> object to the default string representation.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateW">
      <summary>Amount to adaptively tessellate in the w direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateX">
      <summary>Amount to adaptively tessellate in the x direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateY">
      <summary>Amount to adaptively tessellate in the y direction. The default value is 0.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AdaptiveTessellateZ">
      <summary>Amount to adaptively tessellate in the z direction. The default value is 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendEnable">
      <summary>Retrieves or sets a value to enable Method for combining two images that uses both pixel colors and alpha values to determine the color of the resulting pixel. This allows an image to be rendered on top of another image, with a blend of both images showing. When blending two pixels, the color components of both pixels are first scaled by their alpha values. Then, the bottom pixel is scaled by the inverse of the top pixel alpha value and added to the top pixel to form the final blended color. transparency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendOperation">
      <summary>Retrieves or sets a value to select the arithmetic operation applied to separate Method for combining two images that uses both pixel colors and alpha values to determine the color of the resulting pixel. This allows an image to be rendered on top of another image, with a blend of both images showing. When blending two pixels, the color components of both pixels are first scaled by their alpha values. Then, the bottom pixel is scaled by the inverse of the top pixel alpha value and added to the top pixel to form the final blended color. when the render state, <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.SeparateAlphaBlendEnabled.RenderStates.SeparateAlphaBlendEnabled" />, is set to true.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaDestinationBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination Algorithm used to determine how a texture is blended with the colors of the surface to which the texture is applied..  This value is ignored unless <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.SeparateAlphaBlendEnabled.RenderStates.SeparateAlphaBlendEnabled" /> is true. The default value is <see cref="F:Microsoft.DirectX.Direct3D.Blend.Blend.Zero" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaFunction">
      <summary>Retrieves or sets the comparison function for the alpha test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaSourceBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the source Algorithm used to determine how a texture is blended with the colors of the surface to which the texture is applied..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaTestEnable">
      <summary>Retrieves or sets a render state that enables a per-pixel alpha test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Ambient">
      <summary>Retrieves or sets the ambient light color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AmbientMaterialSource">
      <summary>Retrieves or sets the ambient color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.AntiAliasedLineEnable">
      <summary>Retrieves or sets antialiasing of lines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.BlendFactor">
      <summary>Retrieves or sets a <see cref="T:System.Drawing.Color" /> object to use for a constant blend factor during alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.BlendOperation">
      <summary>Retrieves or sets a value used to select the arithmetic operation to apply when the Method for combining two images that uses both pixel colors and alpha values to determine the color of the resulting pixel. This allows an image to be rendered on top of another image, with a blend of both images showing. When blending two pixels, the color components of both pixels are first scaled by their alpha values. Then, the bottom pixel is scaled by the inverse of the top pixel alpha value and added to the top pixel to form the final blended color. render state, <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.AlphaBlendEnable.RenderStates.AlphaBlendEnable" />, is set to true.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Clipping">
      <summary>Retrieves or sets a value to enable primitive clipping by MicrosoftMicrosoft Direct3DDirect3D.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorVertex">
      <summary>Retrieves or sets a value to enable or disable per-vertex color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable">
      <summary>Retrieves or sets a value that enables a per-channel write for the render target color buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable1">
      <summary>Retrieves or sets additional <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable.RenderStates.ColorWriteEnable" /> values for devices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable2">
      <summary>Retrieves or sets additional <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable.RenderStates.ColorWriteEnable" /> values for devices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable3">
      <summary>Retrieves or sets additional <see cref="F:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable.RenderStates.ColorWriteEnable" /> values for devices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilFail">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform if the counterclockwise (CCW) stencil test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilFunction">
      <summary>Retrieves or sets the comparison function used by the counterclockwise (CCW) stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilPass">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform if both the counterclockwise (CCW) stencil z-tests pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilZBufferFail">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.StencilOperation" /> or sets it to perform if the counterclockwise (CCW) stencil test passes and the z-test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.CullMode">
      <summary>Specifies how back-facing triangles are culled, if at all.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DebugMonitorTokenEnabled">
      <summary>Enables or disables the debug monitor token.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DepthBias">
      <summary>Sets or retrieves the depth bias for polygons.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DestinationBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration that represents the destination Algorithm used to determine how a texture is blended with the colors of the surface to which the texture is applied..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DiffuseMaterialSource">
      <summary>Retrieves or sets the diffuse color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.DitherEnable">
      <summary>Enables or disables Method to display a range of colors with a limited palette. Each pixel on the source image is represented by multiple pixels (usually a 2x2 square) on the destination image. From a distance, the eye blends the multiple pixels into one color that has more shades than the original palette. The technique results in a better visual appearance than the removal of low precision bits. See a standard graphics reference for details. Dithering is a supported option by DXSurface and  objects..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.EmissiveMaterialSource">
      <summary>Retrieves or sets the Material property that determines whether a material emits light. The emissive property of a material is one of two properties that determines how the material reflects light. See also "specular property." color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.EnableAdaptiveTessellation">
      <summary>Enables or disables adaptive tessellation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FillMode">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.FillMode" /> enumeration that represents the fill mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogColor">
      <summary>Retrieves or sets the fog color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogDensity">
      <summary>Retrieves or sets the fog density for pixel or vertex fog used in exponential fog modes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogEnable">
      <summary>Enables or disables fog blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogEnd">
      <summary>Retrieves or sets the depth at which pixel or vertex fog effects end for linear fog mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogStart">
      <summary>Retrieves or sets the depth at which pixel or vertex fog effects begin for linear fog mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogTableMode">
      <summary>Retrieves or sets the fog formula to use for pixel fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.FogVertexMode">
      <summary>Retrieves or sets the fog formula to use for vertex fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.IndexedVertexBlendEnable">
      <summary>Enables or disables indexed vertex blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.LastPixel">
      <summary>Enables or disables drawing of the last pixel in a line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Lighting">
      <summary>Enables or disables MicrosoftMicrosoft Direct3DDirect3D lighting.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.LocalViewer">
      <summary>Specifies whether to use camera-relative specular highlights or orthogonal specular highlights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MaxTessellationLevel">
      <summary>Retrieves or sets the maximum tessellation level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MinTessellationLevel">
      <summary>Retrieves or sets the minimum tessellation level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MultiSampleAntiAlias">
      <summary>Determines how individual samples are computed when using a multisample render target buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.MultiSampleMask">
      <summary>Retrieves or sets a render state that enables use of a multisample buffer as an accumulation buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.NormalDegree">
      <summary>Retrieves or sets the degree of interpolation (linear, cubic, quadratic, or quintic) using the N-patch normal.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.NormalizeNormals">
      <summary>Enables or disables automatic normalization of vertex normals.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PatchEdgeStyle">
      <summary>Retrieves or sets the tessellation mode for patch edges.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleA">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleB">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleC">
      <summary>Controls the distance-based size attenuation for point primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointScaleEnable">
      <summary>Controls how the computation of size for point sprites is handled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSize">
      <summary>Specifies the size to use for point size computation in cases in which point size is not specified for each vertex.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSizeMax">
      <summary>Specifies the maximum size to which point sprites can be set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSizeMin">
      <summary>Specifies the minimum size to which point sprites can be set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PointSpriteEnable">
      <summary>Controls how point sprites are rendered.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.PositionDegree">
      <summary>Retrieves or sets the N-patch position interpolation degree.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.RangeFogEnable">
      <summary>Retrieves or sets enabling of range-based vertex fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ReferenceAlpha">
      <summary>Specifies a reference alpha value against which pixels are tested when alpha testing is enabled.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ReferenceStencil">
      <summary>Specifies a reference value to use for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ScissorTestEnable">
      <summary>Enables or disables scissor testing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SeparateAlphaBlendEnabled">
      <summary>Enables or disables the separate Algorithm used to determine how a texture is blended with the colors of the surface to which the texture is applied. for the Opacity of an image defined by an alpha value per pixel interleaved with the color components (for example, ARGB), an alpha value per pixel stored in a separate alpha surface, or a constant alpha value for the entire surface..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ShadeMode">
      <summary>Contains one or more members of the <see cref="T:Microsoft.DirectX.Direct3D.ShadeMode" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SlopeScaleDepthBias">
      <summary>Retrieves or sets a value used to determine how much bias can be applied to coplanar primitives to reduce Shimmering appearance on 3-D primitives that results from a poor separation of z values when doing decaling. Some pixels from the back texture are rendered onto the front texture and vice versa..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SourceBlend">
      <summary>Contains a member of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SpecularEnable">
      <summary>Retrieves or sets a render state that enables specular highlights.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.SpecularMaterialSource">
      <summary>Retrieves or sets the specular color source for lighting calculations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilEnable">
      <summary>Retrieves or sets stencil enabling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilFail">
      <summary>Retrieves or sets the stencil operation to perform if the stencil test fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilFunction">
      <summary>Retrieves or sets the comparison function for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilMask">
      <summary>Retrieves or sets the mask applied to the reference value and each stencil buffer entry to determine the significant bits for the stencil test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilPass">
      <summary>Retrieves or sets the stencil operation to perform if both the stencil test and the depth test (z-test) pass.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilWriteMask">
      <summary>Retrieves or sets the write mask applied to values written into the stencil buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.StencilZBufferFail">
      <summary>Retrieves or sets the stencil operation to perform if the stencil test passes and the depth test (z-test) fails.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TextureFactor">
      <summary>Retrieves or sets the color used for multiple-Technique of combining the colors of a texture with the colors of the surface to which the texture is applied. with the <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureArgument.TFactor" /> texture blending argument or the <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.TextureOperation.BlendFactorAlpha" /> texture blending operation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TweenFactor">
      <summary>Retrieves or sets a floating-point value that controls the tween factor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.TwoSidedStencilMode">
      <summary>Enables or disables two-sided stenciling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.UseWBuffer">
      <summary>Enables or disables w-buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.VertexBlend">
      <summary>Retrieves or sets the number of matrices to use to perform geometry blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap0">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap1">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap10">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap11">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap12">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap13">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap14">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap15">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap2">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap3">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap4">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap5">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap6">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap7">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap8">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap9">
      <summary>Retrieves or sets the texture-wrapping behavior for multiple sets of texture coordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferEnable">
      <summary>Enables or disables depth buffering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferFunction">
      <summary>Retrieves or sets the comparison function for the z-buffer test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferWriteEnable">
      <summary>Enables or disables writing to the depth buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Resource">
      <summary>Queries and prepares resources.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with the current resource.</summary>
      <param name="guidData">[in] Represents a globally unique identifier (GUID) that identifies the private data to free.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with a resource to a buffer.</summary>
      <param name="guidData">[in] Represents a globally unique identifier (GUID) that identifies the private data to retrieve.</param>
      <returns>Returns an array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemByteClassTopic.asp#bytes">bytes</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the requested private data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Equality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if both objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.op_Inequality(Microsoft.DirectX.Direct3D.Resource,Microsoft.DirectX.Direct3D.Resource)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.PreLoad">
      <summary>Preloads a managed resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPriority(System.Int32)">
      <summary>Assigns the resource-management priority for the current resource.</summary>
      <param name="priorityNew">[in] New resource-management priority for the resource.</param>
      <returns>Previous priority value for the resource.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Resource.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the resource that is intended for use by the application. Data is passed by value, and multiple sets of data can be associated with a single resource.</summary>
      <param name="guidData">[in] Represents a globally unique identifier (GUID) that identifies the private data to set.</param>
      <param name="privateData">[in] Returns an array of <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemByteClassTopic.asp#bytes">bytes</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the private data to associate with the resource.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Device">
      <summary>Retrieves the device associated with a resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Priority">
      <summary>Retrieves or sets the priority for the current resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Resource.Type">
      <summary>Retrieves the type of a resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Sampler">
      <summary>Defines the sampler state types.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sampler.#ctor">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sampler.FromSamplerState(Microsoft.DirectX.Direct3D.Sampler)">
      <summary />
      <param name="newState" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Sampler.ToString">
      <summary />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressU">
      <summary>Retrieves or sets the texture-address mode for the u-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressV">
      <summary>Retrieves or sets the texture-address mode for the v-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.AddressW">
      <summary>Retrieves or sets the texture-address mode for the w-coordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.BorderColor">
      <summary>Retrieves or sets the border color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.DMapOffset">
      <summary>Retrieves or sets the vertex offset in the presampled displacement map.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.ElementIndex">
      <summary>Retrieves or sets the element index to use when a multielement texture is assigned to the sampler.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MagFilter">
      <summary>Retrieves or sets a magnification filter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MaxAnisotropy">
      <summary>Retrieves or sets the maximum anisotropy.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MaxMipLevel">
      <summary>Retrieves or sets the level of detail (LOD)LOD index of the largest map to use.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MinFilter">
      <summary>Retrieves or sets a minification filter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MipFilter">
      <summary>Retrieves or sets a mipmap filter to use during minification.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.MipMapLevelOfDetailBias">
      <summary>Retrieves or sets the mipmap level of detail (LOD)LOD bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Sampler.SrgbTexture">
      <summary>Retrieves or sets the gamma correction value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SamplerStates">
      <summary>Sampler states for the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SamplerStates.SamplerState(System.Int32)">
      <summary />
      <param name="index" />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlock">
      <summary>An encapsulation of render states.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.StateBlock.Disposing">
      <summary>Occurs when the Dispose method has been called or when the object has been finalized and collected by the .NET runtime's garbage collector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Apply">
      <summary>Apply the state block to the current device state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Capture">
      <summary>Capture the device's current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.StateBlockType)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="stateBlockType" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Equality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.op_Inequality(Microsoft.DirectX.Direct3D.StateBlock,Microsoft.DirectX.Direct3D.StateBlock)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StateBlock.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Device">
      <summary>Retrieves the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StateBlock.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Surface">
      <summary>Queries and prepares surfaces.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Surface.Disposing">
      <summary>Occurs when the Dispose method has been called or when the object has been finalized and collected by the .NET runtime's garbage collector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="device" />
      <param name="image" />
      <param name="pool" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.#ctor(System.IntPtr,System.Object)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Create a surface from a .NET bitmap object.</summary>
      <param name="device" />
      <param name="image" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Create a surface from a .NET stream object.</summary>
      <param name="device" />
      <param name="data" />
      <param name="pool" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetContainer(System.Guid)">
      <summary>Provides access to the parent cube texture or texture (mipmap) object, if this surface is a child level of a cube texture or a mipmap. This method can also provide access to the parent swap chain if the surface is a back-buffer child.</summary>
      <param name="interfaceID" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetGraphics">
      <summary>Retrieves a device context.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags" />
      <param name="pitch" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="rect" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="rect" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="pitch" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="rect" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a surface.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.ReleaseGraphics">
      <summary>Release a device context handle.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Surface.UnlockRectangle">
      <summary>Unlocks a rectangle on a surface.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Description">
      <summary>Retrieves a description of the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Surface.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapChain">
      <summary>Manipulates a swap chain.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.SwapChain.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.PresentParameters)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object that represents the device to associate with the swap chain.</param>
      <param name="presentationParameters">[in, out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A> object that contains the presentation parameters for the new swap chain. See Remarks.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" /> class.</summary>
      <param name="lp">Unmanaged pointer. Not supported.</param>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object that represents the device to associate with the swap chain.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Dispose">
      <summary>Immediately releases the unmanaged resources used by the current object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetBackBuffer(System.Int32,Microsoft.DirectX.Direct3D.BackBufferType)">
      <summary>Retrieves a back buffer from the swap chain of a device.</summary>
      <param name="backBuffer">[in] Index of the back buffer object to return. See Remarks.</param>
      <param name="typeBuffer">[in] Because stereo view is not supported in Microsoft® DirectX® 9.0, the only valid value for this parameter is <A href="/directx/ref/ns/microsoft.directx.direct3d/e/backbuffertype/backbuffertype.xml#Mono">Mono</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the returned back buffer surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetFrontBufferData(Microsoft.DirectX.Direct3D.Surface)">
      <summary>Generates a copy of the swap chain's front buffer and places it in a <see cref="T:Microsoft.DirectX.Direct3D.Surface" /> object provided by the application.</summary>
      <param name="frontBuffer">[in, out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that receives a copy of the swap chain's front buffer. The data is returned in successive rows with no intervening space, from the vertically highest row to the lowest.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.GetObjectByValue(System.Int32)">
      <summary>This member supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Equality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.op_Inequality(Microsoft.DirectX.Direct3D.SwapChain,Microsoft.DirectX.Direct3D.SwapChain)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.IntPtr,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.IntPtr,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.Control)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.IntPtr,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.IntPtr)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Drawing.Rectangle,System.IntPtr)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="sourceRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="destRectangle">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the destination rectangle in window client coordinates. This value can be used only if the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">SwapEffect.Copy</A>. If the value is omitted, the entire client area is filled. If the rectangle exceeds the destination client area, it is clipped to fit.</param>
      <param name="overrideWindowHandle">[in] Destination window whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Drawing.Rectangle,System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present,System.Boolean)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="rectPresent">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that contains the source rectangle. This value must be omitted unless the swap chain was created with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/swapeffect/swapeffect.xml#Copy">Copy</A>. If the value is omitted, the entire source surface is presented. If the rectangle exceeds the source surface, it is clipped to fit.</param>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <param name="sourceRectangle">[in] Value that is <b>true</b> if a <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> is being passed to the <B>rectPresent</B> parameter.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(System.Windows.Forms.Control,Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="overrideWindow">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemWindowsFormsControlClassTopic.asp">Control</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object whose client area is taken as the target for the current presentation. If this parameter is omitted, the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/presentparameters.xml">PresentParameters</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/presentparameters/p/devicewindowhandle.xml">DeviceWindowHandle</A> member is used.</param>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.Present(Microsoft.DirectX.Direct3D.Present)">
      <summary>Presents the contents of the next buffer in the sequence of back buffers owned by the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
      <param name="flags">[in] Allows the application to request that the method return immediately when the driver reports that it cannot schedule a presentation. Valid values are 0, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#DoNotWait">Present.DoNotWait</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/present/present.xml#LinearContent">Present.LinearContent</A> or a combination of these values. See Remarks.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SwapChain.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" />.<see cref="E:Microsoft.DirectX.Direct3D.SwapChain.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Device">
      <summary>Retrieves the device associated with a swap chain.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.DisplayMode">
      <summary>Retrieves the display mode's spatial resolution, color resolution, and refresh frequency.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.PresentParamters">
      <summary>Retrieves the presentation parameters associated with a A collection of one or more back buffers that can be serially presented to the front buffer (primary surface)..</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SwapChain.RasterStatus">
      <summary>Returns information that describes the raster of the monitor on which the A collection of one or more back buffers that can be serially presented to the front buffer (primary surface). is presented.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Texture">
      <summary>Manipulates a texture resource.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle">
      <summary>Adds a dirty region to a texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.AddDirtyRectangle(System.Drawing.Rectangle)">
      <summary>Adds a dirty region to a texture resource.</summary>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> structure that specifies the dirty region to add.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>.</param>
      <param name="data">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemIOStreamClassTopic.asp">Stream</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that contains the image data. The texture is created with the data in the stream.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> constants. It is good practice to match the usage parameter with the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml">CreateFlags</A> in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>.</param>
      <param name="image">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingBitmapClassTopic.asp">Bitmap</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> used to create the texture.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> constants. It is good practice to match the usage parameter with the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml">CreateFlags</A> in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>.</param>
      <param name="width">[in] Width of the texture's top level, in pixels. The pixel dimensions of subsequent levels are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of one pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="height">[in] Height of the texture's top level, in pixels. The pixel dimensions of subsequent levels are the truncated value of half of the previous level's pixel dimension (independently). Each dimension clamps at a size of one pixel. Thus, if the division by 2 results in 0, 1 is taken instead.</param>
      <param name="numLevels">[in] Number of levels in the texture. If this is 0, Microsoft® Direct3D® generates all texture sublevels down to 1 by 1 pixels for hardware that supports mipmapped textures. Check the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/p/levelcount.xml">BaseTexture.LevelCount</A> parameter to see the number of levels generated.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> constants. It is good practice to match the usage parameter with the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml">CreateFlags</A> in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor.</param>
      <param name="format">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumerated type that describes the format of all levels in the texture.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.Texture" /> class.</summary>
      <param name="lp">[in, out] Unmanaged Component Object Model (COM) pointer to the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>. This parameter is not supported.</param>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromBitmap(Microsoft.DirectX.Direct3D.Device,System.Drawing.Bitmap,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a bitmap.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A>.</param>
      <param name="image">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingBitmapClassTopic.asp">Bitmap</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> used to create the texture.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> constants. It is good practice to match the usage parameter with the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml">CreateFlags</A> in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.FromStream(Microsoft.DirectX.Direct3D.Device,System.IO.Stream,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a texture resource from a stream object.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A> object.</param>
      <param name="data">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemIOStreamClassTopic.asp">Stream</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> used to create the texture.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> constants. It is good practice to match the usage parameter with the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/createflags/createflags.xml">CreateFlags</A> in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the texture should be placed.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texture/texture.xml">Texture</A> object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a texture resource.</summary>
      <param name="level">[in] Level of the texture resource. This method returns a surface description for the level specified by this parameter.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/surfacedescription/surfacedescription.xml">SurfaceDescription</A> structure that describes the returned level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetObjectByValue(System.Int32)">
      <summary>Retrieves an unmanaged Component Object Model (COM)COM pointer by identifier. This method is not supported.</summary>
      <param name="objId">Identifier of the object.</param>
      <returns>New copy of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.GetSurfaceLevel(System.Int32)">
      <summary>Retrieves the specified texture surface level.</summary>
      <param name="level">[in] Level of the texture resource. This method returns a surface for the level specified by this parameter. The top-level surface is denoted by 0.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/surface/surface.xml">Surface</A> object that represents the returned surface.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32@,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="pitch">[in] Pitch of the returning data.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,System.Drawing.Rectangle,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="rect">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemDrawingRectangleClassTopic.asp">Rectangle</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> to lock. To expand the dirty region to cover the entire texture, omit this parameter.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.LockRectangle(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a rectangle on a texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] A  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Equality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Returns <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.op_Inequality(Microsoft.DirectX.Direct3D.Texture,Microsoft.DirectX.Direct3D.Texture)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Returns <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Texture.UnlockRectangle(System.Int32)">
      <summary>Unlocks a rectangle on a texture resource.</summary>
      <param name="level">[in] Level of the texture resource to unlock.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureState">
      <summary>Defines texture states for the current device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureState.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureState.FromTextureState(Microsoft.DirectX.Direct3D.TextureState)">
      <summary>Sets a new texture stage state.</summary>
      <param name="newState">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texturestate/texturestate.xml">TextureState</A> object that represents the new texture stage state to set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureState.ToString">
      <summary>Converts the <see cref="T:Microsoft.DirectX.Direct3D.TextureState" /> object to the default string representation.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument0">
      <summary>Defines settings for the alpha channel selector operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument1">
      <summary>Defines the texture-stage state as the first alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument2">
      <summary>Defines the texture-stage state as the second alpha argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.AlphaOperation">
      <summary>Defines the texture-stage state as a texture alpha-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentLuminanceOffset">
      <summary>Defines a floating-point offset value for bump-map luminance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentLuminanceScale">
      <summary>Defines a floating-point scale value for bump-map luminance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial00">
      <summary>Defines the texture-stage state as a floating-point value for the [0][0] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial01">
      <summary>Defines the texture-stage state as a floating-point value for the [0][1] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial10">
      <summary>Defines the texture-stage state as a floating-point value for the [1][0] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.BumpEnvironmentMaterial11">
      <summary>Defines the texture-stage state as a floating-point value for the [1][1] coefficient in a bump-mapping matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument0">
      <summary>Defines settings for the third color operand for triadic (multiply, add, and linear interpolation) operations identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument1">
      <summary>Defines the texture-stage state as the first color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument2">
      <summary>Defines the texture-stage state as the second color argument for the stage identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation">
      <summary>Defines the texture-stage state as a texture color-blending operation identified by the <see cref="T:Microsoft.DirectX.Direct3D.TextureOperation" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ConstantColor">
      <summary>Defines the per-stage constant color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.ResultArgument">
      <summary>Selects the destination register for the result of the current stage identified by <see cref="T:Microsoft.DirectX.Direct3D.TextureArgument" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.TextureCoordinateIndex">
      <summary>Defines the index of the texture coordinate set to use with the current texture stage.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureState.TextureTransform">
      <summary>Controls the transformation of texture coordinates for the current texture stage.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureStates">
      <summary>Contains the texture states on a device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureStates.TextureState(System.Int32)">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.TextureState" /> object referenced by index.</summary>
      <param name="index">Index of <A href="/directx/ref/ns/microsoft.directx.direct3d/c/texturestate/texturestate.xml">TextureState</A> to retrieve.</param>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TooManyOperationsException">
      <summary>The application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TooManyOperationsException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Transforms">
      <summary>Allows applications to specify and obtain matrix transformations; for example, the world, view, and transformation matrices used for MicrosoftMicrosoft Direct3DDirect3D object rendering.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.FromTransforms(Microsoft.DirectX.Direct3D.Transforms)">
      <summary>Sets all of the properties of one <see cref="T:Microsoft.DirectX.Direct3D.Transforms" /> to the properties of another <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.</summary>
      <param name="newState">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/transforms/transforms.xml">Transforms</A> object whose properties are set to the desired values.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.GetWorldMatrixByIndex(System.Int32)">
      <summary>Retrieves a world matrix transform by its index.</summary>
      <param name="index">[in] Value between 0 and 255 that indicates the index of the world matrix to retrieve.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)">
      <summary>Sets the world matrix by its index.</summary>
      <param name="index">[in] Value between 0 and 255 that indicates the index of the world matrix to set.</param>
      <param name="value">[in] A <A href="/directx/ref/ns/microsoft.directx/s/matrix/matrix.xml">Matrix</A> value to which the specified world matrix is set.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Transforms.ToString">
      <summary>Converts a <see cref="T:Microsoft.DirectX.Direct3D.Transforms" /> object to the default string representation.</summary>
      <returns>String that represents the object.</returns>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Projection">
      <summary>Retrieves or sets the projection transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture0">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture0" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture1">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture1" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture2">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture2" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture3">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture3" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture4">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture4" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture5">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture5" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture6">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture6" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.Texture7">
      <summary>Retrieves or sets the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.Texture7" /> transformation <see cref="T:Microsoft.DirectX.Matrix" />.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.View">
      <summary>Retrieves or sets the view transformation matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World">
      <summary>Retrieves or sets the first world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World1">
      <summary>Retrieves or sets the second world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World2">
      <summary>Retrieves or sets the third world matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Transforms.World3">
      <summary>Retrieves or sets the fourth world matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException">
      <summary>The device does not support a specified texture-blending argument for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaArgumentException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException">
      <summary>The device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedAlphaOperationException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException">
      <summary>The device does not support a specified texture-blending argument for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorArgumentException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException">
      <summary>The device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedColorOperationException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException">
      <summary>The device does not support the specified texture factor value. Not used; provided only to support older drivers.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedFactorValueException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException">
      <summary>The device does not support the specified texture filter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.UnsupportedTextureFilterException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBuffer">
      <summary>Manipulates vertex buffer resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Created">
      <summary>Occurs after a device is reset and the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> is re-created.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexBuffer.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexBuffer.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the vertex buffer.</param>
      <param name="sizeOfBufferInBytes">[in] Size of the vertex buffer in bytes. If <B>vertexFormat</B> is set to 0, <B>sizeOfBufferInBytes</B> must be large enough to contain at least one vertex, but it need not be a multiple of the vertex size. If <B>vertexFormat</B> is not set to 0, <B>sizeOfBufferInBytes</B> is not validated. See Remarks.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>VertexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="vertexFormat">[in] Combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="typeVertexType">[in] Member of the <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> enumerated type that indicates the type of vertex data the buffer holds. This can be a value type or any type that contains only value types.</param>
      <param name="numVerts">[in] Maximum number of vertices the buffer can hold.</param>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the vertex buffer.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>VertexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="vertexFormat">[in] Combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Usage,Microsoft.DirectX.Direct3D.VertexFormats,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" /> class.</summary>
      <param name="lp">[in] Returns an unmanaged Component Object Model (COM) pointer to the object. This parameter is not supported.</param>
      <param name="device">The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the vertex buffer.</param>
      <param name="usage">[in] Usage can be 0, which indicates no usage value. However, if usage is desired, use a combination of one or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml">Usage</A> flags. It is good practice to match the <B>param_Usage_usage</B> parameter in the <B>VertexBuffer</B> constructor with the behavior flags in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/ctor.xml">Device</A> constructor. See Remarks.</param>
      <param name="vertexFormat">[in] Combination of <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that describe the vertex format of the vertices in the buffer.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes a valid memory class in which to place the resource.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Dispose">
      <summary>Immediately releases the unmanaged resources used by the current object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.GetObjectByValue(System.Int32)">
      <summary>This member supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <B>sizeToLock</B> and <B>offsetToLock</B>.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverWrite">NoOverWrite</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <B>sizeToLock</B> and <B>offsetToLock</B>.</param>
      <param name="sizeToLock">[in] Size of the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <B>param_Int32_sizeToLock</B> and <B>param_Int32_offsetToLock</B>.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverWrite">NoOverWrite</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Lock(System.Int32,System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a range of vertex data and obtains the vertex buffer memory.</summary>
      <param name="offsetToLock">[in] Offset into the vertex data to lock, in bytes. To lock the entire vertex buffer, specify 0 for both <B>sizeToLock</B> and <B>offsetToLock</B>.</param>
      <param name="typeVertex">A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of array data to return. This can be a value type or any type that contains only value types.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverWrite">NoOverWrite</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that represents the locked vertex buffer.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Created(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.VertexBuffer.Created" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.VertexBuffer" />.<see cref="E:Microsoft.DirectX.Direct3D.VertexBuffer.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.SetData(System.Object,System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks, sets, and unlocks a range of vertex data.</summary>
      <param name="data">[in] An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemObjectClassTopic.asp">Object</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> that contains the data to copy into the vertex buffer. This can be any value type or any type that contains only value types.</param>
      <param name="lockAtOffset">[in] Offset in the vertex buffer to set. To set the entire buffer, set this parameter to 0.</param>
      <param name="flags">[in] Zero or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A> locking flags that describe the type of lock to perform when setting the buffer. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoOverWrite">NoOverWrite</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBuffer.Unlock">
      <summary>Unlocks vertex data.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Description">
      <summary>Retrieves a description of the vertex buffer resource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBuffer.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexDeclaration">
      <summary>Encapsulates the vertex shader declaration.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.VertexElement[])">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="device">[in] The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexdeclaration/vertexdeclaration.xml">VertexDeclaration</A>.</param>
      <param name="vertexElements">[in] Array of <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> flags that make up a vertex shader declaration. The array must end with the value in the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/f/vertexdeclarationend.xml#VertexElement.VertexDeclarationEnd">VertexElement.VertexDeclarationEnd</A> field.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="device">[in] The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexdeclaration/vertexdeclaration.xml">VertexDeclaration</A>.</param>
      <param name="vertexElements">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object containing <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> flags that make up a vertex shader declaration.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" /> class.</summary>
      <param name="lp">[in, out] Unmanaged Component Object Model (COM) pointer. This parameter is not supported.</param>
      <param name="device">[in] The <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/vertexdeclaration/vertexdeclaration.xml">VertexDeclaration</A>.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Dispose">
      <summary>Immediately releases the unmanaged resources used by the current object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare">Object with which to make the comparison.</param>
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetDeclaration">
      <summary>Gets the vertex shader declaration.</summary>
      <returns>Array of vertex elements that make up a vertex shader declaration. The array ends with the value in the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/f/vertexdeclarationend.xml">VertexDeclarationEnd</A> field.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.GetObjectByValue(System.Int32)">
      <summary>Retrieves an unmanaged Component Object Model (COM)COM pointer. Not supported.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Equality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.op_Inequality(Microsoft.DirectX.Direct3D.VertexDeclaration,Microsoft.DirectX.Direct3D.VertexDeclaration)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexDeclaration.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.VertexDeclaration" />.<see cref="E:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Device">
      <summary>Retrieves the <see cref="T:Microsoft.DirectX.Direct3D.Device" /> used to create the current vertex declaration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexDeclaration.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShader">
      <summary>Encapsulates the functionality of a vertex shader.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.VertexShader.Disposing">
      <summary>Occurs when the <see cref="M:Microsoft.DirectX.Direct3D.VertexShader.Dispose" /> method is called or when the object is finalized and collected by the garbage collector of the MicrosoftMicrosoft .NET.NETcommon language runtime.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.GraphicsStream)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="functionToken">[in] Reference to a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that represents the vertex shader function tokens to use.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32[])">
      <summary>Initializes a new instance of the class.</summary>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
      <param name="functionToken">[in] Integer array representing the vertex shader function tokens that specify the blending operations.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device)">
      <summary>Initializes a new instance of the class.</summary>
      <param name="interfaceDefinition">[in] Pointer to the unmanaged Component Object Model (COM) interface, <b>IDirect3DPixelShader9</b>, which allows unmanaged COM clients to create an instance of the managed vertex shader class. Not supported.</param>
      <param name="device">[in] Reference to an instance of a <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Dispose">
      <summary>Immediately releases the unmanaged resources used by an object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns>Value that is <b>true</b> if the instance is equal to the specified object; <b>false</b> if it is not.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.Finalize">
      <summary>Called during garbage collection. If implemented, allows an object to free resources before it is destroyed by the garbage collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetFunction">
      <summary>Retrieves an array that contains shader data.</summary>
      <returns>Array that contains the shader data.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetHashCode">
      <summary>Returns the hash code for the current instance.</summary>
      <returns>Hash code for the instance.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.GetObjectByValue(System.Int32)">
      <summary>This member supports the MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code infrastructure and is not intended to be used directly from code.</summary>
      <param name="objId">Identifier of the object.</param>
      <returns>New copy of the object.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Equality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are the same.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are the same; <b>false</b> if they are different.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.op_Inequality(Microsoft.DirectX.Direct3D.VertexShader,Microsoft.DirectX.Direct3D.VertexShader)">
      <summary>Compares the current instance of a class to another instance to determine whether they are different.</summary>
      <param name="left" />
      <param name="right" />
      <returns>Value that is <b>true</b> if the objects are different; <b>false</b> if they are the same.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShader.raise_Disposing(System.Object,System.EventArgs)">
      <summary>Raises a <see cref="T:Microsoft.DirectX.Direct3D.VertexShader" />.<see cref="E:Microsoft.DirectX.Direct3D.VertexShader.Disposing" /> event when called from within a derived class.</summary>
      <param name="i1">Invoking object reference; should be <i>this</i> object.</param>
      <param name="i2">Arguments to pass into the event handler.</param>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Device">
      <summary>Retrieves the MicrosoftMicrosoft Direct3DDirect3D device associated with a vertex shader object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShader.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexTextureCoordinate">
      <summary>Constructs bit patterns that are used to identify texture coordinate formats in a flexible vertex format description.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size1(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-1 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">[in] Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size2">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-2 formats within a flexible vertex format description.</summary>
      <returns>One or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size3(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-3 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">[in] Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexTextureCoordinate.Size4(System.Int32)">
      <summary>Constructs bit patterns that are used to identify texture coordinate size-4 formats within a flexible vertex format description.</summary>
      <param name="coordIndex">[in] Value that identifies the texture coordinate set to which the texture coordinate size (1-, 2-, 3-, or 4-dimensional) applies.</param>
      <returns>One or more <A href="/directx/ref/ns/microsoft.directx.direct3d/e/vertexformats/vertexformats.xml">VertexFormats</A> flags that indicate the texture coordinate.</returns>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Volume">
      <summary>Applications use the methods and properties of the <see cref="T:Microsoft.DirectX.Direct3D.Volume" /> class to manipulate volume resources.</summary>
    </member>
    <member name="E:Microsoft.DirectX.Direct3D.Volume.Disposing">
      <summary>Occurs when the Dispose method has been called or when the object has been finalized and collected by the .NET runtime's garbage collector.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.VolumeTexture)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="lp" />
      <param name="device" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.FreePrivateData(System.Guid)">
      <summary>Frees the specified private data associated with this volume.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetContainer(System.Guid)">
      <summary>Provides access to the parent volume texture object, if this surface is a child level of a volume texture.</summary>
      <param name="interfaceID" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.GetPrivateData(System.Guid)">
      <summary>Copies the private data associated with the volume to a provided buffer.</summary>
      <param name="guidData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags" />
      <param name="lockedVolume" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="box" />
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume resource.</summary>
      <param name="flags" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="box" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="lockedVolume" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="box" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.LockBox(System.Type,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume resource.</summary>
      <param name="typeLock" />
      <param name="flags" />
      <param name="ranks" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.SetPrivateData(System.Guid,System.Byte[])">
      <summary>Associates data with the volume that is intended for use by the application, not by .</summary>
      <param name="guidData" />
      <param name="privateData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Volume.UnlockBox">
      <summary>Unlocks a box on a volume resource.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Description">
      <summary>Retrieves a description of the volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Device">
      <summary>Retrieves the device associated with a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Volume.Disposed">
      <summary>Retrieves a value that is true if the object is disposed; otherwise the value is false.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeTexture">
      <summary>Manipulates a volume texture resource.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox(Microsoft.DirectX.Direct3D.Box)">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <param name="box">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/box/box.xml">Box</A> structure that specifies the dirty region to add. Omitting this parameter expands the dirty region to cover the entire volume texture.</param>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.AddDirtyBox">
      <summary>Adds a dirty region to a volume texture resource.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(Microsoft.DirectX.Direct3D.Device,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/volumetexture/volumetexture.xml">VolumeTexture</A> object.</param>
      <param name="width">[in] Width of the top level of the volume texture, in pixels. This value must be a power of two if the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/texturecaps/p/supportsvolumemappower2.xml">TextureCaps.SupportsVolumeMapPower2</A> member is set. See Remarks.</param>
      <param name="height">[in] Height of the top level of the volume texture, in pixels. This value must be a power of two if the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/texturecaps/p/supportsvolumemappower2.xml">TextureCaps.SupportsVolumeMapPower2</A> member is set. See Remarks.</param>
      <param name="depth">[in] Depth of the top level of the volume texture, in pixels. This value must be a power of two if the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/caps.xml">Caps</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/s/texturecaps/p/supportsvolumemappower2.xml">TextureCaps.SupportsVolumeMapPower2</A> member is set. See Remarks.</param>
      <param name="numLevels">[in] Number of levels in the texture. If this value is 0, Microsoft® Direct3D® generates all texture sublevels down to 1x1 pixels for hardware that supports mipmapped volume textures. Check the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/basetexture/p/levelcount.xml">BaseTexture.LevelCount</A> parameter for the number of levels generated.</param>
      <param name="format">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/format/format.xml">Format</A> enumerated type that describes the format of all levels in the volume texture.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the volume texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.#ctor(System.IntPtr,Microsoft.DirectX.Direct3D.Device,Microsoft.DirectX.Direct3D.Pool)">
      <summary>Creates a new instance of the <see cref="T:Microsoft.DirectX.Direct3D.VolumeTexture" /> class.</summary>
      <param name="lp">[in] Unmanaged Component Object Model (COM) pointer to the object. This parameter is not supported.</param>
      <param name="device">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A> object to associate with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/volumetexture/volumetexture.xml">VolumeTexture</A> object.</param>
      <param name="pool">[in] Member of the <A href="/directx/ref/ns/microsoft.directx.direct3d/e/pool/pool.xml">Pool</A> enumerated type that describes the memory class into which the volume texture should be placed.</param>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetLevelDescription(System.Int32)">
      <summary>Retrieves a level description of a volume texture resource.</summary>
      <param name="level">[in] Value that identifies a level of the volume texture resource.</param>
      <returns>[out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/volumedescription/volumedescription.xml">VolumeDescription</A> structure that describes the returned volume texture level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetObjectByValue(System.Int32)">
      <summary>Returns an unmanaged Component Object Model (COM)COM pointer. This method is not supported.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.GetVolumeLevel(System.Int32)">
      <summary>Retrieves the specified volume texture level.</summary>
      <param name="level">[in] Value that identifies a level of the volume texture resource.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/volume/volume.xml">Volume</A> object that represents the returned volume level.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/box/box.xml">Box</A> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="lockedVolume">[out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/lockedbox/lockedbox.xml">LockedBox</A> structure that describes the locked region.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="lockedVolume">[out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/lockedbox/lockedbox.xml">LockedBox</A> structure that describes the locked region.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/box/box.xml">Box</A> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Int32,Microsoft.DirectX.Direct3D.LockFlags)">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <returns>A <A href="/directx/ref/ns/microsoft.directx.direct3d/c/graphicsstream/graphicsstream.xml">GraphicsStream</A> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/box/box.xml">Box</A> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="lockedVolume">[out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/lockedbox/lockedbox.xml">LockedBox</A> structure that describes the locked region.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,Microsoft.DirectX.Direct3D.LockedBox@,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="lockedVolume">[out] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/lockedbox/lockedbox.xml">LockedBox</A> structure that describes the locked region.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.Box,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="box">[in] A <A href="/directx/ref/ns/microsoft.directx.direct3d/s/box/box.xml">Box</A> structure that indicates the region to lock. Omitting this parameter locks the entire volume level.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.LockBox(System.Type,System.Int32,Microsoft.DirectX.Direct3D.LockFlags,System.Int32[])">
      <summary>Locks a box on a volume texture resource.</summary>
      <param name="typeLock">[in] A <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemTypeClassTopic.asp">Type</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that indicates the type of data to return. This can be a value type or any type that contains only value types.</param>
      <param name="level">[in] Value that specifies a  level of the texture resource to lock.</param>
      <param name="flags">[in] Zero or more locking flags that describe the type of lock to perform. For this method, the valid flags are <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#Discard">Discard</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoDirtyUpdate">NoDirtyUpdate</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#NoSystemLock">NoSystemLock</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml#ReadOnly">ReadOnly</A>. For a description of the flags, see <A href="/directx/ref/ns/microsoft.directx.direct3d/e/lockflags/lockflags.xml">LockFlags</A>.</param>
      <param name="ranks">[in] Array of one to three <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemInt32ClassTopic.asp">Int32</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> values that indicate the dimensions of the returning <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" />.</param>
      <returns>An <A target="_blank" href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfSystemArrayClassTopic.asp">Array</A><IMG SRC="/directx/art/leave-site.gif" ALT="Leave Site" /> object that describes the locked region.</returns>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeTexture.UnlockBox(System.Int32)">
      <summary>Unlocks a box on a volume texture resource.</summary>
      <param name="level">[in] Value that specifies a  level of the volume texture resource to unlock.</param>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WasStillDrawingException">
      <summary>The device was still drawing.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WasStillDrawingException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrongTextureFormatException">
      <summary>The pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.WrongTextureFormatException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFile">
      <summary>Applications use the methods of the <see cref="T:Microsoft.DirectX.Direct3D.XFile" /> class to retrieve information about MicrosoftMicrosoft DirectXDirectX file objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObjectById(System.Guid)">
      <summary>Retrieves the data object that has the specified globally unique identifier (GUID).</summary>
      <param name="dataId" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetDataObjectByName(System.String)">
      <summary>Retrieves the data object that has the specified name.</summary>
      <param name="dataName" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFile.GetNextDataObject">
      <summary />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileBinary">
      <summary>Applications use the methods and properties of the <see cref="T:Microsoft.DirectX.Direct3D.XFileBinary" /> class to read and retrieve information about binary data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Create a new binary object from a XFileObject.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileBinary.Read(System.Int32,System.Int32@)">
      <summary>Reads the binary data.</summary>
      <param name="numberBytes" />
      <param name="actualBytes" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileBinary.MimeType">
      <summary>Retrieves the Multipurpose Internet Mail Extensions (MIME) type for the binary data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileBinary.Size">
      <summary>Retrieves the size of the binary data.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileData">
      <summary>Applications use the methods and properties of the <see cref="T:Microsoft.DirectX.Direct3D.XFileData" /> class to build or to access the immediate hierarchy of the data object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.String,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="name" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.Guid,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="guid" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddBinaryObject(System.String,System.Guid,System.String,System.Byte[])">
      <summary>Creates a binary object and adds it as a child object.</summary>
      <param name="name" />
      <param name="guid" />
      <param name="mimeType" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataObject(Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Adds a data object as a child object.</summary>
      <param name="dataObject" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.String,System.Guid)">
      <summary>Creates and adds a data reference object as a child object.</summary>
      <param name="reference" />
      <param name="guidReference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.Guid)">
      <summary>Creates and adds a data reference object as a child object.</summary>
      <param name="guidReference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.AddDataReference(System.String)">
      <summary>Creates and adds a data reference object as a child object.</summary>
      <param name="reference" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Creates a new XFileData object from a XFileObject.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetData(System.String,System.Type)">
      <summary>Retrieves the data for one of the object's members or the data for all members.</summary>
      <param name="member" />
      <param name="returnType" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetDataArray(System.String,System.Type,System.Int32)">
      <summary />
      <param name="member" />
      <param name="returnType" />
      <param name="numberMembers" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetNextObject">
      <summary />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileData.GetObjectByValue(System.Int32)">
      <summary>This member supports the Managed DirectX infrastructure and is not intended to be used directly from your code.</summary>
      <param name="objId" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileData.Type">
      <summary>Retrieves the globally unique identifier (GUID) of the object's template.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileDataReference">
      <summary>Applications use the methods and properties of the <see cref="T:Microsoft.DirectX.Direct3D.XFileDataReference" /> class to support data reference objects. A data reference object is a data object defined earlier in the file and enables the same object to be used multiple times without repeating it in the file.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.#ctor(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xfile" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.FromXFileObject(Microsoft.DirectX.Direct3D.XFileObject)">
      <summary>Create a new XFileDataReference object from a XFile object.</summary>
      <param name="xfile" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileDataReference.Resolve">
      <summary>Resolves data references.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileGuid">
      <summary>Various guids for using with XFiles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Animation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationKey">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationOptions">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.AnimationSet">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ApplicationData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Boolean2d">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Camera">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgb">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ColorRgba">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Coordinates2D">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ExternalVisual">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FloatKeys">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Frame">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FramePosition">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameRotation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameTransformMatrix">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.FrameVelocity">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.IndexedColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Info">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.InlineData">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Light">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightAttenuation">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightPenumbra">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightRange">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.LightUmbra">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Material">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialAmbientColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialArray">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialDiffuseColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialEmissiveColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialPower">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialSpecularColor">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MaterialWrap">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Matrix4x4">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Mesh">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFace">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshFaceWraps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshMaterialList">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshNormals">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshTextureCoords">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.MeshVertexColors">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.ProgressiveMesh">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.PropertyBag">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RightHanded">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.RmGuid">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.StringProperty">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureFilename">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TextureReference">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.TimedFloatKeys">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Url">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileGuid.Vector">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileManager">
      <summary>Used to managed XFile objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.CreateSaveObject(System.String,Microsoft.DirectX.Direct3D.XFileFormat)">
      <summary>Creates a save object.</summary>
      <param name="fileName" />
      <param name="fileFormat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="obj" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromFile(System.String)">
      <summary>Create a new xfile object from a file.</summary>
      <param name="filename" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromStream(System.IO.Stream)">
      <summary>Create a new xfile object from a stream.</summary>
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromStream(System.IO.Stream,System.Int32)">
      <summary>Create a new xfile object from a stream.</summary>
      <param name="data" />
      <param name="length" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.LoadFromUrl(System.String)">
      <summary>Create a new xfile object from an URL.</summary>
      <param name="url" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterDefaultTemplates">
      <summary>Registers custom templates.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.Byte[])">
      <summary>Registers custom templates.</summary>
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileManager.RegisterTemplates(System.String)">
      <summary>Registers custom templates.</summary>
      <param name="data" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileObject">
      <summary>Applications use the methods and properties of the <see cref="T:Microsoft.DirectX.Direct3D.XFileObject" /> class to retrieve information about MicrosoftMicrosoft DirectXDirectX file objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileObject.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileObject.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileObject.Id">
      <summary>Retrieves a reference to the GUID that identifies a Microsoft DirectX® file object.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.XFileObject.Name">
      <summary>Retrieves a reference to a Microsoft DirectX® file object's name.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileSaveObject">
      <summary>Applications use the methods of the <see cref="T:Microsoft.DirectX.Direct3D.XFileSaveObject" /> class to create data objects and to save templates and data objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.CreateDataObject(System.Guid,System.String,System.Guid,System.Byte[])">
      <summary>Creates a data object.</summary>
      <param name="guidTemplate" />
      <param name="name" />
      <param name="guidData" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.CreateDataObject(System.Guid,System.String,System.Guid,System.String)">
      <summary>Creates a data object.</summary>
      <param name="guidTemplate" />
      <param name="name" />
      <param name="guidData" />
      <param name="data" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.#ctor(System.IntPtr)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="obj" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.SaveData(Microsoft.DirectX.Direct3D.XFileData)">
      <summary>Saves a data object and its children to a file.</summary>
      <param name="dataObject" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.XFileSaveObject.SaveTemplates(System.Guid[])">
      <summary>Saves templates to a file.</summary>
      <param name="templates" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BackBufferType">
      <summary>Defines constants that identify the type of Nonvisible surface to which bitmaps and other images can be drawn while the front buffer displays the currently visible image. in a swap chain. In stereo view, a stereo pair contains both a right-eye and a left-eye view of a 3-D scene. MicrosoftMicrosoft DirectXDirectX 9.0 does not support stereo view, so neither the <see cref="F:Microsoft.DirectX.Direct3D.BackBufferType.Right" /> nor the <see cref="F:Microsoft.DirectX.Direct3D.BackBufferType.Left" /> values of this enumerated type are supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Right">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Left">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BackBufferType.Mono">
      <summary>Nonstereo swap chain (one or more nonstereo back buffers).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BasisType">
      <summary>Defines the basis type of a high-order patch surface.The flags in this type specify the formulation to use in evaluating the high-order patch surface primitive during Breaking an image into small square regions for processing or output..</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.CatMullRom">
      <summary>An interpolating basis defines the surface so that it passes through all of the specified input vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.BSpline">
      <summary>Input vertices are treated as control points of a (also Bezier spline) A curve that is calculated mathematically to connect separate points into smooth, free-form curves and surfaces of the type needed for illustration programs and CAD models. Bezier curves need only a few control points to define a large number of shapeshence their usefulness over other mathematical methods for approximating a given shape. surface. In general, the generated surface does not contain the specified control vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BasisType.Bezier">
      <summary>Input vertices are treated as a series of Bezier patches. The number of vertices specified must be divisible by 3 + 1; portions of the mesh beyond this criterion are not rendered. Full continuity is assumed between sub-patches in the interior of the surface rendered by each call. Only the vertices at the corners of each sub-patch are guaranteed to lie on the resulting surface.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Blend">
      <summary>Defines the supported Algorithm used to determine how a texture is blended with the colors of the surface to which the texture is applied.. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.Zero">
      <summary>Blend factor is (0, 0, 0, 0).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvBlendFactor">
      <summary>Inverted constant color Description of how each color component is blended in texture blending. used by the frame-buffer blender. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.BlendCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BlendFactor">
      <summary>Constant color blending factor used by the frame-buffer blender. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.BlendCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BothInvSourceAlpha">
      <summary>Source blend factor is (1 - As, 1 - As, 1 - As, 1 - As), and destination blend factor is (As, As, As, As); the destination blend selection is overridden. This blend mode is supported only if the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.SourceBlend" /> property is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.BothSourceAlpha">
      <summary>Obsolete. To achieve the same effect, set the source and destination blend factors to <see cref="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha" /> in separate calls.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceAlphaSat">
      <summary>Blend factor is (f, f, f, 1); f = min(A, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationColor">
      <summary>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.DestinationColor">
      <summary>Blend factor is (Rd, Gd, Bd, Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvDestinationAlpha">
      <summary>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.DestinationAlpha">
      <summary>Blend factor is (Ad, Ad, Ad, Ad).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvSourceAlpha">
      <summary>Blend factor is ( 1 - As, 1 - As, 1 - As, 1 - As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceAlpha">
      <summary>Blend factor is (As, As, As, As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.InvSourceColor">
      <summary>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.SourceColor">
      <summary>Blend factor is (Rs,Gs,Bs,As).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Blend.One">
      <summary>Blend factor is (1, 1, 1, 1).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendOperation">
      <summary>Defines the supported blend operations. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.BlendOperation" /> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Subtract">
      <summary>Result is the destination subtracted from the source. Result = Source - Destination</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Max">
      <summary>Result is the maximum of the source and destination. Result = MAX(Source, Destination)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Min">
      <summary>Result is the minimum of the source and destination. Result = MIN(Source, Destination)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.RevSubtract">
      <summary>Result is the source subtracted from the destination. Result = Destination - Source</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.BlendOperation.Add">
      <summary>Result is the destination added to the source. Result = Source + Destination</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClearFlags">
      <summary>Specifies the buffer to use when calling the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Clear" /> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.Target">
      <summary>Specifies a render target.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.Stencil">
      <summary>Specifies a stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClearFlags.ZBuffer">
      <summary>Specifies a Buffer that stores a depth value for each pixel in a scene. Pixels with a small z-value overwrite pixels with a large z-value..</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatusFlags">
      <summary>Defines the current clip status. When clipping is enabled during vertex processing (by <see cref="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices" />, <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawPrimitives(Microsoft.DirectX.Direct3D.PrimitiveType,System.Int32,System.Int32)" />, or other drawing functions), MicrosoftMicrosoft Direct3DDirect3D computes a clip code for every vertex. The clip code is a combination of <see cref="T:Microsoft.DirectX.Direct3D.ClipStatusFlags" />. When a vertex is outside a particular clipping plane, the corresponding bit is set in the clip code. MicrosoftMicrosoft Direct3DDirect3D maintains the clip status using <see cref="T:Microsoft.DirectX.Direct3D.ClipStatus" />, which has <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection" /> and <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion" /> properties. <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion" /> is a bitwise OR of all vertex clip codes, and <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection" /> is a bitwise AND of all vertex clip codes. Initial values are 0 for <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion" /> and 0xFFFFFFFF for <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection" />. When the <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.Clipping" /> property is set to false, <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion" /> and <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection" /> are set to 0. MicrosoftMicrosoft Direct3DDirect3D updates the clip status during drawing calls. To compute clip status for a particular object, set <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion" /> and <see cref="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection" /> to their initial values and continue drawing.  Clip status is not updated by <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawRectanglePatch" /> and <see cref="M:Microsoft.DirectX.Direct3D.Device.DrawTrianglePatch" /> because there is no software emulation for these methods.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Back">
      <summary>All vertices are clipped by the back plane of the 3-D volume in a scene positioned relative to the viewport's camera. Objects within the frustum are visible. For perspective viewing, the viewing frustum is the volume of an imaginary pyramid that is between the front clipping plane and the back clipping plane. For orthographic viewing, the viewing frustum is cubic..</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Front">
      <summary>All vertices are clipped by the front plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane5">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane4">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane3">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane2">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane1">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Plane0">
      <summary>All vertices are clipped by the application-defined clipping plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.All">
      <summary>Combination of all clip flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Bottom">
      <summary>All vertices are clipped by the bottom plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Top">
      <summary>All vertices are clipped by the top plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Right">
      <summary>All vertices are clipped by the right plane of the viewing frustum.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ClipStatusFlags.Left">
      <summary>All vertices are clipped by the left plane of the viewing frustum.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorSource">
      <summary>Defines the location at which a color or color component must be accessed for lighting calculations. This enumeration is used to set the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/diffusematerialsource.xml">DiffuseMaterialSource</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/emissivematerialsource.xml">EmissiveMaterialSource</A>, <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/specularmaterialsource.xml">SpecularMaterialSource</A>, and <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/ambientmaterialsource.xml">AmbientMaterialSource</A> properties in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A> class type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Color2">
      <summary>Use the Material property that determines how a point of light on a shiny object corresponds to the reflected light source. The specular property of a material is one of two properties that determines how a material reflects light. See also "emissive property." vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Color1">
      <summary>Use the diffuse vertex color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorSource.Material">
      <summary>Use the color from the current material.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorWriteEnable">
      <summary>Defines values that are used to specify a channel in the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" /> class type. This enumeration is used by the <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable" />, <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable1" />, <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable2" />, and <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.ColorWriteEnable3" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Alpha">
      <summary>Opacity of an image defined by an alpha value per pixel interleaved with the color components (for example, ARGB), an alpha value per pixel stored in a separate alpha surface, or a constant alpha value for the entire surface. of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Blue">
      <summary>Blue channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Green">
      <summary>Green channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.Red">
      <summary>Red channel of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.RedGreenBlueAlpha">
      <summary>All channels of a buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ColorWriteEnable.RedGreenBlue">
      <summary>The red, green, and blue channels of a buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Compare">
      <summary>Defines the supported compare functions in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A> class type. The <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.StencilFunction" />, <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.AlphaFunction" />, <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.CounterClockwiseStencilFunction" />, and <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.ZBufferFunction" /> properties use this enumeration.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Always">
      <summary>Always pass the test.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Never">
      <summary>Always fail the test.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.GreaterEqual">
      <summary>Accept the new pixel if its value is greater than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.NotEqual">
      <summary>Accept the new pixel if its value does not equal the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Greater">
      <summary>Accept the new pixel if its value is greater than the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.LessEqual">
      <summary>Accept the new pixel if its value is less than or equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Equal">
      <summary>Accept the new pixel if its value is equal to the value of the current pixel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Compare.Less">
      <summary>Accept the new pixel if its value is less than the value of the current pixel.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CreateFlags">
      <summary>Defines the flags to use when creating a device. This enumeration is used by the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor. The <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.HardwareVertexProcessing" />, <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.MixedVertexProcessing" />, and <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.SoftwareVertexProcessing" /> constants are mutually exclusive. One of them must be specified during creation of a <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.AdapterGroupDevice">
      <summary>The application requests that the device drive all heads that the master adapter owns (this flag is illegal on non-master adapters). If the flag is set, the presentation parameters passed to <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> should be an array of <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" /> that contains exactly <see cref="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup" /> elements. The runtime assigns each element to each head in <see cref="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinalInGroup" /> numeric order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.DisableDriverManagement">
      <summary>Specifies that resources be managed by MicrosoftMicrosoft Direct3DDirect3D instead of the driver.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.MixedVertexProcessing">
      <summary>Specifies mixed vertex processing (both software and hardware).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.HardwareVertexProcessing">
      <summary>Specifies hardware vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.SoftwareVertexProcessing">
      <summary>Specifies software vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.PureDevice">
      <summary>Specifies that MicrosoftMicrosoft Direct3DDirect3D not support Get calls for anything that can be stored in a state block. Also instructs MicrosoftMicrosoft Direct3DDirect3D to withhold emulation services for vertex processing, which means that if the device does not support vertex processing, the application can use only post-transformed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.MultiThreaded">
      <summary>Indicates that the application requested multithread safety in MicrosoftMicrosoft Direct3DDirect3D. This causes MicrosoftMicrosoft Direct3DDirect3D to check its global critical section more frequently, which can degrade performance. In MicrosoftMicrosoft DirectXDirectX 9.1 for Managed Code, this enumerated value is always specified unless the <see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.ForceNoMultiThreadedFlag" /> is set to true.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CreateFlags.FpuPreserve">
      <summary>Indicates that the application needs either floating-point unit (FPU) exceptions or double-precision FPU exceptions enabled. By default, MicrosoftMicrosoft Direct3DDirect3D uses single precision. Because Microsoft® Direct3D® sets the FPU state every time it is called, setting this flag reduces Microsoft® Direct3D® performance.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CubeMapFace">
      <summary>Defines the faces of a cube map in the <see cref="T:Microsoft.DirectX.Direct3D.CubeTexture" /> class type. This enumeration is used by the <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.AddDirtyRectangle" />, <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.GetCubeMapSurface(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)" />, <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.LockRectangle" />, and <see cref="M:Microsoft.DirectX.Direct3D.CubeTexture.UnlockRectangle(Microsoft.DirectX.Direct3D.CubeMapFace,System.Int32)" /> methods. The values in this enumerated type also define faces of a cube map in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/rendertoenvironmentmap/m/face.xml">RenderToEnvironmentMap.Face</A> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeZ">
      <summary>Negative z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveZ">
      <summary>Positive z-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeY">
      <summary>Negative y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveY">
      <summary>Positive y-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.NegativeX">
      <summary>Negative x-face of the cube map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CubeMapFace.PositiveX">
      <summary>Positive x-face of the cube map.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Cull">
      <summary>Defines the supported Removing a face from the list of faces to render. Faces can be culled using a number of techniques including: back face, view frustum, and occlusion culling., which specify how back faces are culled during geometry rendering. This enumeration is used by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/cullmode.xml">CullMode</A> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.CounterClockwise">
      <summary>Cull back faces with counterclockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.Clockwise">
      <summary>Cull back faces with clockwise vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Cull.None">
      <summary>Do not cull back faces.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationMethod">
      <summary>Defines the declaration methods for a vertex declaration. The <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> structure uses <B>DeclarationMethod</B> values to determine which vertex data to calculate during <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" G_RID="term_tessellating"><!--Breaking an image into small square regions for processing or output.-->tessellation</span>. These values can be passed into the constructor or to the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/p/declarationmethod.xml">DeclarationMethod</A> property. Mesh data should use the default value. Patches can use any of the other implemented types.Vertex data is declared with an array of <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> structures. Each element in the array contains a vertex declaration method.In addition to using <B>Default</B>, a normal mesh can use <B>LookUp</B> and <B>LookUpPresampled</B> when N-patches are enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled">
      <summary>Looks up a pre-sampled displacement map. The input type must be set to <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused" />, and the stream index and stream offset must be set to 0. The output type for this operation is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUp">
      <summary>Looks up a displacement map. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />. Only the .x and .y components are used for the texture map lookup. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />. The device must support displacement mapping. This constant is supported only by the programmable pipeline on N-patch data, if N-patches are enabled.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.UV">
      <summary>Copies out the u and v values at a point on the rectangle or triangle patch. This results in a 2-D float. The input type must be set to <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused" />; the output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2" />. The input stream and offset also are unused, but must be set to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.CrossUv">
      <summary>Computes the normal at a point on the rectangle or triangle patch as the cross product of the two tangents. The input type can be any of the <see cref="T:Microsoft.DirectX.Direct3D.DeclarationType" /> float values, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.PartialV">
      <summary>Computes the tangent at a point on the rectangle or triangle patch in the v direction. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.PartialU">
      <summary>Computes the tangent at a point on the rectangle or triangle patch in the u direction. The input type can be <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Color" />, <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4" />, or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4" />. The output type is always <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationMethod.Default">
      <summary>Default value. The tessellator copies the vertex data (or the spline data if it is operating on a patch) without performing additional calculations on it. The input and output types can be any value. When the tessellator is used, this element is interpolated; otherwise, vertex data is copied into the input register.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationType">
      <summary>Defines declaration types for a vertex declaration. Vertex data is declared with an array of <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> structures. Each element in the array contains a vertex declaration method. These values can be passed into the constructor or to the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/p/declarationmethod.xml">DeclarationMethod</A> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float16Four">
      <summary>Four 16-bit floating-point values expanded to (value, value, value, value). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float16Two">
      <summary>Two 16-bit floating-point values expanded to (value, value, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Dec3N">
      <summary>3-D signed 10 10 10 format, normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UDec3">
      <summary>3-D unsigned 10 10 10 format, expanded to (value, value, value, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UShort4N">
      <summary>Normalized 4-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.UShort2N">
      <summary>Normalized, 2-D unsigned short, expanded to (First byte/65535.0, second byte/65535.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4N">
      <summary>Normalized, 4-D signed short, expanded to (First byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short2N">
      <summary>Normalized, 2-D signed short, expanded to (First byte/32767.0, second byte/32767.0, 0, 1). This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4N">
      <summary>Each of 4 bytes is normalized by dividing to 255.0. This type is valid for vertex shader version 2.0 or higher.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short4">
      <summary>4-D signed short, expanded to (value, value, value, value).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Short2">
      <summary>2-D signed short, expanded to (value, value, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Ubyte4">
      <summary>4-D unsigned byte.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float4">
      <summary>4-D float, expanded to (float, float, float, float).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float3">
      <summary>3-D float, expanded to (float, float, float, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float2">
      <summary>2-D float, expanded to (float, float, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1">
      <summary>1-D float, expanded to (float, 0, 0, 1).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Unused">
      <summary>Type field in the declaration is unused. This is designed for use with <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.UV" /> and <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationType.Color">
      <summary>4-D packed unsigned bytes, mapped to 0 to 1 range. Input is in <see cref="T:System.Int32" /> format (ARGB) expanded to (R, G, B, A).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationUsage">
      <summary>Defines declaration usage for a vertex declaration. Vertex data is declared with an array of <A href="/directx/ref/ns/microsoft.directx.direct3d/s/vertexelement/vertexelement.xml">VertexElement</A> structures. Each element in the array contains a usage type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Depth">
      <summary>Vertex data contains depth data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Sample">
      <summary>Vertex data contains sampler data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Sample" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the displacement value to look up. This flag can be used only with <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUpPresampled" /> or <see cref="F:Microsoft.DirectX.Direct3D.DeclarationMethod.LookUp" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Fog">
      <summary>Vertex data contains fog data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Fog" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies a fog blend value to use after pixel shading is finished. This flag applies to pixel shaders prior to version ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PositionTransformed">
      <summary>Vertex data contains transformed position data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PositionTransformed" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the transformed position. When a declaration that contains this flag is set, the pipeline does not perform vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TessellateFactor">
      <summary>Single positive floating-point value. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TessellateFactor" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies a Breaking an image into small square regions for processing or output. factor used in the tessellation unit to control the rate of tessellation. For more information about the data type, see <see cref="F:Microsoft.DirectX.Direct3D.DeclarationType.Float1" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BiNormal">
      <summary>Vertex binormal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Tangent">
      <summary>Vertex tangent data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TextureCoordinate">
      <summary>Texture coordinate data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.TextureCoordinate" />, n) specifies texture coordinates in fixed function vertex processing and in pixel shaders prior to ps_3_0. These coordinates can be used to pass user-defined data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendIndices">
      <summary>Blending indices data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendIndices" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies matrix indices for fixed function vertex processing using indexed paletted skinning.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendWeight">
      <summary>Blending weight data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.BlendWeight" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the blend weights in fixed function vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color">
      <summary>Vertex data contains diffuse or Material property that determines how a point of light on a shiny object corresponds to the reflected light source. The specular property of a material is one of two properties that determines how a material reflects light. See also "emissive property." color. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the diffuse color in the fixed function vertex shader and in pixel shaders prior to ps_3_0. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Color" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies the specular color in the fixed function vertex shader and in pixel shaders prior to ps_3_0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PointSize">
      <summary>Point size data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.PointSize" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies the point-size attribute used by the setup engine of the rasterizer to expand a point into a quad for the point-sprite functionality.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal">
      <summary>Vertex normal data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0) specifies vertex normals for fixed function vertex processing and the N-patch tessellator. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Normal" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies vertex normals for fixed function vertex processing for skinning.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position">
      <summary>Position data. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 0 ) specifies the nontransformed position in fixed function vertex processing and the N-patch tessellator. (<see cref="F:Microsoft.DirectX.Direct3D.DeclarationUsage.Position" /> with <see cref="T:Microsoft.DirectX.Direct3D.VertexElement" />.<see cref="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex" /> = 1) specifies the nontransformed position in the fixed function vertex shader for skinning.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DegreeType">
      <summary>Defines the degree of the variables in an equation that describes a curve. This enumeration is used to describe the curves used by rectangle and triangle patches.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Quintic">
      <summary>Curve is described by variables of fourth order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Cubic">
      <summary>Curve is described by variables of third order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Quadratic">
      <summary>Curve is described by variables of second order.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DegreeType.Linear">
      <summary>Curve is described by variables of first order.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DepthFormat">
      <summary>Defines depth buffer formats. All depth-stencil formats except <B>D16Lockable</B> indicate no particular bit ordering per pixel, and the driver is allowed to consume more than the indicated number of bits per depth channel (but not stencil channel).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.Unknown">
      <summary>Format is unknown.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24SingleS8">
      <summary>A 32-bit Buffer that stores a depth value for each pixel in a scene. Pixels with a small z-value overwrite pixels with a large z-value. bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D32SingleLockable">
      <summary>A lockable format in which the depth value is represented as a standard IEEE floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24X4S4">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24X8">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.L16">
      <summary>A 16-bit luminance format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D16">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D24S8">
      <summary>A nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format - 20E4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D15S1">
      <summary>A 16-bit z-buffer bit depth in which 15 bits are reserved for the depth channel and 1 bit is reserved for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D32">
      <summary>A 32-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DepthFormat.D16Lockable">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceType">
      <summary>Specifies a device type.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Software">
      <summary>A pluggable software device.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Reference">
      <summary>MicrosoftMicrosoft Direct3DDirect3D features are implemented in software; however, the reference rasterizer uses special CPU instructions whenever possible.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DeviceType.Hardware">
      <summary>Hardware rasterization. Shading is done with software, hardware, or mixed transform and lighting.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplacementMap">
      <summary>Identifies a texture sampler stage. These values are returned by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/manager.xml">Manager</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdeviceformat.xml">CheckDeviceFormat</A> method. They also can be used in the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/device.xml">Device</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/device/m/settexture.xml">SetTexture</A> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler3">
      <summary>Texture sampler stage 3.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler2">
      <summary>Texture sampler stage 2.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler1">
      <summary>Texture sampler stage 1.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.VertexTextureSampler0">
      <summary>Texture sampler stage 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.DisplacementMap.Sampler">
      <summary>Internal constant used by the texture sampler in the tessellator.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FillMode">
      <summary>Defines constants that describe the fill mode. This enumeration is used by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/fillmode.xml">FillMode</A> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.Solid">
      <summary>Fill solids.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.WireFrame">
      <summary>Fill wireframes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FillMode.Point">
      <summary>Fill points.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FogMode">
      <summary>Defines constants that describe the fog mode. This enumeration is used by the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/fogtablemode.xml">FogTableMode</A> and <A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/renderstates.xml">RenderStates</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/renderstates/p/fogvertexmode.xml">FogVertexMode</A> properties.Fog can be considered a measure of visibility. The lower the fog value produced by a fog equation, the less visible an object is.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Linear">
      <summary>Fog effect intensifies in a linear manner between the start and end points, according to the following formula. <IMG SRC="/directx/art/fogliner.gif" ALT="Liner fog equation" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Exp2">
      <summary>Fog effect intensifies exponentially with the square of the distance, according to the following formula. <IMG SRC="/directx/art/fogexp2.gif" ALT="exponential square fog equation" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.Exp">
      <summary>Fog effect intensifies exponentially, according to the following formula. <IMG SRC="/directx/art/fogexp.gif" ALT="Exponential fog equation" /></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.FogMode.None">
      <summary>No fog effect.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Format">
      <summary>Defines various types of surface formats. For a more complete discussion of surface formats, see <see cref="O:FormatEnumerationCategories" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D24SingleS8">
      <summary>Nonlockable format that contains 24 bits of depth (in a 24-bit floating-point format - 20e4) and 8 bits of stencil.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D32SingleLockable">
      <summary>Lockable format in which the depth value is represented as a standard IEEE floating-point number.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D24X4S4">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 4 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D24X8">
      <summary>A 2-bit z-buffer bit depth that uses 24 bits for the depth channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.L16">
      <summary>16-bit luminance only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D16">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D24S8">
      <summary>A 32-bit z-buffer bit depth that uses 24 bits for the depth channel and 8 bits for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D15S1">
      <summary>A 16-bit z-buffer bit depth that reserves 15 bits for the depth channel and 1 bit for the stencil channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D32">
      <summary>A 32-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.D16Lockable">
      <summary>A 16-bit z-buffer bit depth.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G8R8G8B8">
      <summary>A 16-bit packed RGB format analogous to YUY2 (Y0U0, Y1V0, Y2U2, etc.). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the high 8 bits) and 8 bits of red (in the low 8 bits). The second pixel contains 8 bits of green (in the high 8 bits) and 8 bits of blue (in the low 8 bits). Together, the two pixels share the red and blue components, and each has a unique green component (G0R0, G1B0, G2R2, etc.). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the range of 0.f to 1.f and treat it as the YUY2 texture. Hardware that exposes this format must have <see cref="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue" /> set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R8G8B8G8">
      <summary>A 16-bit packed RGB format analogous to UYVY (U0Y0, V0Y1, U2Y2, etc.). It requires a pixel pair to properly represent the color value. The first pixel in the pair contains 8 bits of green (in the low 8 bits) and 8 bits of red (in the high 8 bits). The second pixel contains 8 bits of green (in the low 8 bits) and 8 bits of blue (in the high 8 bits). Together, the two pixels share the red and blue components, and each has a unique green component (R0G0, B0G1, R2G2, etc.). The texture sampler does not normalize the colors when looking up into a pixel shader; they remain in the range of 0.0f to 255.0f. This is true for all programmable pixel shader models. For the fixed function pixel shader, the hardware should normalize to the range of 0.f to 1.f and treat it as the YUY2 texture. Hardware that exposes this format must have <see cref="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue" /> set to a value capable of handling that range.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.CxV8U8">
      <summary>A 32-bit normal compression format. The texture sampler computes the C channel from the signed most significant byte and least significant byte values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A32B32G32R32F">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G32R32F">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R32F">
      <summary>Floating-point surface format that uses 32 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A16B16G16R16F">
      <summary>A 64-bit float format that uses 16 bits per channel (alpha, blue, green, red).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G16R16F">
      <summary>Floating-point surface format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R16F">
      <summary>Floating-point surface format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Multi2Argb8">
      <summary>MET1 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Q16W16V16U16">
      <summary>A 64-bit Technique for simulating the appearance of rough surfaces in 3-D scenes. Variations in depth are stored in a texture and applied to a primitive, using standard texture-blending techniques. format that uses 16 bits for each component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.VertexData">
      <summary>Vertex buffer surface.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt5">
      <summary>DXT5 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt4">
      <summary>DXT4 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt3">
      <summary>DXT3 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt2">
      <summary>DXT2 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Dxt1">
      <summary>DXT1 compression texture format.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Yuy2">
      <summary>YUY2 format (PC98 compliance).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Uyvy">
      <summary>UYVY format (PC98 compliance).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2W10V10U10">
      <summary>A 32-bit bump-map format that uses 2 bits for alpha and 10 bits each for w, v, and u data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.V16U16">
      <summary>A 32-bit bump-map format that uses 16 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Q8W8V8U8">
      <summary>A 32-bit bump-map format that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8L8V8U8">
      <summary>A 32-bit bump-map format with luminance that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.L6V5U5">
      <summary>A 16-bit bump-map format with luminance that uses 6 bits for luminance and 5 bits each for v and u data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.V8U8">
      <summary>A 16-bit bump-map format that uses 8 bits each for u and v data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A4L4">
      <summary>An 8-bit format that uses 4 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8L8">
      <summary>A 16-bit format that uses 8 bits each for alpha and luminance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.L8">
      <summary>An 8-bit format with luminance only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.P8">
      <summary>An 8-bit format, color indexed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8P8">
      <summary>An 8-bit format, color indexed with 8 bits of alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A16B16G16R16">
      <summary>A 64-bit pixel format that uses 16 bits per component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2R10G10B10">
      <summary>A 32-bit pixel format that uses 10 bits each for red, green, and blue, and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.G16R16">
      <summary>A 32-bit pixel format that uses 16 bits each for green and red.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8B8G8R8">
      <summary>A 32-bit RGB pixel format that reserves 8 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8B8G8R8">
      <summary>A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A2B10G10R10">
      <summary>A 32-bit pixel format that uses 10 bits for each color and 2 bits for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X4R4G4B4">
      <summary>A 16-bit RGB pixel format that uses 4 bits per color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8R3G3B2">
      <summary>A 16-bit ARGB texture format that uses 8 bits for alpha, 3 bits each for red and green, and 2 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8">
      <summary>8-bit alpha only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R3G3B2">
      <summary>An 8-bit RGB texture format that uses 3 bits for red, 3 bits for green, and 2 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A4R4G4B4">
      <summary>A 16-bit ARGB pixel format that uses 4 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A1R5G5B5">
      <summary>A 16-bit pixel format that reserves 5 bits for each color and 1 bit for alpha.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X1R5G5B5">
      <summary>A 16-bit pixel format that reserves 5 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R5G6B5">
      <summary>A 16-bit RGB pixel format that uses 5 bits for red, 6 bits for green, and 5 bits for blue.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.X8R8G8B8">
      <summary>A 32-bit RGB pixel format that reserves 8 bits for each color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.A8R8G8B8">
      <summary>A 32-bit ARGB pixel format, with alpha, that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.R8G8B8">
      <summary>A 24-bit RGB pixel format that uses 8 bits per channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Format.Unknown">
      <summary>Unknown surface format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IssueFlags">
      <summary>Defines issue flags. This enumeration is used with the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/query/query.xml">Query</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/query/m/issue.xml">Issue</A> method.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.End">
      <summary>Specifies that the runtime issue the beginning of a query.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.IssueFlags.Begin">
      <summary>Specifies that the runtime issue the end of a query.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LightType">
      <summary>Defines the light type. Directional lights are slightly faster than point lights, but point lights look a little better. Spotlights offer interesting visual effects but are slow.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Directional">
      <summary>Light is a Description of a light source that is attached to a frame but appears to illuminate all objects with equal intensity, as if it were at an infinite distance from the objects. Directional light has orientation but no position, and it is commonly used to simulate distant light sources, such as the sun. source. It is equivalent to using a point light source at an infinite distance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Spot">
      <summary>Light is a Light source that emits a cone of light. Only objects within the cone are illuminated. The cone produces light of two degrees of intensity, with a central brightly lit section that acts as a point source, and a surrounding dimly lit section that merges with the surrounding deep shadow. source. It is similar to a point light, except that the area of illumination is limited to a cone. This light type has a direction and several other parameters that determine the shape of the cone it produces. For more information, see the <see cref="T:Microsoft.DirectX.Direct3D.Light" /> class.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LightType.Point">
      <summary>Light is a point source. The light has a position in space and radiates light in all directions.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockFlags">
      <summary>Defines the type of lock to perform.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.Discard">
      <summary>The application overwrites every location within the region being locked, using a write-only operation. This is a valid option when using dynamic textures, dynamic vertex buffers, and dynamic index buffers. For vertex and index buffers, the application discards the entire buffer. A pointer to a new memory area is returned so that the direct memory access (DMA)DMA and rendering from the previous area do not stall. For textures, the application overwrites every location within the region being locked, using a write-only operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.DoNotWait">
      <summary>The application is allowed to gain back CPU cycles if the driver cannot lock the surface immediately. When this is the case, the lock call throws <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" />. This flag can be used only when calling <see cref="T:Microsoft.DirectX.Direct3D.Surface" />.<see cref="M:Microsoft.DirectX.Direct3D.Surface.LockRectangle" /> on surfaces created using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateOffscreenPlainSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.Pool)" />, <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />, or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />. It also can be used with a back buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoDirtyUpdate">
      <summary>By default, a lock on a resource adds a dirty region to that resource. This flag prevents any changes to the dirty state of the resource. Applications should use this flag when they have additional information about the set of regions changed during the lock operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoSystemLock">
      <summary>By default, a video memory lock reserves a system-wide critical section, guaranteeing that no display mode changes will occur for the duration of the lock. This flag prevents the system-wide critical section from being held while the lock is on. While the lock operation is time-consuming, it enables the system to perform other duties, such as moving the mouse cursor. This flag is useful for locks of long duration; for example, locking the back buffer for software rendering that otherwise would slow the system.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.NoOverwrite">
      <summary>The application is guaranteed not to overwrite any data in the vertex and index buffers. This flag allows the driver to return immediately and continue rendering, using this vertex buffer. If the flag is not used, the driver must finish rendering before returning from locking.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.ReadOnly">
      <summary>The application does not write to the buffer. This flag enables resources stored in non-native formats to save the recompression step when unlocking.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.LockFlags.None">
      <summary>Use no locks.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MultiSampleType">
      <summary>Defines the levels of full-scene multisampling that the device can apply. When multisampling is enabled, all subsamples of a pixel are updated in one pass. However, when subsamples are used for other effects that involve multiple rendering passes, the application can specify that only some of them be affected by a given rendering pass. This latter approach enables simulation of motion blur, depth-of-field focus effects, reflection blur, and other effects. In addition to enabling full-scene multisampling when a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" /> occurs, there are render states that turn various multisampling aspects on and off at fine-grained levels. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />. Multisampling is valid only on a swap chain that is created or reset with <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.SwapEffect.Discard" />. The multisampling antialiasing value can be set with the parameters or sub-parameters in the following methods.ModuleParametersSub-Parameters<see cref="T:Microsoft.DirectX.Direct3D.Manager" />.<see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceMultiSampleType" />multiSampleType, qualityLevelsNone<see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateDepthStencilSurface(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.DepthFormat,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />multiSample, multiSampleQualityNone<see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.CreateRenderTarget(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.Format,Microsoft.DirectX.Direct3D.MultiSampleType,System.Int32,System.Boolean)" />multiSample, multiSampleQualityNone<see cref="T:Microsoft.DirectX.Direct3D.SwapChain" />.<see cref="M:Microsoft.DirectX.Direct3D.SwapChain.#ctor" />presentationParametersmultiSample, multiSampleQuality<see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" />presentationParametersmultiSample, multiSampleQuality<see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" />presentationParametersmultiSample, multiSampleQuality</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SixteenSamples">
      <summary>Enables 16 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FifteenSamples">
      <summary>Enables 15 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FourteenSamples">
      <summary>Enables 14 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ThirteenSamples">
      <summary>Enables 13 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TwelveSamples">
      <summary>Enables 12 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ElevenSamples">
      <summary>Enables 11 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TenSamples">
      <summary>Enables 10 levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.NineSamples">
      <summary>Enables nine levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.EightSamples">
      <summary>Enables eight levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SevenSamples">
      <summary>Enables seven levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.SixSamples">
      <summary>Enables six levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FiveSamples">
      <summary>Enables five levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.FourSamples">
      <summary>Enables four levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.ThreeSamples">
      <summary>Enables three levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.TwoSamples">
      <summary>Enables two levels of full-scene multisampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.NonMaskable">
      <summary>Enables the multisample quality value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.MultiSampleType.None">
      <summary>Specifies no full-scene multisampling, and enables swap effects other than <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.SwapEffect.Discard" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PatchEdge">
      <summary>Defines whether the current tessellation mode is discrete or continuous. Continuous and discrete tessellation produce completely different patterns for the same tessellation values; for example, 4.0 continuous is not the same as 4 discrete. This difference is more apparent in wireframe mode than when rendering fully textured or color-filled scenes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.Continuous">
      <summary>Continuous edge style. Tessellation is specified as float values, which can be varied smoothly to reduce "popping" artifacts.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PatchEdge.Discrete">
      <summary>Discrete edge style. Tessellation can be specified as float values, but they will be truncated to integers.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Pool">
      <summary>Defines the memory class that holds buffers for a resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Scratch">
      <summary>Resources are placed in system RAM and do not need to be re-created when a device is lost. These resources are not bound by device size or format restrictions; therefore, they cannot be accessed by the MicrosoftMicrosoft Direct3DDirect3D device or set as textures or render targets. They can, however, always be created, locked, and copied.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory">
      <summary>Resources consume system RAM but do not reduce pageable RAM. System memory is not typically accessible by the 3-D device. These resources do not need to be re-created when a device is lost. They can be locked and also used as the source for a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)" /> operation to a memory resource created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Managed">
      <summary>Resources are copied automatically to device-accessible memory as needed. Managed resources are backed by system memory and do not need to be re-created when a device is lost. For more information, see <see cref="O:Resources4.ManagingResources" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Pool.Default">
      <summary>Resources are placed in the memory pool most appropriate for the set of usages requested for the given resource. This is usually video memory, including both local video memory and accelerated graphics port memory. The <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> pool is separate from <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> and <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" />, and it specifies that the resource be placed in the preferred memory for device access. Note that <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> never indicates that either <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> or <see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" /> should be chosen as the memory pool type for this resource. Textures placed in the <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> pool cannot be locked unless they are dynamic textures or private four-character code (FOURCC)FOURCC driver formats. Accessing unlockable textures requires the use of functions such as <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateTexture(Microsoft.DirectX.Direct3D.BaseTexture,Microsoft.DirectX.Direct3D.BaseTexture)" />. <see cref="F:Microsoft.DirectX.Direct3D.Pool.Managed" /> is probably a better choice than <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> for most applications. Some textures can be locked; for example, those created in driver proprietary pixel formats that are unknown to the MicrosoftMicrosoft Direct3DDirect3D runtime. Swap-chain back buffers, render targets, vertex buffers, and index buffers can be locked. When a device is lost, resources created using <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> must be disposed of before calling <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" />. MicrosoftMicrosoft DirectXDirectX 9.0 for Managed CodeMicrosoftMicrosoft DirectXDirectX 9.0 for Managed Code automatically handles disposal of resources that need it, provided the <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.IsUsingEventHandlers" /> property is set to true (the default setting). For more information, see <see cref="O:Devices4.LostDevices" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Present">
      <summary>Defines flags that allow the application to request that the <see cref="T:Microsoft.DirectX.Direct3D.SwapChain" />.<see cref="M:Microsoft.DirectX.Direct3D.SwapChain.Present" /> return immediately when the driver reports that it cannot schedule a presentation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.LinearContent">
      <summary>Performs gamma correction from linear space to sRGB for windowed swap chains. This flag takes effect only when the driver exposes <see cref="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsLinearToSrgbPresentation" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.DoNotWait">
      <summary>Performs the presentation operation without waiting. If the hardware is busy processing or waiting for a VSYNC interval, the method throws <see cref="T:Microsoft.DirectX.Direct3D.WasStillDrawingException" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Present.BackBuffersMax">
      <summary>Returns the maximum number of back buffers supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentFlag">
      <summary>Defines flags that control a <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.Video">
      <summary>Informs the driver that the back buffers contain video data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.DeviceClip">
      <summary>Clips a windowed <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" />A bit block transfer; sometimes called a bitblt. A graphics function that moves blocks of bits from one bitmap to another in the most efficient manner supported by the hardware. into the window client area, within the monitor screen area of the video adapter that created the MicrosoftMicrosoft Direct3DDirect3D device. This flag works only on MicrosoftMicrosoft WindowsWindows 2000Windows 2000 and MicrosoftMicrosoft WindowsWindows XP.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.DiscardDepthStencil">
      <summary>Enables Buffer that stores a depth value for each pixel in a scene. Pixels with a small z-value overwrite pixels with a large z-value. discarding if set when the device or swap chain is created. When this flag is set, the contents of the depth stencil buffer are invalid after either <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> are called. Discarding z-buffer data can increase performance and is dependent on the driver. The debug runtime enforces discarding by clearing the z-buffer to some constant value after calling either <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="P:Microsoft.DirectX.Direct3D.Device.DepthStencilSurface" /> with a different depth surface. Discarding z-buffer data is illegal for all lockable formats, <see cref="F:Microsoft.DirectX.Direct3D.DepthFormat.D16Lockable" />, and <see cref="F:Microsoft.DirectX.Direct3D.DepthFormat.D32Lockable" />. Using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> to specify a lockable format and z-buffer discarding will result in failure. For more information about formats, see <see cref="T:Microsoft.DirectX.Direct3D.Format" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.LockableBackBuffer">
      <summary>Gives the application the ability to lock the back buffer directly. Note that back buffers are not lockable unless the application specifies <see cref="F:Microsoft.DirectX.Direct3D.PresentFlag.LockableBackBuffer" /> when calling <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> or <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Reset(Microsoft.DirectX.Direct3D.PresentParameters[])" />. Lockable back buffers incur a performance cost on some graphics hardware configurations. Performing a lock operation (or using <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.UpdateSurface" /> to write on the lockable back buffer) decreases performance on many cards. In this case, consider using textured triangles to move data to the back buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentFlag.None">
      <summary>Use no presentation flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PresentInterval">
      <summary>Defines flags that describe the relationship between the adapter refresh rate and the rate at which <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are completed. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> and <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate">
      <summary>The runtime updates the window client area immediately, and might do so more than once during the adapter refresh period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations might be affected immediately. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Four">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every fourth screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Three">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every third screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Two">
      <summary>The driver waits for the vertical retrace period. <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than every second screen refresh. Check the <see cref="T:Microsoft.DirectX.Direct3D.Caps" />.<see cref="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals" /> property to determine whether the driver supports this option.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.One">
      <summary>The driver waits for the vertical retrace period (the runtime will beam follow to prevent tearing). <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operations are not affected more frequently than the screen refresh rate; the runtime completes one <see cref="T:Microsoft.DirectX.Direct3D.Device" />.<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation per adapter refresh period, at most. This option is always available for both windowed and full-screen swap chains.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PresentInterval.Default">
      <summary>Equivalent to setting <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.One" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PrimitiveType">
      <summary>Defines the primitives supported by MicrosoftMicrosoft Direct3DDirect3D. Using <see cref="O:TriangleStrips" /> or <see cref="O:TriangleFans" /> is often more efficient than using <see cref="O:TriangleLists" /> because fewer vertices are duplicated.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleFan">
      <summary>Renders the vertices as a triangle fan.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleStrip">
      <summary>Renders the vertices as a triangle strip. The back face Removing a face from the list of faces to render. Faces can be culled using a number of techniques including: back face, view frustum, and occlusion culling. flag is flipped automatically on even-numbered triangles.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.TriangleList">
      <summary>Renders the specified vertices as a sequence of isolated triangles. Each group of three vertices defines a separate triangle. Back face culling is affected by the current winding-order render state.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.LineStrip">
      <summary>Renders the vertices as a single polyline. Calls that use this primitive type fail if the count is less than two.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.LineList">
      <summary>Renders the vertices as a list of isolated straight line segments. Calls that use this primitive type fail if the count is less than two or is odd.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PrimitiveType.PointList">
      <summary>Renders the vertices as a collection of isolated points. This value is unsupported for indexed primitives.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.QueryType">
      <summary>Defines the query type.QueryTypeValid issue flagGetData bufferRuntimeImplicit beginning of queryVertexCache<see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" /><see cref="T:Microsoft.DirectX.Direct3D.VertexCache" />Retail/Debug<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" />ResourceManager<see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" /><see cref="T:Microsoft.DirectX.Direct3D.ResourceManager" />Debug only<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" />VertexStats<see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" /><see cref="T:Microsoft.DirectX.Direct3D.VertexStats" />Debug only<see cref="M:Microsoft.DirectX.Direct3D.Device.Present" />Occlusion<see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" /><see cref="T:System.Boolean" />Retail/Debug<see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" />Event<see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.Begin" />, <see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" /><see cref="T:System.UInt32" />Retail/DebugNot applicable For a ResourceManager query, the device behavior flags must include <see cref="F:Microsoft.DirectX.Direct3D.CreateFlags.CreateFlags.DisableDriverManagement" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.ResourceManager">
      <summary>Queries the resource manager. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.ResourceManager" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.Occlusion">
      <summary>Queries for the number of pixels that pass z-testing. These pixels are for primitives drawn between <see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.Begin" /> and <see cref="F:Microsoft.DirectX.Direct3D.IssueFlags.End" />. This option enables an application to check the occlusion result against zero. Zero is fully occluded, which means the pixels are not visible from the current camera position.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.VertexStats">
      <summary>Queries vertex statistics. For more information, see <see cref="T:Microsoft.DirectX.Direct3D.VertexStats" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.VertexCache">
      <summary>Queries for driver hints about data layout for vertex caching.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.QueryType.Event">
      <summary>Queries for any asynchronous events issued from application programming interface (API) calls.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RenderTargetsMax">
      <summary>Defines the maximum number of simultaneous render targets supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.RenderTargetsMax.Simultaneous">
      <summary>Allows four simultaneous render targets.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceType">
      <summary>Defines resource types.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.IndexBuffer">
      <summary>Index buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.VertexBuffer">
      <summary>Vertex buffer resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.CubeTexture">
      <summary>Cube texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.VolumeTexture">
      <summary>Volume texture resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Volume">
      <summary>Volume resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Surface">
      <summary>Surface resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResourceType.Textures">
      <summary>Texture resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResultCode">
      <summary>Defines result codes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.InvalidCall">
      <summary>Method call is invalid; for example, a method's parameter might not be a valid pointer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.InvalidDevice">
      <summary>Requested device type is not valid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.NotAvailable">
      <summary>Device does not support the queried technique.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceNotReset">
      <summary>Device has been lost but can be reset at this time.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.DeviceLost">
      <summary>Device has been lost but cannot be reset at this time. Therefore, rendering is not possible.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedTextureFilter">
      <summary>Device does not support the specified texture filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedFactorValue">
      <summary>Device does not support the specified texture factor value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.ConflictingTextureFilter">
      <summary>Current texture filters cannot be used together.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.TooManyOperations">
      <summary>Application is requesting more texture-filtering operations than the device supports.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedAlphaArgument">
      <summary>Device does not support a specified texture-blending argument for the Opacity of an image defined by an alpha value per pixel interleaved with the color components (for example, ARGB), an alpha value per pixel stored in a separate alpha surface, or a constant alpha value for the entire surface..</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedAlphaOperation">
      <summary>Device does not support a specified texture-blending operation for the alpha channel.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedColorArgument">
      <summary>Device does not support a specified texture-blending argument for color values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.UnsupportedColorOperation">
      <summary>Device does not support a specified texture-blending operation for color values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.WrongTextureFormat">
      <summary>Pixel format of the texture surface is not valid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ResultCode.Success">
      <summary>Operation was successful.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeMode">
      <summary>Defines constants that describe the supported shading modes. The first Point in 3-D space. of a triangle for flat shading mode is defined in the following manner.For a <see cref="O:TriangleLists" />, the first vertex of the triangle i is i * 3.For a <see cref="O:TriangleStrips" />, the first vertex of the triangle i is vertex i.For a <see cref="O:TriangleFans" />, the first vertex of the triangle i is vertex i + 1.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Phong">
      <summary>Not supported.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Gouraud">
      <summary>Gouraud shading mode. The color and specular components of the face are determined by a linear interpolation between all three of the triangle's vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.ShadeMode.Flat">
      <summary>Flat shading mode. The color and specular component of the first vertex in the triangle are used to determine the color and specular component of the face. These colors remain constant across the triangle; that is, they are not interpolated. The specular alpha is interpolated.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StateBlockType">
      <summary>Defines logical groups of device states.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.VertexState">
      <summary>Captures all of the current lights, the current vertex shader and its constants, and the texture stage states specified by <see cref="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex" /> and <see cref="T:Microsoft.DirectX.Direct3D.TextureTransform" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.PixelState">
      <summary>Captures the current pixel shader and its constants.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StateBlockType.All">
      <summary>Captures all device states.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilOperation">
      <summary>Defines the supported stencil operations. Stencil-buffer entries are integer values that range from 0 to 2n - 1, where n is the bit depth of the stencil buffer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Zero">
      <summary>Sets the stencil-buffer entry to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Decrement">
      <summary>Decrements the stencil-buffer entry, wrapping to the maximum value if the new value is less than 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Increment">
      <summary>Increments the stencil-buffer entry, wrapping to 0 if the new value exceeds the maximum value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Invert">
      <summary>Inverts the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.DecrementSaturation">
      <summary>Decrements the stencil-buffer entry, clamping to 0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.IncrementSaturation">
      <summary>Increments the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Keep">
      <summary>Does not update the stencil-buffer entry. This is the default value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.StencilOperation.Replace">
      <summary>Replaces the stencil-buffer entry with a reference value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SwapEffect">
      <summary>Defines swap effects.The state of the back buffer after a call to <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> is well-defined by each of these swap effects, and whether the MicrosoftMicrosoft Direct3DDirect3D device was created with a full-screen swap chain or a windowed swap chain has no effect on this state. In particular, the <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" /> swap effect operates the same whether windowed or full-screen, and the MicrosoftMicrosoft Direct3DDirect3D runtime guarantees this by creating extra buffers. As a result, it is recommended that applications use <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> whenever possible to avoid any performance penalties, because the current swap effect is always the most efficient in terms of memory consumption and performance. Full-screen destination alpha will not work with applications that use <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" /> or <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" />. This means that the <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.DestinationBlend" /> render state will not work as expected because, from the driver's point of view, full-screen swap chains with these swap effects do not have an explicit pixel format. The driver infers that it should take on the display format, which does not have an alpha channel. To work around this, use <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" /> and check the <see cref="T:Microsoft.DirectX.Direct3D.DriverCaps" />.<see cref="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsAlphaFullscreenFlipOrDiscard" /> property, which indicates whether the driver can perform alpha blending when <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" /> or <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> are used.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard">
      <summary>When a swap chain is created with a swap effect of <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" /> or <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy" />, the runtime guarantees that a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation will not affect the content of any of the back buffers. However, meeting this guarantee can involve substantial video memory or processing overheads, especially when implementing flip semantics for a windowed swap chain or copy semantics for a full-screen swap chain. An application can use the <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> swap effect to avoid these overheads and to enable the display driver to choose the most efficient presentation technique for the swap chain.<see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> is also the only swap effect that can be used when specifying a value other than <see cref="F:Microsoft.DirectX.Direct3D.MultiSampleType.None" /> for <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="T:Microsoft.DirectX.Direct3D.MultiSampleType" />. Like a swap chain that uses <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip" />, a swap chain that uses <see cref="F:Microsoft.DirectX.Direct3D.SwapEffect.Discard" /> might include more than one back buffer, any of which can be accessed using <see cref="F:Microsoft.DirectX.Direct3D.Device.GetBackBuffer(System.Int32,System.Int32,Microsoft.DirectX.Direct3D.BackBufferType).Device.GetBackBuffer" /> or <see cref="F:Microsoft.DirectX.Direct3D.SwapChain.GetBackBuffer(System.Int32,Microsoft.DirectX.Direct3D.BackBufferType).SwapChain.GetBackBuffer" />. The swap chain is essentially a queue where 0 always indexes the back buffer that will be displayed by the next <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation and from which buffers are discarded once they have been displayed. An application that uses this swap effect should update an entire back buffer before invoking a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation that displays it. The debug version of the runtime overwrites the contents of discarded back buffers with random data, to enable developers to verify that their applications are updating the entire back buffer surface correctly. For a full-screen swap chain, the presentation rate is determined by the value assigned to <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" /> when the device or swap chain is created. Unless this value is <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" />, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the presentation is implemented by means of copy operations, and always occurs immediately.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Copy">
      <summary>This swap effect can be specified only for a swap chain that comprises a single back buffer. Whether the swap chain is windowed or full-screen, the runtime guarantees the semantics implied by a copy-based <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation; specifically, that the operation leaves the content of the back buffer unchanged, instead of replacing it with the content of the front buffer as a flip-based <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation would. For a windowed swap chain, a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation causes the back buffer content to be copied immediately to the client area of the target window. No attempt is made to synchronize the copy with the vertical retrace period of the display adapter, so Visual artifact produced when the screen refresh rate is out of sync with an application's frame rate. The top portion of one frame is displayed at the same time as the bottom portion of another frame, with a discernible tear between the two partial images. effects may be observed. For a full-screen swap chain, the runtime uses a combination of flip and copy operations, which are supported by hidden back buffers if necessary, to accomplish the <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation. Accordingly, the presentation is synchronized with the display adapter's vertical retrace and its rate is constrained by the chosen presentation interval. A swap chain specified with the <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" /> flag is the only exception. (For more information, see <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" />.) In this case, a <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> operation copies the back buffer content directly to the front buffer without waiting for the vertical retrace.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.SwapEffect.Flip">
      <summary>The swap chain might include multiple back buffers and is essentially a circular queue that includes the front buffer. Within this queue, the back buffers are always numbered sequentially from 0 to (n - 1), where n is the number of back buffers, so that 0 denotes the least recently presented buffer. When <see cref="M:Microsoft.DirectX.Direct3D.Device.Present" /> is invoked, the queue is rotated so that the front buffer becomes the back buffer (n - 1), while the back buffer 0 becomes the new front buffer. For a full-screen swap chain, the presentation rate is determined by the value assigned to the <see cref="T:Microsoft.DirectX.Direct3D.PresentParameters" />.<see cref="P:Microsoft.DirectX.Direct3D.PresentParameters.PresentationInterval" /> when the device or swap chain is created. Unless this value is <see cref="F:Microsoft.DirectX.Direct3D.PresentInterval.Immediate" />, the presentation is synchronized with the vertical sync of the monitor. For a windowed swap chain, the flipping is implemented by means of copy operations, and the presentation always occurs immediately.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureAddress">
      <summary>Defines constants that describe the supported texture-addressing modes.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.MirrorOnce">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Mirror" /> and <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Clamp" />. Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value. The most common usage is for volume textures, where support for the full <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.MirrorOnce" /> texture-addressing mode is not necessary, but the data is symmetrical around the one axis.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Border">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Clamp">
      <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Mirror">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureAddress.Wrap" />, except that the texture is flipped at every integer junction. For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again, and so on.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureAddress.Wrap">
      <summary>Tiles the texture at every integer junction. For example, for u values between 0 and 3, the texture is repeated three times. No mirroring is performed.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureArgument">
      <summary>Defines the supported texture arguments. This enumeration is used by the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument0" />, <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument1" />, <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorArgument2" />, <see cref="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument0" />, <see cref="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument1" />, <see cref="P:Microsoft.DirectX.Direct3D.TextureState.AlphaArgument2" />, and <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ResultArgument" /> members of the <see cref="T:Microsoft.DirectX.Direct3D.TextureState" /> class. Use the <see cref="P:Microsoft.DirectX.Direct3D.Device.TextureState" /> property to set and retrieve texture arguments. An argument flag can be combined with a modifier, but two argument flags cannot be combined.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Constant">
      <summary>Select a constant from a texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.AlphaReplicate">
      <summary>Replicate the alpha value to the color components. During sampling, <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.AlphaReplicate" /> acts as a read modifier.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Complement">
      <summary>Take the complement, or 1.0 - x. This is a read modifier.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Temp">
      <summary>Specifies a temporary register color for read or write. <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.Temp" /> is supported if the <see cref="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp" /> device capability is present. The default value for the register is (0.0, 0.0, 0.0, 0.0). Permissions are read/write.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.TFactor">
      <summary>Specifies the texture factor set in the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.TextureFactor" /> property. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.TextureColor">
      <summary>Contains the texture color for the current texture stage. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.SelectMask">
      <summary>Mask value for all arguments; not used when setting texture arguments.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Specular">
      <summary>Specifies the specular color interpolated from vertex components during Gouraud shading. If the vertex does not contain a specular color, the default color is 0xFFFFFFFF. Permissions are read-only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Current">
      <summary>Gets the current element in the collection.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureArgument.Diffuse">
      <summary>Specifies the diffuse color interpolated from vertex components during Gouraud shading. If the vertex does not contain a diffuse color, the default color is 0xFFFFFFFF. Permissions are read-only.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCoordinateIndex">
      <summary>Defines the supported texture coordinate index values.This enumeration is used by the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.TextureCoordinateIndex" /> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.SphereMap">
      <summary>Uses the specified texture coordinates for sphere mapping.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpaceReflectionVector">
      <summary>Uses the reflection vector, transformed to camera space, as the input texture coordinate for the current stage's texture transformation. The reflection vector is computed from the input vertex position and normal vector.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpacePosition">
      <summary>Uses the vertex position, transformed to camera space, as the input texture coordinates for the current stage's texture transformation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.CameraSpaceNormal">
      <summary>Uses the vertex normal, transformed to camera space, as the input texture coordinates for the current stage's texture transformation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureCoordinateIndex.PassThru">
      <summary>Uses the specified texture coordinates contained in the vertex format. This value resolves to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureFilter">
      <summary>Defines texture filtering modes for a texture stage. To determine whether a format supports texture filter types other than <B>Point</B> (which is always supported), call <A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/manager.xml">Manager</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/manager/m/checkdeviceformat.xml">CheckDeviceFormat</A> with <A href="/directx/ref/ns/microsoft.directx.direct3d/e/usage/usage.xml#QueryFilter">QueryFilter</A>.The following example shows how to set a texture stage's magnification filter by setting the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/sampler.xml">Sampler</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/p/magfilter.xml">MagFilter</A> property to a member of this enumeration.<PRE CLASS="clsCode"><snippet xmlns:inetsdk="sdk">
	 ...
       device.SamplerState[0].MagFilter = TextureFilter.Linear;
	 ...
	 </snippet></PRE>The following example shows how to set a texture stage's minification filter by setting the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/sampler.xml">Sampler</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/p/minfilter.xml">MinFilter</A> property to a member of this enumeration.<PRE CLASS="clsCode"><snippet xmlns:inetsdk="sdk">
	 ...
       device.SamplerState[0].MinFilter = TextureFilter.Linear;
	 ...
	 </snippet></PRE>The following example shows how to set the texture filter to use between <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" G_RID="term_mipmap"><!--Also known as MIP map (Latin: multum in parvo, translated as "much in little"). A sequence of textures, each of which is a progressively lower-resolution, prefiltered representation of the same image. A higher-resolution image is used when a visible object is close to the viewer. As the object moves farther away (and gets smaller), lower-resolution images are used.-->mipmap</span> levels by setting the <A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/sampler.xml">Sampler</A>.<A href="/directx/ref/ns/microsoft.directx.direct3d/c/sampler/p/mipfilter.xml">MipFilter</A> property to a member of this enumeration.<PRE CLASS="clsCode"><snippet xmlns:inetsdk="sdk">
	 ...
       device.SamplerState[0].MipFilter = TextureFilter.Linear;
	 ...
	 </snippet></PRE>Not all valid filtering modes for a device apply to volume maps. In general, <B>Point</B> and <B>Linear</B> magnification filters are supported for volume maps. If the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/texturecaps/p/supportsmipvolumemap.xml">TextureCaps.SupportsMipVolumeMap</A> property is set to <b>true</b> (the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/texturecaps/texturecaps.xml">TextureCaps</A> can be found in the <A href="/directx/ref/ns/microsoft.directx.direct3d/s/caps/p/texturecaps.xml">Caps.TextureCaps</A> property), the <B>Point</B> mipmap filter and the <B>Point</B> and <B>Linear</B> minification filters are supported for volume maps. The device might or might not support the <B>Linear</B> mipmap filter for volume maps. Devices that support <span class="clsGlossary" onmouseover="showDef()" onmouseout="clearDef()" G_RID="term_anisotropic_filtering"><!--Mipmap filtering mode that compensates for anisotropic distortion.-->anisotropic filtering</span> for 2-D maps do not necessarily support it for volume maps. However, applications that enable anisotropic filtering, even if they do not support it, receive the best available filtering (probably linear).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.GaussianQuad">
      <summary>A 4-sample Gaussian filter used as a texture magnification or minification filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.PyramidalQuad">
      <summary>A 4-sample tent filter used as a texture magnification or minification filter.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Anisotropic">
      <summary>Anisotropic texture filtering used as a texture magnification or minification filter. This type of filtering compensates for distortion caused by the difference in angle between the texture polygon and the plane of the screen.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Linear">
      <summary>Bilinear interpolation filtering used as a texture magnification or minification filter. A weighted average of a 2x2 area of texels surrounding the desired pixel is used. The texture filter used between mipmap levels is trilinear mipmap interpolation, in which the rasterizer performs linear interpolation on pixel color, using the texels of the two nearest mipmap textures.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.Point">
      <summary>Point filtering used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter used between mipmap levels is based on the nearest point; that is, the rasterizer uses the color from the texel of the nearest mipmap texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureFilter.None">
      <summary>Mipmapping disabled. The rasterizer uses the magnification filter instead.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperation">
      <summary>Defines per-stage texture-blending operations.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Subtract">
      <summary>Subtracts the components of the second argument from those of the first argument. S<sub>RGBA</sub> = <i>Arg1</i> - <i>Arg2</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Lerp">
      <summary>Performs linear interpolation between the second and third source arguments by a proportion specified in the first source argument. S<sub>RGBA</sub> = (<i>Arg1</i>) * <i>Arg2</i> + (1- <i>Arg1</i>) * <i>Arg3</i>.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.MultiplyAdd">
      <summary>Performs a multiply-accumulate operation, in which it multiplies the last two arguments, adds them to the remaining input/source argument, and places that into the result. S<sub>RGBA</sub> = <i>Arg1</i> + <i>Arg2 *</i><i>Arg3</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.DotProduct3">
      <summary>Modulates the components of each argument as signed components, adds their products, and replicates the sum to all color channels, including alpha. This operation is supported for color and alpha operations. S<sub>RGBA</sub> = (<i>Arg1</i><sub>R</sub> * <i>Arg2</i><sub>R</sub> + <i>Arg1</i><sub>G</sub> * <i>Arg2</i><sub>G</sub> + <i>Arg1</i><sub>B</sub> * <i>Arg2</i><sub>B</sub>)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BumpEnvironmentMapLuminance">
      <summary>Performs per-pixel Technique for simulating the appearance of rough surfaces in 3-D scenes. Variations in depth are stored in a texture and applied to a primitive, using standard texture-blending techniques., using the environment map in the next texture stage with luminance. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BumpEnvironmentMap">
      <summary>Performs bump mapping on each pixel, using the environment map in the next texture stage without luminance. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateInvColorAddAlpha">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateColorAddAlpha" />, but uses the inverse of the color of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />). S<sub>RGBA</sub> = (1 - <i>Arg1</i><sub>RGB</sub>) * <i>Arg2</i><sub>RGB</sub> + <i>Arg1</i><sub>A</sub></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateInvAlphaAddColor">
      <summary>Similar to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateAlphaAddColor" />, but uses the inverse of the alpha of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />). S<sub>RGBA</sub> = (1 - <i>Arg1</i><sub>A</sub>) * <i>Arg2</i><sub>RGB</sub> + <i>Arg1</i><sub>RGB</sub></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateColorAddAlpha">
      <summary>Modulates the arguments, then adds the alpha of the first argument. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />). S<sub>RGBA</sub> = <i>Arg1</i><sub>RGB</sub> * <i>Arg2</i><sub>RGB</sub> + <i>Arg1</i><sub>A</sub></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.ModulateAlphaAddColor">
      <summary>Modulates the color of the second argument using the alpha of the first argument, then adds the result to argument one. This operation is supported only for color operations (<see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" />). S<sub>RGBA</sub> = <i>Arg1</i><sub>RGB</sub> + <i>Arg1</i><sub>A</sub> * <i>Arg2</i><sub>RGB</sub></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.PreModulate">
      <summary>This flag is set in stage n, the output of which is arg1. If stage n + 1 contains a texture, any <see cref="F:Microsoft.DirectX.Direct3D.TextureArgument.Current" /> value in stage n + 1 is premultiplied by that texture.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendCurrentAlpha">
      <summary>Performs linear blending on the current texture stage, using the alpha taken from the previous texture stage. S<sub>RGBA</sub> = <i>Arg1</i> * (Alpha) + <i>Arg2</i> * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendTextureAlphaPM">
      <summary>Performs linear blending on the current texture stage that uses a premultiplied alpha. S<sub>RGBA</sub> = <i>Arg1</i> + <i>Arg2</i> * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendFactorAlpha">
      <summary>Performs linear blending on the current texture stage, using a scalar alpha set with the <see cref="P:Microsoft.DirectX.Direct3D.RenderStates.TextureFactor" /> property. S<sub>RGBA</sub> = <i>Arg1</i> * (Alpha) + <i>Arg2</i> * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendTextureAlpha">
      <summary>Performs linear blending on the current texture stage, using the interpolated alpha from each vertex. S<sub>RGBA</sub> = <i>Arg1</i> * (Alpha) + <i>Arg2</i> * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.BlendDiffuseAlpha">
      <summary>Performs linear blending on the current texture stage, using the interpolated alpha from each vertex. S<sub>RGBA</sub> = <i>Arg1</i> * (Alpha) + <i>Arg2</i> * (1 - Alpha)</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSmooth">
      <summary>Adds the first and second arguments, then subtracts their product from the sum. S<sub>RGBA</sub> = <i>Arg1</i> + <i>Arg2</i> - <i>Arg1</i> * <i>Arg2</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSigned2X">
      <summary>Adds the components of the arguments with a -0.5 bias and shifts the products 1 bit to the left. S<sub>RGBA</sub> = (<i>Arg1</i> + <i>Arg2</i> - 0.5) &lt;&lt; 1
	</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.AddSigned">
      <summary>Adds the components of the arguments with a -0.5 bias, making the effective range of values -0.5 through 0.5. S<sub>RGBA</sub> = <i>Arg1</i> + <i>Arg2</i> -0.5</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Add">
      <summary>Adds the components of the arguments. S<sub>RGBA</sub> = <i>Arg1</i> + <i>Arg2</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate4X">
      <summary>Multiplies the components of the arguments, then shifts the products 2 bits to the left (effectively multiplying them by 4) for brightening. S<sub>RGBA</sub> = (<i>Arg1</i> * <i>Arg2</i>) &lt;&lt; 2
	</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate2X">
      <summary>Multiplies the components of the arguments, then shifts the products 1 bit to the left (effectively multiplying them by 2) for brightening. S<sub>RGBA</sub> = (<i>Arg1</i> * <i>Arg2</i>) &lt;&lt; 1
	</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Modulate">
      <summary>Multiplies the components of the arguments. S<sub>RGBA</sub> = <i>Arg1</i> * <i>Arg2</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.SelectArg2">
      <summary>Uses this texture stage's second color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" /> property, and the alpha argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.AlphaOperation" /> property. S<sub>RGBA</sub> = <i>Arg2</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.SelectArg1">
      <summary>Uses this texture stage's first color or alpha argument, unmodified, as the output. This operation affects the color argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.ColorOperation" /> property, and the alpha argument when used with the <see cref="P:Microsoft.DirectX.Direct3D.TextureState.AlphaOperation" /> property. S<sub>RGBA</sub> = <i>Arg1</i></summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureOperation.Disable">
      <summary>Disables output from the texture stage and all stages with a higher index. To disable texture mapping, set this flag as the color operation for the first texture stage (stage 0). Alpha operations cannot be disabled when color operations are enabled. Setting the alpha operation to <see cref="F:Microsoft.DirectX.Direct3D.TextureOperation.Disable" /> when color blending is enabled causes undefined behavior.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureTransform">
      <summary>Defines texture-stage state values. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.TextureState" />.<see cref="P:Microsoft.DirectX.Direct3D.TextureState.TextureTransform" /> property.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Projected">
      <summary>All texture coordinates are divided by the last element before being passed to the rasterizer. For example, if this flag is specified with the <see cref="F:Microsoft.DirectX.Direct3D.TextureTransform.Count3" /> flag, the first and second texture coordinates are divided by the third coordinate before being passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count4">
      <summary>4-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count3">
      <summary>3-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count2">
      <summary>2-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Count1">
      <summary>1-D texture coordinates are passed to the rasterizer.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TextureTransform.Disable">
      <summary>Texture coordinates are passed directly to the rasterizer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TransformType">
      <summary>Defines constants that describe transformation state values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World3">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World2">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World1">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.World">
      <summary>Identifies the world matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture7">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture6">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture5">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture4">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture3">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture2">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture1">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Texture0">
      <summary>Identifies the transformation matrix being set for the specified texture stage.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.Projection">
      <summary>Identifies the transformation matrix being set as the projection transformation matrix. The default value is the identity matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.TransformType.View">
      <summary>Identifies the transformation matrix being set as the view transformation matrix. The default value is the identity matrix.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Usage">
      <summary>Defines supported usage types for the current resource.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryVertexTexture">
      <summary>Queries the resource to verify support for vertex shader texture sampling.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryPostPixelShaderBlending">
      <summary>Queries the resource to verify support for post pixel shader blending. If <see cref="T:Microsoft.DirectX.Direct3D.Manager" />.<see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> fails with <see cref="F:Microsoft.DirectX.Direct3D.Usage.QueryPostPixelShaderBlending" />, post pixel blending operations are not supported. These operations include alpha test, pixel fog, render-target blending, color write enable, and Method to display a range of colors with a limited palette. Each pixel on the source image is represented by multiple pixels (usually a 2x2 square) on the destination image. From a distance, the eye blends the multiple pixels into one color that has more shades than the original palette. The technique results in a better visual appearance than the removal of low precision bits. See a standard graphics reference for details. Dithering is a supported option by DXSurface and  objects..</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QuerySrgbWrite">
      <summary>Queries the resource to determine whether a texture supports gamma correction during a write operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryFilter">
      <summary>Queries the resource format to determine whether it supports texture filter types other than <see cref="F:Microsoft.DirectX.Direct3D.TextureFilter.Point" /> (which is always supported).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QuerySrgbRead">
      <summary>Queries the resource to determine whether a texture supports gamma correction during a read operation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryLegacyBumpMap">
      <summary>Queries the resource about a legacy Technique for simulating the appearance of rough surfaces in 3-D scenes. Variations in depth are stored in a texture and applied to a primitive, using standard texture-blending techniques..</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.QueryDisplacementMap">
      <summary>Queries the resource to determine whether it will be a displacement map.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.AutoGenerateMipMap">
      <summary>Specifies that the resource automatically generate mipmaps. Automatic mipmap generation is not supported for volume textures and depth stencil surfaces/textures. This usage is not valid for resources in system memory (<see cref="F:Microsoft.DirectX.Direct3D.Pool.SystemMemory" />).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.Dynamic">
      <summary>Indicates that the vertex buffer requires dynamic memory use, which is useful for drivers because it enables them to determine where to place the buffer. In general, static vertex buffers are placed in video memory and dynamic vertex buffers are placed in accelerated graphics port (AGP)AGP memory. Note that there is no separate static use. If <see cref="F:Microsoft.DirectX.Direct3D.Usage.Dynamic" /> is not specified, the vertex buffer is made static.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.NPatches">
      <summary>Indicates when the vertex buffer will be used for drawing N-patches.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.RTPatches">
      <summary>Indicates when the vertex buffer will be used for drawing high-order primitives.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.Points">
      <summary>Indicates when the vertex buffer will be used for drawing points.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.DoNotClip">
      <summary>Indicates that the vertex buffer content will never require clipping. When rendering with buffers that have this flag set, the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.Clipping" /> property must be set to false.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing">
      <summary>Specifies that vertex processing be done in software. If this flag is not used, vertex processing is done in hardware. <see cref="F:Microsoft.DirectX.Direct3D.Usage.SoftwareProcessing" /> is used with <see cref="T:Microsoft.DirectX.Direct3D.Manager" />.<see cref="M:Microsoft.DirectX.Direct3D.Manager.CheckDeviceFormat" /> to determine whether a particular texture format can be used as a vertex texture during software vertex processing. If it can, the texture must be created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Scratch" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly">
      <summary>Informs the system that the application writes only to the vertex buffer. Using this flag enables the driver to choose the best memory location, which results in efficient write operations and rendering. Attempts to read from a vertex buffer created with this capability will fail. Buffers that are created with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" /> and that do not specify <see cref="F:Microsoft.DirectX.Direct3D.Usage.WriteOnly" /> might experience significant drops in performance.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.DepthStencil">
      <summary>Specifies that the resource will be a depth stencil buffer. <see cref="F:Microsoft.DirectX.Direct3D.Usage.DepthStencil" /> can be used only with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget">
      <summary>Specifies that the resource will be a render target. <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> can be used only with <see cref="F:Microsoft.DirectX.Direct3D.Pool.Default" />.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBlend">
      <summary>Defines enumerated values used to control the number of matrices that the system applies when performing multimatrix vertex blending. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.VertexBlend" /> parameters. Multimatrix vertex blending (also known as geometry blending) requires that an application use a vertex format that has blending (beta) weights for each vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.ZeroWeights">
      <summary>Uses a single matrix with a weight of 1.0.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.Tweening">
      <summary>Uses the value assigned to <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.TweenFactor" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.ThreeWeights">
      <summary>Enables vertex blending between the four matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0, 1, 2, and 3. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World2" />, and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World3" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.TwoWeights">
      <summary>Enables vertex blending between the three matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0, 1, and 2. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" />, <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" />, and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World2" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.OneWeights">
      <summary>Enables vertex blending between the two matrices set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index values for the transformation states are 0 and 1. These matrices also can be set using the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" /> and <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World1" /> properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexBlend.Disable">
      <summary>Disables vertex blending and applies only the world matrix (set by the <see cref="T:Microsoft.DirectX.Direct3D.Transforms" />.<see cref="M:Microsoft.DirectX.Direct3D.Transforms.SetWorldMatrixByIndex(System.Int32,Microsoft.DirectX.Matrix)" /> method, where the index value for the transformation state is 0, or with the <see cref="P:Microsoft.DirectX.Direct3D.Transforms.World" /> property).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormats">
      <summary>Describes values that define a vertex format used to describe the contents of vertices that are stored interleaved in a single data stream. Vertex format codes generally are used to specify data to be processed by fixed function vertex processing.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionNormal">
      <summary>Vertex format includes a vertex normal vector. This value cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed" /> value.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaD3DColor">
      <summary>Last beta field in the vertex position data will be of type <see cref="T:System.Int32" />. The data in the beta fields are used with matrix palette skinning to specify matrix indices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4">
      <summary>Last beta field in the vertex position data will be of type UBYTE4. The data in the beta fields are used with matrix palette skinning to specify matrix indices. The vertex format is declared as <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend5" /> | <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4" />. Both weights and MatrixIndices are included in beta[], where <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.LastBetaUByte4" /> directs the compiler to interpret the last uint (beta[5]) as type UBYTE4. The last beta is determined by <see cref="T:Microsoft.DirectX.Direct3D.VertexBlend" />, not by the number of betas in the position format. For example, if <see cref="T:Microsoft.DirectX.Direct3D.VertexBlend" /> is <see cref="F:Microsoft.DirectX.Direct3D.VertexBlend.TwoWeights" />, and the position format is as specified above, the last beta will be beta[2] and will be used as a uint with 4-byte indices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture8">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture7">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture6">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture5">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture4">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture3">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture2">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture1">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Texture0">
      <summary>Number of texture coordinate sets for this vertex. The actual values for these flags are not sequential.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureCountShift">
      <summary>Number of bits by which to shift an integer value that identifies the number of texture coordinates for a vertex.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.TextureCountMask">
      <summary>Mask value for texture flag bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Specular">
      <summary>Vertex format includes a Material property that determines how a point of light on a shiny object corresponds to the reflected light source. The specular property of a material is one of two properties that determines how a material reflects light. See also "emissive property." color component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Diffuse">
      <summary>Vertex format includes a diffuse color component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PointSize">
      <summary>Vertex format is specified in point size. This size is expressed in camera space units for vertices that are not transformed and lit, and in device-space units for vertices that are transformed and lit.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Normal">
      <summary>Vertex format includes a vertex normal vector. This value cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed" /> flag.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionW">
      <summary>Vertex format contains transformed and clipped x, y, z, w data. <see cref="M:Microsoft.DirectX.Direct3D.Device.ProcessVertices" /> does not invoke the clipper, but instead outputs data in clip coordinates. This constant is designed for, and can only be used with, the programmable vertex pipeline.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend5">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, MicrosoftMicrosoft Direct3DDirect3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend4">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, MicrosoftMicrosoft Direct3DDirect3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend3">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, MicrosoftMicrosoft Direct3DDirect3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend2">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, MicrosoftMicrosoft Direct3DDirect3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionBlend1">
      <summary>Vertex format contains position data and a corresponding number of weighting (beta) values to use for multimatrix vertex blending operations. Currently, MicrosoftMicrosoft Direct3DDirect3D can blend with up to three weighting values and four blending matrices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Transformed">
      <summary>Vertex format includes the position of a transformed vertex. This flag cannot be used with the <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Position" /> or <see cref="F:Microsoft.DirectX.Direct3D.VertexFormats.Normal" /> flags.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.Position">
      <summary>Mask for position bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.PositionMask">
      <summary>Mask for position bits.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexFormats.None">
      <summary>No vertex format.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Wrap">
      <summary>Defines texture wrapping. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /> property and the Wrap1 through Wrap15 properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.W">
      <summary>W texture wrapping (wrapping in the direction of the third dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.V">
      <summary>V texture wrapping (wrapping in the direction of the second dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.Wrap.U">
      <summary>U texture wrapping (wrapping in the direction of the first dimension).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.WrapCoordinates">
      <summary>Defines supported wrap coordinates. This enumeration is used by the <see cref="T:Microsoft.DirectX.Direct3D.RenderStates" />.<see cref="P:Microsoft.DirectX.Direct3D.RenderStates.Wrap0" /> property and the Wrap1 through Wrap15 properties.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Zero">
      <summary>U texture wrapping (wrapping in the direction of the first dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Three">
      <summary>Texture wrapping in the direction of the fourth dimension.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.Two">
      <summary>W texture wrapping (wrapping in the direction of the third dimension).</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.WrapCoordinates.One">
      <summary>V texture wrapping (wrapping in the direction of the second dimension).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileErrorCodes">
      <summary>The methods used to work with MicrosoftMicrosoft DirectXDirectX XFiles can return the following return values. Exceptions thrown from methods that use XFiles can also contain these values.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoInternet">
      <summary>Internet connection was not found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadCacheFile">
      <summary>Cache file that contains the .x file date is invalid. A cache file contains data retrieved from the network, cached on the hard disk, and retrieved in subsequent requests.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreData">
      <summary>No further data is available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreStreamHandles">
      <summary>No stream handles are available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadIntrinsics">
      <summary>Intrinsics are invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoMoreObjects">
      <summary>All objects have been enumerated.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.InternalError">
      <summary>Internal error occurred.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadDataReference">
      <summary>Data reference is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadArraySize">
      <summary>Array size is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NoTemplate">
      <summary>No template is available.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.ParseError">
      <summary>File could not be parsed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFile">
      <summary>File is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileCompressionType">
      <summary>File compression type is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileFloatSize">
      <summary>Floating-point size is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileVersion">
      <summary>File version is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadFileType">
      <summary>File is not a DirectX .x file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadResource">
      <summary>Resource is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.UrlNotFound">
      <summary>URL could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.ResourceNotFound">
      <summary>Resource could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.FileNotFound">
      <summary>File could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NotDoneYet">
      <summary>Operation has not completed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.NotFound">
      <summary>Object could not be found.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadAlloc">
      <summary>Memory allocation failed.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadStreamHandle">
      <summary>Stream handle is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadType">
      <summary>Object type is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.BadValue">
      <summary>Parameter is invalid.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileErrorCodes.Badobject">
      <summary>Object is invalid.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.XFileFormat">
      <summary>Defines file formats for XFiles. This enumeration is used by <see cref="T:Microsoft.DirectX.Direct3D.Mesh" />.<see cref="M:Microsoft.DirectX.Direct3D.Mesh.Save" /> and <see cref="T:Microsoft.DirectX.Direct3D.XFileManager" />.<see cref="M:Microsoft.DirectX.Direct3D.XFileManager.CreateSaveObject(System.String,Microsoft.DirectX.Direct3D.XFileFormat)" />.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Compressed">
      <summary>Indicates a compressed file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Binary">
      <summary>Indicates a binary file.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.XFileFormat.Text">
      <summary>Indicates a text file.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AdapterDetails">
      <summary>Contains information identifying the adapter.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AdapterDetails.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Description">
      <summary>Used for presentation to the user.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the type of chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceIdentifier">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the type of chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DeviceName">
      <summary>Device name for Microsoft® Windows® Graphics Device Interface (GDI).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverName">
      <summary>Used for presentation to the user. This should not be used to identify particular drivers, because many different strings might be associated with the same device and driver from different vendors.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.DriverVersion">
      <summary>Identify the version of the Microsoft Direct3D® driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.Revision">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the revision level of the chip set. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.SubSystemId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the subsystem, typically the particular board. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.VendorId">
      <summary>Can be used to help identify a particular chip set. Query this member to identify the manufacturer. The value can be zero if unknown.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AdapterDetails.WhqlLevel">
      <summary>Used to determine the Windows Hardware Quality Labs (WHQL) validation level for this driver and device pair.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.AddressCaps">
      <summary>Texture-addressing capabilities for Direct3DTexture objects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.AddressCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsBorder">
      <summary>Device supports setting coordinates outside the range [0.0, 1.0] to the border color, as specified by the BorderColor texture-stage state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsClamp">
      <summary>Device can clamp textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsIndependentUV">
      <summary>Device can separate the texture-addressing modes of the u and v coordinates of the texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirror">
      <summary>Device can mirror textures to addresses.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsMirrorOnce">
      <summary>Device can take the absolute value of the texture coordinate (thus, mirroring around 0) and then clamp to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.AddressCaps.SupportsWrap">
      <summary>Device can wrap textures to addresses.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BehaviorFlags">
      <summary>Provides properties that control global behavior of the device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags[])">
      <summary>Initializes a new instance of the object.</summary>
      <param name="newBehavior" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor(Microsoft.DirectX.Direct3D.CreateFlags)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="initialBehavior" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BehaviorFlags.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.AdapterGroupDevice">
      <summary>Application asks the device to drive all the heads that this master adapter owns. The flag is illegal on non-master adapters.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.DisableDriverManagement">
      <summary>Specifies that Direct3D should manage resources instead of the driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.FpuPreserve">
      <summary>Indicates that the application needs either double-precision floating-point unit (FPU) or FPU exceptions enabled. Microsoft® Direct3D® sets the FPU state each time it is called.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.HardwareVertexProcessing">
      <summary>Specifies hardware vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MixedVertexProcessing">
      <summary>Specifies mixed (both software and hardware) vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.MultiThreaded">
      <summary>Indicates that the application requests Direct3D to be multithread safe. This makes Direct3D take its global critical section more frequently, which can degrade performance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.PureDevice">
      <summary>Specifies that Direct3D does not support Get* calls for anything that can be stored in state blocks. It also tells Direct3D not to provide any emulation services for vertex processing. This means that if the device does not support vertex processing, then the application can use only post-transformed vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.SoftwareVertexProcessing">
      <summary>Specifies software vertex processing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BehaviorFlags.Value">
      <summary>Retrieves or sets the value of <see cref="T:Microsoft.DirectX.Direct3D.CreateFlags" /> constants that control global behavior of the device. These constants mirror the constants passed to the device when it was created.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.BlendCaps">
      <summary>Blending capabilities</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.BlendCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBlendFactor">
      <summary>The driver supports both <see cref="F:Microsoft.DirectX.Direct3D.Blend.BlendFactor" /> and <see cref="F:Microsoft.DirectX.Direct3D.Blend.InvBlendFactor" /> constants of the <see cref="T:Microsoft.DirectX.Direct3D.Blend" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothInverseSourceAlpha">
      <summary>Source blend factor is (1-As,1-As,1-As,1-As) and destination blend factor is (As,As,As,As); the destination blend selection is overridden.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsBothSourceAlpha">
      <summary>This blend mode is obsolete.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationAlpha">
      <summary>Blend factor is (Ad, Ad, Ad, Ad).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsDestinationColor">
      <summary>Blend factor is (Rd, Gd, Bd, Ad).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationAlpha">
      <summary>Blend factor is (1-Ad, 1-Ad, 1-Ad, 1-Ad).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseDestinationColor">
      <summary>Blend factor is (1-Rd, 1-Gd, 1-Bd, 1-Ad).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceAlpha">
      <summary>Blend factor is (1-As, 1-As, 1-As, 1-As).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsInverseSourceColor">
      <summary>Blend factor is (1-Rs, 1-Gs, 1-Bs, 1-As).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsOne">
      <summary>Blend factor is (1, 1, 1, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlpha">
      <summary>Blend factor is (As, As, As, As).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceAlphaSat">
      <summary>Blend factor is (f, f, f, 1); f = min(As, 1-Ad).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsSourceColor">
      <summary>Blend factor is (Rs, Gs, Bs, As).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.BlendCaps.SupportsZero">
      <summary>Blend factor is (0, 0, 0, 0).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Box">
      <summary>Defines a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Box.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Back">
      <summary>Position of the back of the box on the Z axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Bottom">
      <summary>Position of the bottom of the box on the Y axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Front">
      <summary>Position of the front of the box on the Z axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Left">
      <summary>Position of the left side of the box on the X axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Right">
      <summary>Position of the right side of the box on the X axis.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Box.Top">
      <summary>Position of the top of the box on the Y axis.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Caps">
      <summary>Represents the capabilities of the hardware exposed through the Microsoft® Direct3D® object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Caps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinal">
      <summary>Adapter on which this Direct3DDevice object was created. This ordinal is valid only to pass to methods of the Direct3d object that created this Direct3DDevice object. The Direct3d object can always be retrieved by calling Device9Getdirect3d.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AdapterOrdinalInGroup">
      <summary>This number indicates the order in which heads are referenced by the application programming object. The master adapter always has AdapterOrdinalInGroup = 0. These values do not correspond to the adapter ordinals passed to the IDirect3D9 methods. They apply only to heads within a group.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.AlphaCompareCaps">
      <summary>Alpha-test comparison capabilities. This member can include the same capability flags defined for the ZCmpCaps member. If this member contains only the ZCmpCaps capability or only the ZCmpCaps capability, the driver does not support alpha tests. Otherwise, the flags identify the individual comparisons that are supported for alpha testing.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CubeTextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DCubeTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the per-stage texture-filtering flags defined for the TextureFilterCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.CursorCaps">
      <summary>Bit mask indicating what hardware support is available for cursors. Microsoft® DirectX® 9.0 does not define alpha-blending cursor capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeclTypes">
      <summary>A combination of one or more data types contained in a vertex declaration. See D3DDTCAPSConstants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DestinationBlendCaps">
      <summary>Destination-blending capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceCaps">
      <summary>Flags identifying the capabilities of the device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DeviceType">
      <summary>Member of the D3ddevtype enumerated type, which identifies what type of resources are used for processing vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.DriverCaps">
      <summary>Driver-specific capabilities</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ExtentsAdjust">
      <summary>Number of pixels to adjust the extents rectangle outward to accommodate antialiasing kernels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandBottom">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandLeft">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandRight">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.GuardBandTop">
      <summary>Screen-space coordinate of the guard-band clipping region. Coordinates inside this rectangle but outside the viewport rectangle are automatically clipped.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.LineCaps">
      <summary>Defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MasterAdapterOrdinal">
      <summary>This number indicates which device is the master for this subordinate.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxActiveLights">
      <summary>Maximum number of lights that can be active simultaneously. For a given physical device, this capability might vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxAnisotropy">
      <summary>Maximum valid value for the D3DTSS_MAXANISOTROPY texture-stage state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxNPatchTessellationLevel">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPixelShader30InstructionSlots">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPointSize">
      <summary>Maximum size of a point primitive. If set to 1.0f then device does not support point size control. The range is greater than or equal to 1.0f.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxPrimitiveCount">
      <summary>Maximum number of primitives for each call. Note that when Microsoft® Direct3D® is working with a Microsoft® DirectX® 6.0 or Microsoft® DirectX® 7.0 driver, this field is set to 0xFFFF. This means that not only the number of primitives but also the number of vertices is limited by this value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxSimultaneousTextures">
      <summary>Maximum number of textures that can be simultaneously bound to the texture blending stages. This value is the number of textures that can be used in a single pass. If the same texture is used in two blending stages, it counts as two when compared against the MaxSimultaneousTextures value. In the programmable pipeline, this indicates the number of texture registers supported by pixel shaders on this particular piece of hardware, and the number of texture declaration instructions that can be present.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreams">
      <summary>Maximum number of concurrent data streams for Device9Setstreamsource. The valid range is 1 to 16. Note that if this value is 0, then the driver is not a Microsoft® DirectX® 9.0 driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxStreamStride">
      <summary>Maximum stride for Device9Setstreamsource.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureAspectRatio">
      <summary>Maximum texture aspect ratio supported by the hardware, typically a power of 2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureBlendStages">
      <summary>Maximum number of texture-blending stages supported. This value is the number of blenders available. In the Microsoft® DirectX® 9.0 programmable pixel pipeline, this should correspond to the number of instructions supported by pixel shaders on this particular implementation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureHeight">
      <summary>Maximum texture height for this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureRepeat">
      <summary>This number represents the maximum range of the integer bits of the post-normalized texture coordinates. A texture coordinate is stored as a 32-bit signed integer using 27 bits to store the integer part and 5 bits for the floating point fraction. The maximum integer index, 227, is used to determine the maximum texture coordinate, depending on how the hardware does texture-coordinate scaling.Some hardware reports the cap D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE. For this case, the device defers scaling texture coordinates by the texture size until after interpolation and application of the texture address mode, so the number of times a texture can be wrapped is given by the integer value in MaxTextureRepeat.Less desirably, on some hardware D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE is not set and the device scales the texture coordinates by the texture size (using the highest level of detail) prior to interpolation. This limits the number of times a texture can be wrapped to MaxTextureRepeat / texture size.For example, assume that MaxTextureRepeat is equal to 32 KB and the size of the texture is 4 KB. If the hardware sets D3DPTEXTURECAPS_TEXREPEATNOTSCALEDBYSIZE, then the number of times a texture can be wrapped is equal to MaxTextureRepeat, which is 32 KB in this example. Otherwise, the number of times a texture can be wrapped is equal to MaxTextureRepeat divided by texture size, which is 227/4 KB in this example.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxTextureWidth">
      <summary>Maximum texture width for this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxUserClipPlanes">
      <summary>Maximum number of user-defined clipping planes supported. This member can range from 0 through D3DMAXUSERCLIPPLANES. For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrices">
      <summary>Maximum number of matrices that this device can apply when performing multimatrix vertex blending. For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexBlendMatrixIndex">
      <summary>DWORD value that specifies the maximum matrix index that can be indexed into using the per-vertex indices. The number of matrices is MaxVertexBlendMatrixIndex + 1, which is the size of the matrix palette. If normals are present in the vertex data that needs to be blended for lighting, then the number of matrices is half the number specified by this capability flag. If MaxVertexBlendMatrixIndex is set to zero, the driver does not support indexed vertex blending. If this value is not zero then the valid range of indices is zero through MaxVertexBlendMatrixIndex. A zero value for MaxVertexBlendMatrixIndex indicates that the driver does not support indexed matrices.When software vertex processing is used, 256 matrices could be used for indexed vertex blending, with or without normal blending.For a given physical device, this capability may vary across Direct3DDevice objects depending on the parameters supplied to .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexIndex">
      <summary>Maximum size of indices supported for hardware vertex processing. It is possible to create 32-bit index buffers by specifying D3DFMT_INDEX32; however, you will not be able to render with the index buffer unless this value is greater than 0x0000FFFF.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexShader30InstructionSlots">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexShaderConst">
      <summary>The number of vertex shader VsRegisters that are reserved for constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVertexW">
      <summary>Maximum W-based depth value that the device supports.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.MaxVolumeExtent">
      <summary>Maximum value for any of the three dimensions (width, height, and depth) of a volume texture.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberOfAdaptersInGroup">
      <summary>Number of adapters in this adapter group (only if master). This will be 1 for conventional adapters. The value will be greater than 1 for the master adapter of a multihead card. The value will be 0 for a subordinate adapter of a multihead card. Each card can have at most one master, but may have many subordinates.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.NumberSimultaneousRts">
      <summary>Number of simultaneous render targets. This number must be at least one.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShader1xMaxValue">
      <summary>Maximum value of pixel shader arithmetic component. This value indicates the internal range of values supported for pixel color blending operations. Within the range that they report to, implementations must allow data to pass through pixel processing unmodified (unclamped). Normally, the value of this member is an absolute value. For example, a 1.0 indicates that the range is -1.0 to 1, and an 8.0 indicates that the range is -8.0 to 8.0. The value must be &gt;= 1.0 for any hardware that supports pixel shaders.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderCaps">
      <summary>Pixel shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PixelShaderVersion">
      <summary>Two numbers that represent the pixel shader main and sub versions. For more information about the versions supported in Microsoft® DirectX® 9.0, see the pixel shader PsPs.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PresentationIntervals">
      <summary>Bit mask of values representing what presentation swap intervals are available.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.PrimitiveMiscCaps">
      <summary>General capabilities for this primitive. This member can be one or more of the following flags.Miscellaneous driver primitive capabilities. See D3DPMISCCAPSConstants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.RasterCaps">
      <summary>Information on raster-drawing capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ShadeCaps">
      <summary>Shading operations capabilities. It is assumed, in general, that if a device supports a given command at all, it supports the D3DSHADE_FLAT mode (as specified in the D3dshademode enumerated type). This flag specifies whether the driver can also support Gouraud shading and whether alpha color components are supported. When alpha components are not supported, the alpha value of colors generated is implicitly 255. This is the maximum possible alpha (that is, the alpha component is at full intensity). The color, specular highlights, fog, and alpha interpolants of a triangle each have capability flags that an application can use to find out how they are implemented by the device driver.This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.SourceBlendCaps">
      <summary>Source-blending capabilities. This member can be one or more of the following flags. (The RGBA values of the source and destination are indicated by the subscripts s and d.)</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StencilCaps">
      <summary>Flags specifying supported stencil-buffer operations. Stencil operations are assumed to be valid for all three stencil-buffer operation render states (D3DRS_STENCILFAIL, D3DRS_STENCILPASS, and D3DRS_STENCILFAILZFAIL).For more information, see the D3dstencilop enumerated type.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.StretchRectangleFilterCaps">
      <summary>Combination of constants that describe the operations supported by Device9Stretchrect. The flags that may be set in this field are:For more information, see and .</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureAddressCaps">
      <summary>Texture-addressing capabilities for Direct3DTexture objects. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureCaps">
      <summary>Miscellaneous texture-mapping capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the following per-stage texture-filtering flags.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.TextureOperationCaps">
      <summary>Combination of flags describing the texture operations supported by this device. The following flags are defined.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexFormatCaps">
      <summary>Flexible vertex format capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexProcessingCaps">
      <summary>Vertex processing capabilities. For a given physical device, this capability might vary across Direct3DDevice objects depending on the parameters supplied to 9Createdevice.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderCaps">
      <summary>Vertex Shader capabilities.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexShaderVersion">
      <summary>Vertex shader version, indicating the level of vertex shader supported by the device. Only vertex shaders with version numbers equal to or less than this will succeed in calls to Device9Createvertexshader. The level of shader is specified to Device9Createvertexshader as the first token in the vertex shader token stream. The main version number is encoded in the second byte. The low byte contains a sub-version number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VertexTextureFilterCaps">
      <summary>Device supports vertex shader texture filter capability.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureAddressCaps">
      <summary>Texture-addressing capabilities for Direct3DVolumeTexture objects. This member can be one or more of the flags defined for the TextureAddressCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.VolumeTextureFilterCaps">
      <summary>Texture-filtering capabilities for a Direct3DVolumeTexture object. Per-stage filtering capabilities reflect which filtering modes are supported for texture stages when performing multiple-texture blending with the Device object. This member can be any combination of the per-stage texture-filtering flags defined for the TextureFilterCaps member.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Caps.ZCompareCaps">
      <summary>Z-buffer comparison capabilities. This member can be one or more of the following flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ClipStatus">
      <summary>Describes the current clip status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ClipStatus.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipIntersection">
      <summary>Clip intersection flags that describe the current clip status. This member can take the same flags as ClipUnion.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ClipStatus.ClipUnion">
      <summary>Clip union flags that describe the current clip status. This member can be one or more of the following flags.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ColorValue">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Single,System.Single,System.Single)">
      <summary />
      <param name="r" />
      <param name="g" />
      <param name="b" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary />
      <param name="r" />
      <param name="g" />
      <param name="b" />
      <param name="a" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FromArgb(System.Int32)">
      <summary />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.FromColor(System.Drawing.Color)">
      <summary />
      <param name="color" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ColorValue.ToArgb">
      <summary />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Alpha">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Blue">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Green">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ColorValue.Red">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ComparisonCaps">
      <summary>Comparison capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ComparisonCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsAlways">
      <summary>Always pass the test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsEqual">
      <summary>Pass the test if the new value equals the current value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreater">
      <summary>Pass the test if the new value is greater than the current value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsGreaterEqual">
      <summary>Pass the test if the new value is greater than or equal to the current value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLess">
      <summary>Pass the test if the new value is less than the current value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsLessEqual">
      <summary>Pass the test if the new value is less than or equal to the current value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNever">
      <summary>Always fail the test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ComparisonCaps.SupportsNotEqual">
      <summary>Pass the test if the new value does not equal the current value.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CursorCaps">
      <summary>Indicating what hardware support is available for cursors.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CursorCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsColor">
      <summary>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports at least a hardware color cursor in high-resolution modes (with scan lines greater than or equal to 400).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CursorCaps.SupportsLowResolution">
      <summary>A full-color cursor is supported in hardware. Specifically, this flag indicates that the driver supports a hardware color cursor in both high-resolution and low-resolution modes (with scan lines less than 400).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored">
      <summary>Custom Vertex Format structure containing position and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.#ctor(System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColored.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured">
      <summary>Custom Vertex Format structure containing position, diffuse color, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(Microsoft.DirectX.Vector3,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.GetPosition">
      <summary>Returns the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionColoredTextured.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal">
      <summary>Custom Vertex Format structure containing position and normal data.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.GetNormal">
      <summary>Return the normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormal.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored">
      <summary>Custom Vertex Format structure containing position, normal data, and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.GetNormal">
      <summary>Return normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured">
      <summary>Custom Vertex Format structure containing position, normal data, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nx">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Ny">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Nz">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="nor" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="nxvalue" />
      <param name="nyvalue" />
      <param name="nzvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.GetNormal">
      <summary>Get the normal data.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.GetPosition">
      <summary>Returns the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.SetNormal(Microsoft.DirectX.Vector3)">
      <summary>Set normal data.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalTextured.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly">
      <summary>Custom Vertex Format structure containing position only.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(Microsoft.DirectX.Vector3)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured">
      <summary>Custom Vertex Format structure containing position and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="pos" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.SetPosition(Microsoft.DirectX.Vector3)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.PositionTextured.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.Transformed">
      <summary>Custom Vertex Format structure containing transformed vertices.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(Microsoft.DirectX.Vector4)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.GetPosition">
      <summary>Get the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.Transformed.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored">
      <summary>Custom Vertex Format structure containing transformed vertices and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(Microsoft.DirectX.Vector4,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="c" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColored.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured">
      <summary>Custom Vertex Format structure containing transformed vertices, one set of texture coordinates, and diffuse color.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Color">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(Microsoft.DirectX.Vector4,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Int32,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="c" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.GetPosition">
      <summary>Return the position</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedColoredTextured.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured">
      <summary>Custom Vertex Format structure containing transformed vertices, and one set of texture coordinates.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Format">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Rhw">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tu">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Tv">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.X">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Y">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.Z">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="xvalue" />
      <param name="yvalue" />
      <param name="zvalue" />
      <param name="rhwvalue" />
      <param name="u" />
      <param name="v" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.GetPosition">
      <summary>Return the position.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.SetPosition(Microsoft.DirectX.Vector4)">
      <summary>Set the position.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.CustomVertex.TransformedTextured.StrideSize">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeclarationTypeCaps">
      <summary>Vertex data constants.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsDec3N">
      <summary>3-D signed 10 10 10 format normalized and expanded to (v[0]/511.0, v[1]/511.0, v[2]/511.0, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Four">
      <summary>4-D 16-bit floating point numbers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsFloat16Two">
      <summary>2-D 16-bit floating point numbers.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort2N">
      <summary>Normalized, 2-D signed short, expanded to (first byte/32767.0, second byte/32767.0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsShort4N">
      <summary>Normalized, 4-D signed short, expanded to (first byte/32767.0, second byte/32767.0, third byte/32767.0, fourth byte/32767.0).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4">
      <summary>4-D unsigned byte.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUByte4N">
      <summary>Normalized, 4-D unsigned byte. Each of the four bytes is normalized by dividing to 255.0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUDec3">
      <summary>3-D unsigned 10 10 10 format expanded to (value, value, value, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort2N">
      <summary>Normalized, 2-D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, 0, 1).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeclarationTypeCaps.SupportsUShort4N">
      <summary>Normalized 4-D unsigned short, expanded to (first byte/65535.0, second byte/65535.0, third byte/65535.0, fourth byte/65535.0).</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCaps">
      <summary>Retrieves device-specific information about a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanDrawSystemToNonLocal">
      <summary>Device supports blits from system-memory textures to nonlocal video-memory textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanRenderAfterFlip">
      <summary>Device can queue rendering commands after a page flip. Applications do not change their behavior if this flag is set; this capability means that the device is relatively fast.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.CanStretchRectangleFromTextures">
      <summary>Device supports StretchRectangle using a texture as the source.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateNPatch">
      <summary>Device supports adaptive tessellation of N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsAdaptiveTessellateRtPatch">
      <summary>Device supports adaptive tessellation of RT-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDMapNPatch">
      <summary>Device supports displacement maps for N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2">
      <summary>Device can support DrawPrimitives2.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitives2Ex">
      <summary>Device can support extended DrawPrimitives2; that is, this is a DirectX 7.0-compliant driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsDrawPrimitivesTransformedVertex">
      <summary>Device exports a DrawPrimitive-aware hardware abstraction layer (HAL).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteSystemMemory">
      <summary>Device can use execute buffers from system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsExecuteVideoMemory">
      <summary>Device can use execute buffers from video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareRasterization">
      <summary>Device has hardware acceleration for scene rasterization.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsHardwareTransformAndLight">
      <summary>Device can support transformation and lighting in hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsNPatches">
      <summary>Device supports N patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPreSampledDMapNPatch">
      <summary>Device supports presampled displacement maps for N-patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsPureDevice">
      <summary>Device can support rasterization, transform, lighting, and shading in hardware.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsQuinticRtPatches">
      <summary>Device supports quintic Bézier curves and B-splines.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatches">
      <summary>Device supports rectangular and triangular patches.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsRtPatchHandleZero">
      <summary>When this device capability is set, the hardware architecture does not require caching of any information and uncached patches (handle zero) will be drawn as efficiently as cached ones.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsSeparateTextureMemories">
      <summary>Device is texturing from separate memory pools.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsStreamOffset">
      <summary>Device supports stream offsets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureNonLocalVideoMemory">
      <summary>Device can retrieve textures from non-local video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureSystemMemory">
      <summary>Device can retrieve textures from system memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTextureVideoMemory">
      <summary>Device can retrieve textures from device memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexSystemMemory">
      <summary>Device can use buffers from system memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.SupportsTransformedVertexVideoMemory">
      <summary>Device can use buffers from video memory for transformed and lit vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCaps.VertexElementScanSharesStreamOffset">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DeviceCreationParameters">
      <summary>Describes the creation parameters for a device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DeviceCreationParameters.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.AdapterOrdinal">
      <summary>Ordinal number that denotes the display adapter.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.Behavior">
      <summary>A combination of one or more D3DCREATEConstants constants that control global behavior of the device. These constants mirror the constants passed to when the device was created.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.DeviceType">
      <summary>Member of the D3ddevtype enumerated type. Denotes the amount of emulated functionality for this device. The value of this parameter mirrors the value passed to the 9Createdevice call that created this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.FocusWindow">
      <summary>Window to which focus belongs for this Direct3D device. The value of this parameter mirrors the value passed to the constructor call that created this device.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DeviceCreationParameters.FocusWindowHandle">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DisplayMode">
      <summary>Describes the display mode.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DisplayMode.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the display mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Height">
      <summary>Screen height, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.RefreshRate">
      <summary>Refresh rate. The value of 0 indicates an adapter default.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DisplayMode.Width">
      <summary>Screen width, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.DriverCaps">
      <summary>Driver specific capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.DriverCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanAutoGenerateMipMap">
      <summary>The driver is capable of automatically generating mipmaps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanCalibrateGamma">
      <summary>The system has a calibrator installed that can automatically adjust the gamma ramp so that the result is identical on all systems that have a calibrator.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.CanManageResource">
      <summary>The driver is capable of managing resources. On such drivers, Pool.Managed resources will be managed by the driver.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.ReadScanLine">
      <summary>Display hardware is capable of returning the current scan line.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsAlphaFullscreenFlipOrDiscard">
      <summary>Indicates that the device can respect the AlphaBlendable render state in full-screen mode while using the Flip or Discard swap effect. Copy and CopyVSync swap effects work whether or not this flag is set.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToSystemMemory">
      <summary>Device can accelerate a memory copy from local video memory to system memory. This cap guarantees that Device.GetRenderTargetData calls will be hardware accelerated. If this cap is absent, this call will succeed but will be slower.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsCopyToVideoMemory">
      <summary>Device can accelerate a memory copy from system memory to local video memory. This cap guarantees that Device.UpdateSurface and Device.UpdateTexture calls will be hardware accelerated. If this cap is absent, these calls will succeed but will be slower.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsDynamicTextures">
      <summary>The driver supports dynamic textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsFullscreenGamma">
      <summary>The driver supports dynamic gamma ramp adjustment in full-screen mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.DriverCaps.SupportsLinearToSrgbPresentation">
      <summary>Indicates that the device can perform gamma correction from a windowed back buffer (containing linear content) to an sRGB desktop.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FilterCaps">
      <summary>Texture filter capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FilterCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyAnisotropic">
      <summary>Device supports per-stage anisotropic filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyGaussianQuad">
      <summary>Device supports per-stage Guassian quad filtering for textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyLinear">
      <summary>Device supports per-stage bilinear interpolation filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPoint">
      <summary>Device supports per-stage point-sample filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMagnifyPyramidalQuad">
      <summary>Device supports per-stage Pyramidal quad filtering for magnifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyAnisotropic">
      <summary>Device supports per-stage anisotropic filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyGaussianQuad">
      <summary>Device supports per-stage Guassian quad filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyLinear">
      <summary>Device supports per-stage bilinear interpolation filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPoint">
      <summary>Device supports per-stage point-sample filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMinifyPyramidalQuad">
      <summary>Device supports per-stage Pyramidal quad filtering for minifying textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapLinear">
      <summary>Device supports per-stage trilinear interpolation filtering for mipmaps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.FilterCaps.SupportsMipMapPoint">
      <summary>Device supports per-stage point-sample filtering for mipmaps.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.FormatList">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.FormatList.#ctor">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.GammaRamp">
      <summary>Contains red, green, and blue ramp data.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetBlue">
      <summary>Return the blue component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetGreen">
      <summary>Return the green component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.GetRed">
      <summary>Return the red component of the gamma ramp.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetBlue(System.Int16[])">
      <summary>Sets the blue component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetGreen(System.Int16[])">
      <summary>Sets the green component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.GammaRamp.SetRed(System.Int16[])">
      <summary>Sets the red component of the gamma ramp.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.IndexBufferDescription">
      <summary>Describes an index buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.IndexBufferDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the index buffer data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Pool">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration, specifying the class of memory allocated for this index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Size">
      <summary>Size of the index buffer, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Type">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration, identifying this resource as an index buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.IndexBufferDescription.Usage">
      <summary>Combination of one or more of the following flags, specifying the usage for this resource.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LineCaps">
      <summary>Defines the capabilities for line-drawing primitives.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LineCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAlphaCompare">
      <summary>Supports alpha-test comparisons.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsAntiAlias">
      <summary>Antialiased lines are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsBlend">
      <summary>Supports source-blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsFog">
      <summary>Supports fog.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsTextureMapping">
      <summary>Supports texture-mapping.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LineCaps.SupportsZBufferTest">
      <summary>Supports z-buffer comparisons.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LinePattern">
      <summary>Describes a line pattern.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LinePattern.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.Linepattern">
      <summary>Bits specifying the line pattern. For example, the following value would produce a dotted line: 1100110011001100.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LinePattern.RepeatFactor">
      <summary>Number of times to repeat each series of 1s and 0s specified in the wLinePattern member. This allows an application to stretch the line pattern.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.LockedBox">
      <summary>Describes a locked box (volume).</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.LockedBox.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.RowPitch">
      <summary>Byte offset from the left edge of one row to the left edge of the next row.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.LockedBox.SlicePitch">
      <summary>Byte offset from the top-left of one slice to the top-left of the next deepest slice.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Material">
      <summary>Specifies material properties.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Material.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Ambient">
      <summary>Retrieves or sets a value specifying the ambient color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.AmbientColor">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Diffuse">
      <summary>Retrieves or sets a value specifying the diffuse color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.DiffuseColor">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Emissive">
      <summary>Retrieves or sets a value specifying the emissive color</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.EmissiveColor">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.Specular">
      <summary>Retrieves or sets a value specifying the specular color.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.SpecularColor">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Material.SpecularSharpness">
      <summary>Retrieves or sets a floating-point value specifying the sharpness of specular highlights. The higher the value, the sharper the highlight is.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.MiscCaps">
      <summary>Miscellaneous driver primitive capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.MiscCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.HasFogVertexClamed">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.IsNullReference">
      <summary>A reference device that does not render.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsBlendOperation">
      <summary>Device supports alpha-blending operations other than BlendOperation.Add.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipPlaneScaledPoints">
      <summary>Device correctly clips scaled points of size greater than 1.0 to user-defined clipping planes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsClipTransformedVertices">
      <summary>Device clips post-transformed vertex primitives.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsColorWrite">
      <summary>Device supports per-channel writes for the render target color buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullClockwise">
      <summary>The driver supports clockwise triangle culling through the CullMode render state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullCounterClockwise">
      <summary>The driver supports counterclockwise triangle culling through the CullMode render state.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsCullNone">
      <summary>The driver does not perform triangle culling.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsFogAndSpecularAlpha">
      <summary>Device supports separate fog and specular alpha. Many devices use the specular alpha channel to store the fog factor.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsIndependentWriteMasks">
      <summary>Device supports independent write masks for multiple element textures or multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMaskZ">
      <summary>Device can enable and disable modification of the depth buffer on pixel operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsIndependentBitDepths">
      <summary>Device supports independent bit depths for multiple render targets.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsMultipleRenderTargetsPostPixelShaderBlending">
      <summary>Device supports multiple render targets post pixel shader blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsPerStageConstant">
      <summary>Device supports per-stage constants.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsSeparateAlphaBlend">
      <summary>Device supports separate alpha blending.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.MiscCaps.SupportsTextureStageStateArgumentTemp">
      <summary>Device supports TextureArgument for temporary register.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PaletteEntry">
      <summary>Specifies the color and usage of an entry in a logical palette.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="red" />
      <param name="green" />
      <param name="blue" />
      <param name="flags" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PaletteEntry.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Blue">
      <summary>The blue intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Flags">
      <summary>The alpha intensity value for the palette entry. Note that as of Microsoft® DirectX® 8.0, this member is treated differently than documented in the Microsoft Platform Software Development Kit (SDK).</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Green">
      <summary>The green intensity value for the palette entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PaletteEntry.Red">
      <summary>The red intensity value for the palette entry.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.PixelShaderCaps">
      <summary>Pixel shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberInstructionSlots">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MaxStaticFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberInstructionSlots">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.PixelShaderCaps.MinStaticFlowControlDepth">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.PixelShaderCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.DynamicFlowControlDepth">
      <summary>Device supports dynamic flow control (if, break, and breakc). The depth of nesting ranges from 0 to 24.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberInstructionSlots">
      <summary>The number of instruction slots can range from 96 to 1024.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.NumberTemps">
      <summary>The number of temporary registers supported by the device. The range is from 12 to 32.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.StaticFlowControlDepth">
      <summary>Equal to the depth of loop/call nesting. The range is 0 to 4.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsArbitrarySwizzle">
      <summary>If set, arbitrary swizzle is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsGradientInstructions">
      <summary>If set, gradient instructions are supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoDependentReadLimit">
      <summary>If set, there are no dependent read limits.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsNoTextureInstructionLimit">
      <summary>If set, there are no limit on texture instructions.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.PixelShaderCaps.SupportsPredication">
      <summary>If set, instruction predication is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterCaps">
      <summary>Information on raster-drawing capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsAnisotropy">
      <summary>Device supports anisotropic filtering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsColorPerspective">
      <summary>Device iterates colors perspective correctly.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDepthBias">
      <summary>Device supports legacy depth bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsDither">
      <summary>Device can dither to improve color resolution.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogRange">
      <summary>Device supports range-based fog. In range-based fog, the distance of an object from the viewer is used to compute fog effects, not the depth of the object (that is, the z-coordinate) in the scene.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogTable">
      <summary>Device calculates the fog value by referring to a lookup table containing fog values that are indexed to the depth of a given pixel.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsFogVertex">
      <summary>Device calculates the fog value during the lighting operation and interpolates the fog value during rasterization.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMipMapLevelOfDetailBias">
      <summary>Device supports level of detail (LOD) bias adjustments. These bias adjustments enable an application to make a mipmap appear crisper or less sharp than it normally would.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsMultisampleToggle">
      <summary>Device supports toggling multisampling on and off between Device.BeginScene and Device.EndScene.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsScissorTest">
      <summary>Device supports scissor test.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsSlopeScaleDepthBias">
      <summary>Device performs true slope-scale based depth bias.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWBuffer">
      <summary>Device supports depth buffering using w.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsWFog">
      <summary>Device supports w-based fog. W-based fog is used when a perspective projection matrix is specified, but affine projections still use z-based fog. The system considers a projection matrix that contains a nonzero value in the [3][4] element to be a perspective projection matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferLessHsr">
      <summary>Device can perform hidden-surface removal (HSR) without requiring the application to sort polygons and without requiring the allocation of a depth-buffer. This leaves more video memory for textures. The method used to perform HSR is hardware-dependent and is transparent to the application.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZBufferTest">
      <summary>Device can perform z-test operations. This effectively renders a primitive and indicates whether any z pixels have been rendered.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterCaps.SupportsZFog">
      <summary>Device supports z-based fog.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RasterStatus">
      <summary>Describes the raster status.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RasterStatus.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.InVBlank">
      <summary>TRUE if the raster is in the vertical blank period. FALSE if the raster is not in the vertical blank period.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RasterStatus.ScanLine">
      <summary>If InVBlank is FALSE, then this value is an integer roughly corresponding to the current scan line painted by the raster. Scan lines are numbered in the same way as Microsoft® Direct3D® surface coordinates: 0 is the top of the primary surface, extending to the value (height of the surface - 1) at the bottom of the display.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.RectanglePatchInformation">
      <summary>Describes a rectangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.RectanglePatchInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.BasisType">
      <summary>Defining the basis type for the rectangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Degree">
      <summary>Member of the D3ddegreetype enumerated type, defining the degree for the rectangular patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Height">
      <summary>Height of each vertex, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetHeight">
      <summary>Starting vertex offset height, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.StartVertexOffsetWidth">
      <summary>Starting vertex offset width, in number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Stride">
      <summary>Width of the imaginary two-dimensional vertex array, which occupies the same space as the vertex buffer. For an example, see the diagram below.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.RectanglePatchInformation.Width">
      <summary>Width of each vertex, in number of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceManager">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.#ctor">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.GetStatistics">
      <summary />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceManager.ToString">
      <summary />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ResourceStats">
      <summary>Describes a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ResourceStats.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.ApproximateBytesDownloaded">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.LastObjectPriority">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberEvicts">
      <summary>Number of objects evicted.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsCreatedInVideoMemory">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsUsed">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.NumberObjectsUsedInVideoMemory">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.Thrashing">
      <summary>Indicates if thrashing is occuring.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalManaged">
      <summary>Total number of managed objects.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.TotalManagedBytes">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSet">
      <summary>Number of objects in video memory.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ResourceStats.WorkingSetBytes">
      <summary>Number of bytes in video memory.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ShadeCaps">
      <summary>Shading operations capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ShadeCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsAlphaGouraudBlend">
      <summary>Device can support an alpha component for Gouraud-blended transparency. In this mode, the alpha color component of a primitive is provided at vertices and interpolated across a face along with the other color components.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsColorGouraudRgb">
      <summary>Device can support colored Gouraud shading in the RGB color model. In this mode, the color component for a primitive is provided at vertices and interpolated across a face along with the other color components. In the RGB lighting model, the red, green, and blue components are interpolated.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsFogGouraud">
      <summary>Device can support fog in the Gouraud shading mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ShadeCaps.SupportsSpecularGouraudRgb">
      <summary>Device supports Gouraud shading of specular highlights.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.StencilCaps">
      <summary>Flags specifying supported stencil-buffer operations.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.StencilCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrement">
      <summary>Decrement the stencil-buffer entry, wrapping to the maximum value if the new value is less than zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsDecrementSaturation">
      <summary>Decrement the stencil-buffer entry, clamping to zero.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrement">
      <summary>Increment the stencil-buffer entry, wrapping to zero if the new value exceeds the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsIncrementSaturation">
      <summary>Increment the stencil-buffer entry, clamping to the maximum value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsInvert">
      <summary>Invert the bits in the stencil-buffer entry.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsKeep">
      <summary>Do not update the entry in the stencil buffer. This is the default value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsReplace">
      <summary>Replace the stencil-buffer entry with reference value.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsTwoSided">
      <summary>The device supports two-sided stencil.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.StencilCaps.SupportsZero">
      <summary>Set the stencil-buffer entry to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.SurfaceDescription">
      <summary>Describes a surface.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.SurfaceDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Height">
      <summary>Height of the surface, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleQuality">
      <summary>Retrieves or sets the quality level.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.MultiSampleType">
      <summary>Specifies the levels of full-scene multisampling supported by the surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Pool">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration, specifying the class of memory allocated for this surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Type">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration, identifying this resource as a surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Usage">
      <summary>Retrieves or sets either the <see cref="F:Microsoft.DirectX.Direct3D.Usage.DepthStencil" /> or <see cref="F:Microsoft.DirectX.Direct3D.Usage.RenderTarget" /> constants of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.SurfaceDescription.Width">
      <summary>Width of the surface, in pixels.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureCaps">
      <summary>Miscellaneous texture-mapping capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlpha">
      <summary>Alpha in texture pixels is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsAlphaPalette">
      <summary>Device can draw alpha from texture palettes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMap">
      <summary>Supports cube textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsCubeMapPower2">
      <summary>Device requires that cube texture maps have dimensions specified as powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipCubeMap">
      <summary>Device supports mipmapped cube textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipMap">
      <summary>Device supports mipmapped textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsMipVolumeMap">
      <summary>Device supports mipmapped volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNonPower2Conditional">
      <summary>Conditionally supports the use of 2-D textures with dimensions that are not powers of two.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsNoProjectedBumpEnvironment">
      <summary>Device does not support a projected bump-environment loopkup operation in programmable and fixed function shaders.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPerspective">
      <summary>Perspective correction texturing is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsPower2">
      <summary>All textures must have widths and heights specified as powers of two. This requirement does not apply to either cube textures or volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsProjected">
      <summary>Supports the Projected texture transformation flag. When applied, the device divides transformed texture coordinates by the last texture coordinate. If this capability is present, then the projective divide occurs per pixel. If this capability is not present, but the projective divide needs to occur anyway, then it is performed on a per-vertex basis by the Direct3D runtime.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsSquareOnly">
      <summary>All textures must be square.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsTextureRepeatNotScaledBySize">
      <summary>Texture indices are not scaled by the texture size prior to interpolation.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMap">
      <summary>Device supports volume textures.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureCaps.SupportsVolumeMapPower2">
      <summary>Device requires that volume texture maps have dimensions specified as powers of two.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TextureOperationCaps">
      <summary>Flags describing the texture operations supported by this device.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TextureOperationCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAdd">
      <summary>The Add texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned">
      <summary>The AddSigned texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSigned2X">
      <summary>The AddSigned2x texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsAddSmooth">
      <summary>The AddSmooth texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendCurrentAlpha">
      <summary>The BlendCurrentAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendDiffuseAlpha">
      <summary>The BlendDiffuseAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendFactorAlpha">
      <summary>The BlendFactorAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlpha">
      <summary>The BlendTextureAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBlendTextureAlphaPM">
      <summary>The BlendTextureAlphaPM texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMap">
      <summary>The BumpEnvironmentMap texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsBumpEnvironmentMapLuminance">
      <summary>The BumpEnvironmentMapLuminance texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDisable">
      <summary>The Disable texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsDotProduct3">
      <summary>The DotProduct3 texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsLerp">
      <summary>The Lerp texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate">
      <summary>The Modulate texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate2X">
      <summary>The Modulate2x texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulate4X">
      <summary>The Modulate4x texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateAlphaAddColor">
      <summary>The ModulateAddColor texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateColorAddAlpha">
      <summary>The ModulateColorAddAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvAlphaAddColor">
      <summary>The ModulateInvAlphaAddColor texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsModulateInvColorAddAlpha">
      <summary>The ModulateInvColorAddAlpha texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsMultiplyAdd">
      <summary>The MultiplyAdd texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsPreModulate">
      <summary>The PreModulate texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument1">
      <summary>The SelectArgument1 texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSelectArgument2">
      <summary>The SelectArgument2 texture-blending operation is supported.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TextureOperationCaps.SupportsSubtract">
      <summary>The Subtract texture-blending operation is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.TrianglePatchInformation">
      <summary>Describes a triangular high-order patch.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.TrianglePatchInformation.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.BasisType">
      <summary>Defines the basis type for the triangular high-order patch. The only valid value for this member is Basis.Bezier.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.Degree">
      <summary>Defining the degree type for the triangular high-order patch.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.NumberVertices">
      <summary>Number of vertices.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.TrianglePatchInformation.StartVertexOffset">
      <summary>Starting vertex offset, in number of vertices.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.ValidateDeviceParams">
      <summary>Describes the number of passes and result code returned from a <see cref="M:Microsoft.DirectX.Direct3D.Device.ValidateDevice" /> call.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.ValidateDeviceParams.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Passes">
      <summary>Number of rendering passes needed to complete the desired effect through multipass rendering.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.ValidateDeviceParams.Result">
      <summary>Result code of the validation.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexBufferDescription">
      <summary>Describes a vertex buffer.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexBufferDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the vertex buffer data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Pool">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration, specifying the class of memory allocated for this vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Size">
      <summary>Size of the vertex buffer, in bytes.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Type">
      <summary>Member of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration, identifying this resource as a vertex buffer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.Usage">
      <summary>Retrieves or sets a combination of one or more constants of the <see cref="T:Microsoft.DirectX.Direct3D.Usage" /> enumeration.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexBufferDescription.VertexFormat">
      <summary>Combination of D3DFVFConstants that describes the vertex format of the vertices in this buffer.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexCache">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexCache.#ctor">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexCache.ToString">
      <summary />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.CacheSize">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.MagicNumber">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.OptimizationMethod">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexCache.Pattern">
      <summary />
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexElement">
      <summary>Defines input vertex data to the pipeline.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexElement.VertexDeclarationEnd">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.#ctor(System.Int16,System.Int16,Microsoft.DirectX.Direct3D.DeclarationType,Microsoft.DirectX.Direct3D.DeclarationMethod,Microsoft.DirectX.Direct3D.DeclarationUsage,System.Byte)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="stream" />
      <param name="offset" />
      <param name="declType" />
      <param name="declMethod" />
      <param name="declUsage" />
      <param name="usageIndex" />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexElement.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationMethod">
      <summary>Tessellator processing method. This method determines how the tessellator interprets/operates on the vertex data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationType">
      <summary>Data type. One of several predefined types that define the data size.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.DeclarationUsage">
      <summary>Defines the intended use of the data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Offset">
      <summary>Offset (if any) from the beginning of the stream to the start of the data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.Stream">
      <summary>Stream number.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexElement.UsageIndex">
      <summary>Modifies the usage data to allow the user to specify multiple usage types.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexFormatCaps">
      <summary>Flexible vertex format capabilities.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexFormatCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsDoNotStripElements">
      <summary>It is preferable that vertex elements not be stripped. That is, if the vertex format contains elements that are not used with the current render states, there is no need to regenerate the vertices. If this capability flag is not present, stripping extraneous elements from the vertex format provides better performance.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsPointSize">
      <summary>Point size is determined by either the render state or the vertex data.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexFormatCaps.SupportsTextureCoordinateCountMask">
      <summary>Masks the low Int16 of VertexFormatCaps. These bits, cast to the Int16 data type, describe the total number of texture coordinate sets that the device can simultaneously use for multiple texture blending. (You can use up to eight texture coordinate sets for any vertex, but the device can blend using only the specified number of texture coordinate sets.)</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexProcessingCaps">
      <summary>Describes vertex processing capabilities. For a given physical device, this capability might vary across <see cref="T:Microsoft.DirectX.Direct3D.Device" /> objects, depending on the parameters supplied to the <see cref="M:Microsoft.DirectX.Direct3D.Device.#ctor" /> constructor.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexProcessingCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsDirectionalLights">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsLocalViewer">
      <summary>Device can do local viewer.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsMaterialSource">
      <summary>Device can do Microsoft® DirectX® 7.0 colormaterialsource operations.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsNoTextureGenerationNonLocalViewer">
      <summary>Device does not support texture generation in non-local viewer mode.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsPositionalLights">
      <summary />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGeneration">
      <summary>Device can do texgen.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTextureGenerationSphereMap">
      <summary>Device supports texture generation for sphere maps.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexProcessingCaps.SupportsTweening">
      <summary>Device can do vertex tweening.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexShaderCaps">
      <summary>Vertex shader capabilities.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MaxStaticFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinDynamicFlowControlDepth">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinNumberTemps">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Direct3D.VertexShaderCaps.MinStaticFlowControlDepth">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexShaderCaps.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.DynamicFlowControlDepth">
      <summary>If this value is zero, then the device does not support dynamic flow control. If it is non zero, it supports dynamic flow control (instructions if, break and breakc). The value is equal to the depth of ifc-block nesting. The acceptable range of values for this is 0 to 24.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.NumberTemps">
      <summary>The number of temporary registers supported by the device. The acceptable range for this is 12 to 32.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.StaticFlowControlDepth">
      <summary>When this value is zero, then the device does not support static flow control. The value is equal to the depth of loop/call nesting. The acceptable range is 0 to 4.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexShaderCaps.SupportsPredication">
      <summary>If true then instruction predication as defined in the predication section is supported.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VertexStats">
      <summary>Vertex statistics</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VertexStats.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberExtraClippingTriangles">
      <summary>Total number of triangles that are not clipped in this frame.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VertexStats.NumberRenderedTriangles">
      <summary>Total number of triangles that are not clipped in this frame.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.Viewport">
      <summary>Defines the window dimensions of a render target surface onto which a 3-D volume projects.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.Viewport.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Height">
      <summary>Height dimension of the viewport on the render target surface, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the height dimension of the render target surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MaxZ">
      <summary>Value describing, together with MinZ, the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 1.0. Clipping is performed after applying the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.MinZ">
      <summary>Value describing, together with MaxZ, the range of depth values into which a scene is to be rendered, the minimum and maximum values of the clip volume. Most applications set this value to 0.0. Clipping is performed after applying the projection matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Width">
      <summary>Width dimension of the viewport on the render target surface, in pixels. Unless you are rendering only to a subset of the surface, this member should be set to the width dimension of the render target surface.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.X">
      <summary>Pixel coordinate of the upper-left corner of the viewport on the render target surface. Unless you want to render to a subset of the surface, this member can be set to 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.Viewport.Y">
      <summary>Pixel coordinate of the upper-left corner of the viewport on the render target surface. Unless you want to render to a subset of the surface, this member can be set to 0.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Direct3D.VolumeDescription">
      <summary>Describes a volume.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Direct3D.VolumeDescription.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Depth">
      <summary>Depth of the volume, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Format">
      <summary>Member of the D3dformat enumerated type, describing the surface format of the volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Height">
      <summary>Height of the volume, in pixels.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Pool">
      <summary>Retrieves or sets a constant of the <see cref="T:Microsoft.DirectX.Direct3D.Pool" /> enumeration, specifying the class of memory allocated for this volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Type">
      <summary>Retrieves or sets a constant of the <see cref="T:Microsoft.DirectX.Direct3D.ResourceType" /> enumeration, identifying this resource as a volume.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Usage">
      <summary>Currently not used. Always returned as 0.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Direct3D.VolumeDescription.Width">
      <summary>Width of the volume, in pixels.</summary>
    </member>
  </members>
</doc>