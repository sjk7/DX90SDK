<doc>
  <assembly>
    <name>Microsoft.DirectX</name>
  </assembly>
  <members>
    <member name="T:Microsoft.DirectX.DirectXException">
      <summary>Root exception class for all DirectX exceptions.</summary>
    </member>
    <member name="F:Microsoft.DirectX.DirectXException.IsExceptionIgnored">
      <summary>A boolean value to enable or disable DirectX exceptions.</summary>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="info" />
      <param name="context" />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
      <param name="inner" />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor(System.String)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="message" />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.EnableExceptions">
      <summary>Turn on DirectX exception throwing.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.GetExceptionFromResultInternal(System.Int32)">
      <summary />
      <param name="resultCode" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.IgnoreExceptions">
      <summary>Disable throwing DirectX exceptions</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DirectXException.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.DirectXException.ErrorCode">
      <summary>The integer value result code</summary>
    </member>
    <member name="P:Microsoft.DirectX.DirectXException.ErrorString">
      <summary>The DirectX specific error string.</summary>
    </member>
    <member name="T:Microsoft.DirectX.DXHelp">
      <summary>Miscellaneous helper functions for Managed DirectX</summary>
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.CopyObjectDataToPointer(System.Object,System.IntPtr)">
      <summary>Copies an object.</summary>
      <param name="objectData" />
      <param name="pointerData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.CopyPointerDataToObject(System.Object@,System.IntPtr)">
      <summary>Copies an object.</summary>
      <param name="objectData" />
      <param name="pointerData" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.GetObjectSize(System.Object)">
      <summary>Returns an objects size.</summary>
      <param name="objectSize" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.DXHelp.GetTypeSize(System.Type)">
      <summary>Returns a type size.</summary>
      <param name="typeSize" />
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.MatrixStack">
      <summary>Applications use the methods of the MatrixStack object to manipulate a matrix stack</summary>
    </member>
    <member name="E:Microsoft.DirectX.MatrixStack.Disposing">
      <summary>Adds an event handler to listen to the Disposing event on the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Dispose">
      <summary>Immediately releases the unmanaged resources used by the object.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Finalize">
      <summary>Forces an object to free resources before the object is destroyed by the Garbage Collector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.LoadIdentity">
      <summary>Loads identity in the current matrix.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.LoadMatrix(Microsoft.DirectX.Matrix)">
      <summary>Loads the given matrix into the current matrix.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.MultiplyMatrix(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of the current matrix and the given matrix.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.MultiplyMatrixLocal(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of the given matrix and the current matrix.</summary>
      <param name="value" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Pop">
      <summary>Removes the current matrix from the top of the stack.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Push">
      <summary>Adds a matrix to the stack.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.raise_Disposing(System.Object,System.EventArgs)">
      <summary />
      <param name="i1" />
      <param name="i2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix.</summary>
      <param name="axisRotation" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateAxisLocal(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Determines the product of the computed rotation matrix and the current matrix.</summary>
      <param name="axisRotation" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed rotation matrix (composed of a given yaw, pitch, and roll).</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.RotateYawPitchRollLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the computed rotation matrix (composed of a given yaw, pitch, and roll) and the current matrix.</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Scale(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the current matrix and the computed scale matrix composed from the given point (x, y, and z).</summary>
      <param name="scale" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Scale(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed scale matrix composed from the given point (x, y, and z).</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.ScaleLocal(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the computed scale matrix composed from the given point (x, y, and z) and the current matrix.</summary>
      <param name="scale" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.ScaleLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the computed scale matrix composed from the given point (x, y, and z) and the current matrix.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Translate(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the current matrix and the computed translation matrix determined by the given factors (x, y, and z).</summary>
      <param name="trans" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.Translate(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the current matrix and the computed translation matrix determined by the given factors (x, y, and z).</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.TranslateLocal(Microsoft.DirectX.Vector3)">
      <summary>Determines the product of the computed translation matrix determined by the given factors (x, y, and z) and the current matrix.</summary>
      <param name="trans" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.MatrixStack.TranslateLocal(System.Single,System.Single,System.Single)">
      <summary>Determines the product of the computed translation matrix determined by the given factors (x, y, and z) and the current matrix.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.MatrixStack.Disposed">
      <summary>true if the object is disposed; otherwise, false</summary>
    </member>
    <member name="P:Microsoft.DirectX.MatrixStack.Top">
      <summary>Retrieves the current matrix at the top of the stack.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Matrix">
      <summary>Describes a matrix.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M11">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M12">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M13">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M14">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M21">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M22">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M23">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M24">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M31">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M32">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M33">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M34">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M41">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M42">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M43">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Matrix.M44">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Add(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Adds two matrices</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.AffineTransformation(System.Single,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds an affine transformation matrix.</summary>
      <param name="scaling" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.AffineTransformation2D(System.Single,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="scaling" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert">
      <summary>Calculates the inverse of a matrix.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert(Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Invert(System.Single@,Microsoft.DirectX.Matrix)">
      <summary>Calculates the inverse of a matrix.</summary>
      <param name="determinant" />
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.LookAtLH(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a left-handed, look-at matrix.</summary>
      <param name="cameraPosition" />
      <param name="cameraTarget" />
      <param name="cameraUpVector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.LookAtRH(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Builds a right-handed, look-at matrix.</summary>
      <param name="cameraPosition" />
      <param name="cameraTarget" />
      <param name="cameraUpVector" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.MultiplyTranspose(Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices, followed by a transpose.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.MultiplyTranspose(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Determines the product of two matrices, followed by a transpose.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Addition(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Equality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Inequality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.op_Subtraction(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed orthogonal projection matrix.</summary>
      <param name="width" />
      <param name="height" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, left-handed orthogonal projection matrix.</summary>
      <param name="left" />
      <param name="right" />
      <param name="bottom" />
      <param name="top" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, right-handed orthogonal projection matrix.</summary>
      <param name="left" />
      <param name="right" />
      <param name="bottom" />
      <param name="top" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.OrthoRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed orthogonal projection matrix.</summary>
      <param name="width" />
      <param name="height" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveFovLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed perspective projection matrix based on a field of view (FOV).</summary>
      <param name="fieldOfViewY" />
      <param name="aspectRatio" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveFovRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed perspective projection matrix based on a field of view (FOV).</summary>
      <param name="fieldOfViewY" />
      <param name="aspectRatio" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveLH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a left-handed perspective projection matrix</summary>
      <param name="width" />
      <param name="height" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveOffCenterLH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, left-handed perspective projection matrix.</summary>
      <param name="left" />
      <param name="right" />
      <param name="bottom" />
      <param name="top" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveOffCenterRH(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a customized, right-handed perspective projection matrix.</summary>
      <param name="left" />
      <param name="right" />
      <param name="bottom" />
      <param name="top" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.PerspectiveRH(System.Single,System.Single,System.Single,System.Single)">
      <summary>Builds a right-handed perspective projection matrix.</summary>
      <param name="width" />
      <param name="height" />
      <param name="znearPlane" />
      <param name="zfarPlane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Reflect(Microsoft.DirectX.Plane)">
      <summary>Builds a matrix that reflects the coordinate system about a plane.</summary>
      <param name="plane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a matrix that rotates around an arbitrary axis.</summary>
      <param name="axisRotation" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateQuaternion(Microsoft.DirectX.Quaternion)">
      <summary>Builds a matrix from a quaternion.</summary>
      <param name="quat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateX(System.Single)">
      <summary>Builds a matrix that rotates around the x-axis.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateY(System.Single)">
      <summary>Builds a matrix that rotates around the y-axis.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix with a specified yaw, pitch, and roll.</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotateZ(System.Single)">
      <summary>Builds a matrix that rotates around the z-axis.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Builds a matrix that rotates around an arbitrary axis. The input rotation angle is in radians.</summary>
      <param name="axisRotation" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationQuaternion(Microsoft.DirectX.Quaternion)">
      <summary>Builds a matrix from a quaternion.</summary>
      <param name="quat" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationX(System.Single)">
      <summary>Builds a matrix that rotates around the x-axis. The input rotation angle is in radians.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationY(System.Single)">
      <summary>Builds a matrix that rotates around the y-axis. The input rotation angle is in radians.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix with a specified yaw, pitch, and roll. The input rotation angles are in radians.</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.RotationZ(System.Single)">
      <summary>Builds a matrix that rotates around the z-axis. The input rotation angle is in radians.</summary>
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scale(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix that scales along the x-, y-, and z-axes.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scale(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix that scales along the x-, y-, and z-axes.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scaling(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix that scales along the x-, y-, and z-axes.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Scaling(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix that scales along the x-, y-, and z-axes.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Shadow(Microsoft.DirectX.Vector4,Microsoft.DirectX.Plane)">
      <summary>Builds a matrix that flattens geometry into a plane.</summary>
      <param name="light" />
      <param name="plane" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Subtract(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Subtracts two matrices</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds a transformation matrix.</summary>
      <param name="scalingCenter" />
      <param name="scalingRotation" />
      <param name="scalingFactor" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transformation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
      <summary>Builds a transformation matrix.</summary>
      <param name="scalingCenter" />
      <param name="scalingRotation" />
      <param name="scalingFactor" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transformation2D(Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="scalingCenter" />
      <param name="scalingRotation" />
      <param name="scaling" />
      <param name="rotationCenter" />
      <param name="rotation" />
      <param name="translation" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translate(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix using the specified offsets.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translate(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix using the specified offsets.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translation(Microsoft.DirectX.Vector3)">
      <summary>Builds a matrix using the specified offsets.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Translation(System.Single,System.Single,System.Single)">
      <summary>Builds a matrix using the specified offsets.</summary>
      <param name="x" />
      <param name="y" />
      <param name="z" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Matrix.Transpose(Microsoft.DirectX.Matrix)">
      <summary>Returns the matrix transpose of a matrix.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Determinant">
      <summary>Returns the determinant of a matrix.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Identity">
      <summary>The identity matrix</summary>
    </member>
    <member name="P:Microsoft.DirectX.Matrix.Zero">
      <summary>An empty matrix</summary>
    </member>
    <member name="T:Microsoft.DirectX.Plane">
      <summary>Describes a plane.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.A">
      <summary>The a coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.B">
      <summary>The b coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.C">
      <summary>The c coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Plane.D">
      <summary>The d coefficient of the clipping plane in the general plane equation.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Plane.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="valuePointA" />
      <param name="valuePointB" />
      <param name="valuePointC" />
      <param name="valuePointD" />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector3)">
      <summary>Computes the dot-product of a plane and a 4-D vector.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector4)">
      <summary>Computes the dot-product of a plane and a 4-D vector.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.DotNormal(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
      <summary>Computes the dot-product of a plane and a 3-D vector. The w parameter of the vector is assumed to be 0.</summary>
      <param name="p" />
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.FromPointNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from a point and a normal.</summary>
      <param name="point" />
      <param name="normal" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.FromPoints(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Constructs a plane from three points.</summary>
      <param name="p1" />
      <param name="p2" />
      <param name="p3" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.IntersectLine(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Finds the intersection between a plane and a line.</summary>
      <param name="p" />
      <param name="v1" />
      <param name="v2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Normalize">
      <summary>Returns the normal of a plane.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Normalize(Microsoft.DirectX.Plane)">
      <summary>Returns the normal of a plane.</summary>
      <param name="p" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.op_Equality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.op_Inequality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Scale(System.Single)">
      <summary />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Scale(Microsoft.DirectX.Plane,System.Single)">
      <summary />
      <param name="p" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Matrix)">
      <summary>Transforms a plane by a matrix. The input matrix is the inverse transpose of the actual transformation.</summary>
      <param name="m" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Plane,Microsoft.DirectX.Matrix)">
      <summary>Transforms a plane by a matrix. The input matrix is the inverse transpose of the actual transformation.</summary>
      <param name="p" />
      <param name="m" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Plane.Empty">
      <summary>An empty plane.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Quaternion">
      <summary>Describes a quaternion.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.W">
      <summary>The w component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.X">
      <summary>The x component</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.Y">
      <summary>The y component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Quaternion.Z">
      <summary>The z component.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Add(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Adds two quaternions</summary>
      <param name="m1" />
      <param name="m2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.BaryCentric(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single,System.Single)">
      <summary>Returns a quaternion in Barycentric coordinates.</summary>
      <param name="q1" />
      <param name="q2" />
      <param name="q3" />
      <param name="f" />
      <param name="g" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Conjugate(Microsoft.DirectX.Quaternion)">
      <summary>Returns the conjugate of a quaternion.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="valueX" />
      <param name="valueY" />
      <param name="valueZ" />
      <param name="valueW" />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Dot(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Returns the dot-product of two quaternions.</summary>
      <param name="v1" />
      <param name="v2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Exp">
      <summary>Calculates the exponential.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Exp(Microsoft.DirectX.Quaternion)">
      <summary>Calculates the exponential.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Invert">
      <summary>Conjugates and renormalizes a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Invert(Microsoft.DirectX.Quaternion)">
      <summary>Conjugates and renormalizes a quaternion.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Length">
      <summary>Returns the length of a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Length(Microsoft.DirectX.Quaternion)">
      <summary>Returns the length of a quaternion.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.LengthSq">
      <summary>Returns the square of the length of a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.LengthSq(Microsoft.DirectX.Quaternion)">
      <summary>Returns the square of the length of a quaternion.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Ln">
      <summary>Calculates the natural logarithm.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Ln(Microsoft.DirectX.Quaternion)">
      <summary>Calculates the natural logarithm.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Multiplies two quaternions.</summary>
      <param name="m1" />
      <param name="m2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Normalize">
      <summary>Returns the normal of a quaternion.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Normalize(Microsoft.DirectX.Quaternion)">
      <summary>Returns the normal of a quaternion.</summary>
      <param name="q" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Addition(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Equality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Inequality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.op_Subtraction(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Rotates a quaternion about an arbitrary axis.</summary>
      <param name="v" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateMatrix(Microsoft.DirectX.Matrix)">
      <summary>Builds a quaternion from a rotation matrix.</summary>
      <param name="m" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotateYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a quaternion with the given yaw, pitch, and roll.</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Rotates a quaternion about an arbitrary axis.</summary>
      <param name="v" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationMatrix(Microsoft.DirectX.Matrix)">
      <summary>Builds a quaternion from a rotation matrix.</summary>
      <param name="m" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Builds a quaternion with the given yaw, pitch, and roll.</summary>
      <param name="yaw" />
      <param name="pitch" />
      <param name="roll" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Slerp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between two quaternions, using spherical linear interpolation.</summary>
      <param name="q1" />
      <param name="q2" />
      <param name="t" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Squad(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
      <summary>Interpolates between quaternions, using spherical quadrangle interpolation.</summary>
      <param name="q1" />
      <param name="a" />
      <param name="b" />
      <param name="c" />
      <param name="t" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.SquadSetup(Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Setup control points for spherical quadrangle interpolation.</summary>
      <param name="outA" />
      <param name="outB" />
      <param name="outC" />
      <param name="q0" />
      <param name="q1" />
      <param name="q2" />
      <param name="q3" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.Subtract(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
      <summary>Subtracts two quaternions.</summary>
      <param name="m1" />
      <param name="m2" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.ToAxisAngle(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3@,System.Single@)">
      <summary>Computes a quaternion's axis and angle of rotation.</summary>
      <param name="q" />
      <param name="axis" />
      <param name="angle" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Quaternion.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Quaternion.Identity">
      <summary>Returns the identity quaternion.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Quaternion.Zero">
      <summary>An empty quaternion.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Single16">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.AddtionRounding">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.DigitsOfPrecision">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.Epsilon">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.ExponentRadix">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MantissaBits">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxBinaryExponent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxDecimalExponent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MaxValue">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinBinaryExponent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinDecimalExponent">
      <summary />
    </member>
    <member name="F:Microsoft.DirectX.Single16.MinValue">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Single16.#cctor">
      <summary />
    </member>
    <member name="M:Microsoft.DirectX.Single16.#ctor(System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="value" />
    </member>
    <member name="M:Microsoft.DirectX.Single16.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Single16.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Single16.op_Equality(Microsoft.DirectX.Single16,Microsoft.DirectX.Single16)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Single16.op_Inequality(Microsoft.DirectX.Single16,Microsoft.DirectX.Single16)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Single16.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="T:Microsoft.DirectX.Vector2">
      <summary>Describes a vector in two-dimensional (2-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector2.X">
      <summary>The x component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector2.Y">
      <summary>The y component.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors.</summary>
      <param name="v" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Adds two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.BaryCentric(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single,System.Single)">
      <summary>Returns a point in Barycentric coordinates, using the specified 2-D vectors.</summary>
      <param name="v1" />
      <param name="v2" />
      <param name="v3" />
      <param name="f" />
      <param name="g" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.CatmullRom(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Catmull-Rom interpolation, using the specified 2-D vectors.</summary>
      <param name="position1" />
      <param name="position2" />
      <param name="position3" />
      <param name="position4" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Ccw(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns the z-component by taking the cross product of two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector2.#ctor(System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="valueX" />
      <param name="valueY" />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Dot(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Determines the dot-product of two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Hermite(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a Hermite spline interpolation, using the specified 2-D vectors.</summary>
      <param name="position" />
      <param name="tangent" />
      <param name="position2" />
      <param name="tangent2" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Length">
      <summary>Returns the length of a 2-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Length(Microsoft.DirectX.Vector2)">
      <summary>Returns the length of a 2-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.LengthSq">
      <summary>Returns the square of the length of a 2-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.LengthSq(Microsoft.DirectX.Vector2)">
      <summary>Returns the square of the length of a 2-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Lerp(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
      <summary>Performs a linear interpolation between two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <param name="interpolater" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the largest components of two 2-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the largest components of two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the smallest components of two 2-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Returns a 2-D vector that is made up of the smallest components of two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2,System.Single)">
      <summary>Multiply a 2-D vector and a single.</summary>
      <param name="source" />
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Multiply(System.Single)">
      <summary>Multiply a 2-D vector and a single.</summary>
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Normalize">
      <summary>Returns the normalized version of a 2-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Normalize(Microsoft.DirectX.Vector2)">
      <summary>Returns the normalized version of a 2-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Addition(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Equality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Inequality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Multiply(System.Single,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="right" />
      <param name="left" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Multiply(Microsoft.DirectX.Vector2,System.Single)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_Subtraction(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.op_UnaryNegation(Microsoft.DirectX.Vector2)">
      <summary />
      <param name="vec" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Scale(System.Single)">
      <summary>Scales a 2-D vector.</summary>
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2,System.Single)">
      <summary>Scales a 2-D vector.</summary>
      <param name="source" />
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
      <summary>Subtracts two 2-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Transform(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary />
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.Transform(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector by a given matrix.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by the given matrix.</summary>
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by the given matrix.</summary>
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
      <summary>Transforms the 2-D vector normal by the given matrix.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Vector2.Empty">
      <summary>An empty 2-D vector.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Vector3">
      <summary>Describes a vector in three-dimensional (3-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.X">
      <summary>The x component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.Y">
      <summary>The y component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector3.Z">
      <summary>The z component.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3)">
      <summary>Adds two 3-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Adds two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.BaryCentric(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Single)">
      <summary>Returns a point in Barycentric coordinates, using the specified 3-D vectors.</summary>
      <param name="v1" />
      <param name="v2" />
      <param name="v3" />
      <param name="f" />
      <param name="g" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.CatmullRom(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Catmull-Rom interpolation, using the specified 3-D vectors.</summary>
      <param name="position1" />
      <param name="position2" />
      <param name="position3" />
      <param name="position4" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Cross(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the cross-product of two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="valueX" />
      <param name="valueY" />
      <param name="valueZ" />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Dot(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Determines the dot-product of two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Hermite(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a Hermite spline interpolation, using the specified 3-D vectors.</summary>
      <param name="position" />
      <param name="tangent" />
      <param name="position2" />
      <param name="tangent2" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Length">
      <summary>Returns the length of a 3-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Length(Microsoft.DirectX.Vector3)">
      <summary>Returns the length of a 3-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.LengthSq">
      <summary>Returns the square of the length of a 3-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.LengthSq(Microsoft.DirectX.Vector3)">
      <summary>Returns the square of the length of a 3-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
      <summary>Performs a linear interpolation between two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <param name="interpolater" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the largest components of two 3-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the largest components of two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the smallest components of two 3-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Returns a 3-D vector that is made up of the smallest components of two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Multiply a 3-D vector by a single.</summary>
      <param name="source" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Multiply(System.Single)">
      <summary>Multiply a 3-D vector by a single.</summary>
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Normalize">
      <summary>Returns the normalized version of a 3-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Normalize(Microsoft.DirectX.Vector3)">
      <summary>Returns the normalized version of a 3-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Addition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Equality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Inequality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Multiply(System.Single,Microsoft.DirectX.Vector3)">
      <summary />
      <param name="right" />
      <param name="left" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Multiply(Microsoft.DirectX.Vector3,System.Single)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_Subtraction(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.op_UnaryNegation(Microsoft.DirectX.Vector3)">
      <summary />
      <param name="vec" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Project(System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from object space into screen space.</summary>
      <param name="viewport" />
      <param name="projection" />
      <param name="view" />
      <param name="world" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Project(Microsoft.DirectX.Vector3,System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from object space into screen space.</summary>
      <param name="v" />
      <param name="viewport" />
      <param name="projection" />
      <param name="view" />
      <param name="world" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Scale(System.Single)">
      <summary>Scales a 3-D vector.</summary>
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3,System.Single)">
      <summary>Scales a 3-D vector.</summary>
      <param name="source" />
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
      <summary>Subtracts two 3-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Transform(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary />
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector by a given matrix.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 3-D vector by a given matrix, projecting the result back into w = 1.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Matrix)">
      <summary>Transforms the 3-D vector normal by the given matrix.</summary>
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Matrix)">
      <summary>Transforms the 3-D vector normal by the given matrix.</summary>
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
      <summary>Transforms the 3-D vector normal by the given matrix.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Unproject(System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from screen space into object space.</summary>
      <param name="viewport" />
      <param name="projection" />
      <param name="view" />
      <param name="world" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector3.Unproject(Microsoft.DirectX.Vector3,System.Object,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
      <summary>Projects a vector from screen space into object space.</summary>
      <param name="v" />
      <param name="viewport" />
      <param name="projection" />
      <param name="view" />
      <param name="world" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Vector3.Empty">
      <summary>Returns an empty 3-D vector.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Vector4">
      <summary>Describes a vector in four-dimensional (4-D) space.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.W">
      <summary>The w component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.X">
      <summary>The x component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.Y">
      <summary>The y component.</summary>
    </member>
    <member name="F:Microsoft.DirectX.Vector4.Z">
      <summary>The z component.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4)">
      <summary>Adds two 4-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Adds two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.BaryCentric(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single,System.Single)">
      <summary>Returns a point in Barycentric coordinates, using the specified 4-D vectors.</summary>
      <param name="v1" />
      <param name="v2" />
      <param name="v3" />
      <param name="f" />
      <param name="g" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.CatmullRom(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Catmull-Rom interpolation, using the specified 4-D vectors.</summary>
      <param name="position1" />
      <param name="position2" />
      <param name="position3" />
      <param name="position4" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Cross(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the cross-product in four dimensions.</summary>
      <param name="v1" />
      <param name="v2" />
      <param name="v3" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.#ctor">
      <summary>Initializes a new instance of the object.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="valueX" />
      <param name="valueY" />
      <param name="valueZ" />
      <param name="valueW" />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Dot(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Determines the dot-product of two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Equals(System.Object)">
      <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
      <param name="compare" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Hermite(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a Hermite spline interpolation, using the specified 4-D vectors.</summary>
      <param name="position" />
      <param name="tangent" />
      <param name="position2" />
      <param name="tangent2" />
      <param name="weightingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Length">
      <summary>Returns the length of a 4-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Length(Microsoft.DirectX.Vector4)">
      <summary>Returns the length of a 4-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.LengthSq">
      <summary>Returns the square of the length of a 4-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.LengthSq(Microsoft.DirectX.Vector4)">
      <summary>Returns the square of the length of a 4-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Lerp(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
      <summary>Performs a linear interpolation between two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <param name="interpolater" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the largest components of two 4-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the largest components of two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the smallest components of two 4-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Returns a 4-D vector that is made up of the smallest components of two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4,System.Single)">
      <summary>Mutiply a 4-D vector by a single.</summary>
      <param name="source" />
      <param name="f" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Multiply(System.Single)">
      <summary>Mutiply a 4-D vector by a single.</summary>
      <param name="s" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Normalize">
      <summary>Returns the normalized version of a 4-D vector.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Normalize(Microsoft.DirectX.Vector4)">
      <summary>Returns the normalized version of a 4-D vector.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Addition(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Equality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Inequality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Multiply(System.Single,Microsoft.DirectX.Vector4)">
      <summary />
      <param name="right" />
      <param name="left" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Multiply(Microsoft.DirectX.Vector4,System.Single)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_Subtraction(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary />
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.op_UnaryNegation(Microsoft.DirectX.Vector4)">
      <summary />
      <param name="vec" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Scale(System.Single)">
      <summary>Scales a 4-D vector.</summary>
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4,System.Single)">
      <summary>Scales a 4-D vector.</summary>
      <param name="source" />
      <param name="scalingFactor" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors.</summary>
      <param name="source" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
      <summary>Subtracts two 4-D vectors.</summary>
      <param name="left" />
      <param name="right" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.ToString">
      <summary>Obtains the String representation of this instance.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector by a given matrix.</summary>
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Vector4[],Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector by a given matrix.</summary>
      <param name="vector" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Matrix)">
      <summary>Transforms a 4-D vector by a given matrix.</summary>
      <param name="source" />
      <param name="sourceMatrix" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Vector4.Empty">
      <summary>Returns an empty 4-D vector</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.GraphicsPermission">
      <summary>Controls the permissions related to DirectX Graphics.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="canUse" />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.GraphicsPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.GraphicsPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.InputPermission">
      <summary>Controls the permissions related to DirectX Input.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.InputPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.InputPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.NetworkPermission">
      <summary>Controls the permissions related DirectPlay.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.NetworkPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.NetworkPermission.Host">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.NetworkPermission.Join">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.SoundPermission">
      <summary>Controls the permissions related DirectX Audio.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Copy">
      <summary>Creates and returns an identical copy of the current permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="state" />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a permission with a specified state from an XML encoding.</summary>
      <param name="securityElement" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a permission that is the intersection of the current permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current permission is a subset of the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.IsUnrestricted">
      <summary>Returns a value indicating whether the current permission is unrestricted.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.ToXml">
      <summary>Creates an XML encoding of the permission and its current state.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.SoundPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the permission and the specified permission.</summary>
      <param name="target" />
      <returns />
    </member>
    <member name="P:Microsoft.DirectX.Security.SoundPermission.Use">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.SoundPermission.UseCapture">
      <summary>Gets or sets the access represented by the permission.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute">
      <summary>Allows security actions for GraphicsPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.GraphicsPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute">
      <summary>Allows security actions for InputPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.InputPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute">
      <summary>Allows security actions for NetworkPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.CreatePermission">
      <summary>Create a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.Host">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.NetworkPermissionAttribute.Join">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="T:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute">
      <summary>Allows security actions for SoundPermission to be applied to code using declarative security.</summary>
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.CreatePermission">
      <summary>Creates a new permission.</summary>
      <returns />
    </member>
    <member name="M:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the object.</summary>
      <param name="action" />
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.Use">
      <summary>Gets or sets the type of access.</summary>
    </member>
    <member name="P:Microsoft.DirectX.Security.Permissions.SoundPermissionAttribute.UseCapture">
      <summary>Gets or sets the type of access.</summary>
    </member>
  </members>
</doc>